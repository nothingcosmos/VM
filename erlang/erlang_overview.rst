Erlang Overview
###############################################################################

Erlang 言語の特徴

* 関数型言語
* 先行評価
* 変数への代入は1回限り
* 動的型付け

関数型言語っていうのは、関数がファーストクラスという意味なのだと思う。

関数はメッセージにもできるし、spawnの対象、asyncの対象、メッセージにシリアライズできる。

ホットスワップ、ホットローディング、障害時の復帰、Migrationの対象にできる。

変数への代入が一回限りという制約は、VMを実装する上でどのようなメリットがあるのか。
GCの設計で恩恵があるとかどうとか。


特徴(wikipediaから抜粋)
===============================================================================

* 分散化された環境 (プロセス間、コア間、ノード間)
* 障害に耐性をもつ (フォルトトレラント)
* ある程度のリアルタイム性を備える
* 無停止で稼働する (低レイテンシかつ無停止のGC）
* ホットスワップが可能であり、稼働中のシステムを停止すること無くErlangのプログラムを変更することができる。 

* インタプリタ + HiPE
エリクソンによるErlangの実装は基本的にはインタプリタであるが、
HiPEというコンパイラも同社の実装に含まれている。

ただしHiPEはErlangが動作する全てのプラットフォームで使えるわけではない。

* 軽量なプロセス
OSのプロセスではなく、独自のprocess

プロセス同士はメモリを共有しないで、完全に独立している。

プロセスの交代は非常に高速である。

プロセス同士の連絡は非常に高速に行なわれる。

* プロセス間通信
非同期のメッセージ転送システム

「メールボックス」 メールボックスには他のプロセスから受信したメッセージが格納される。

メールボックスに格納されたメッセージがメールボックスを所有するプロセスによって処理される。 

そのときErlangのプロセスはメッセージを得るために receive という基本操作を行う。

メッセージが処理されると、メッセージはメールボックスキューから除去され、

プロセスは復帰して続きの処理を行う。 

つまり1プロセスに付き1メールボックス、非同期のメッセージ転送システムは、プロセス間で行う。

Erlangの構成要素は何であれメッセージとして使うことができる。

Erlangの基本要素である整数 (integer) 、浮動小数点数 (float) 、

文字 (character) 、atomも、またタプル、リスト、さらには関数さえも、メッセージとして扱うことができる。


Erlangでは異なるノード (コンピュータ) に分散した複数のプロセスを互いに連携させて
動作させるためのサポートも組み込みで備えている (分散処理) 。 

プロセスは遠隔のノードに生成することができ、遠隔ノード上のプロセスとのプロセス間通信は透過的である。 

すなわち、遠隔ノード上のプロセスとのプロセス間通信は、
同じノード上のプロセスとのプロセス間通信と全く同じように行われる。

Erlangでの並行処理では、エラー処理の基本的な方法をサポートしている。 

あるプロセスが異常をきたすと、プロセスは手際良く終了し、
そのプロセスを制御しているプロセス 
(何らかのアクションをとることができるプロセス) にメッセージを送信する。 

このエラー処理の方法により、ソースコードの保守性を高め複雑性を低減することができる。
