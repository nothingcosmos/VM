BEAM VM src and dir
###############################################################################
otp_src_R16B01


ディレクトリ構成
===============================================================================

erts/emulator ::

  beam           //beam vm 本体
  drivers
  hipe
  internal_doc
  pcre
  sys            //os依存部分
    unix
    win32
  test
  utils
  valgrind
  zlib

erts/lib_src ::

  common
  pthread
    ethr_event.c
    ethr_x86_sse2_asm.c
    ethread.c    //create_pthread()のラッパー
  utils
  win


ヘッダ一覧
*******************************************************************************
erts/emulator/beam

atom.h
===============================================================================

DataTypeのatom

beam_catches.h
===============================================================================

try-catchのcatch側の定義

beam_load.h
===============================================================================

BeamInstrとenumのみ定義でよくわからん

bif.h
===============================================================================
bif系のマクロ

bifは組み込み関数を定義したり、外部との呼び出しの連携部分

連携部分は全部マクロぽい。

big.h
===============================================================================
bignumの定義

四則演算等のAPIも

code_ix.h
===============================================================================

code_index

beam codeをload, upgrade, deleteするための機能

無理やりやるのか、atomic変数やpermission用のStateつかってlock/unlockなのか、

障害復帰時にも使用する。

dist.h
===============================================================================
Eterm単位のsend

sendの際に、ErtsDSigDataを生成する。Process,DistEntry,Eterm(cid),Eterm(connection_id)

connection系の管理も含む

erl_alloc.h
===============================================================================

allocatorの定義っぽ。

gcのallocatorではなく、リソース管理(malloc, free)のほうが中心

erl_alloc_util.h
===============================================================================

量多い。allocatorと似たような定義が多い。

erts_alcu_ ってタグが分かれているけど


erl_async.h
===============================================================================
asyncの簡単な制御

init,exit,flush,check,ready,queueの制御くらいか。

asyncは、関数ポインタと、引数の汎用データ型から成り立つ。
スレッドプールがtaskを順番に実行していく。schedulerは入らないはず。

erl_binary.h
===============================================================================

binaryのリソース制御、 align, alloc, free, magic_binary?

erl_bits.h
===============================================================================

binaryの操作 matching,

binaryはerlangのDataType。

erl_cpu_topology.h
===============================================================================

cpuinfoの変更参照、scheduler へのbind等でいろいろ

erl_driver.h
===============================================================================
おそらくerlangのvmを外部から制御するためのAPI

erl_drv_nif.h
===============================================================================
driverのnative i/f の宣言

erl_fun.h
===============================================================================

DataType fun

erl_gc.h
===============================================================================

gcらしい

copy gcか、

erl_lock_check.h
===============================================================================

lock/unlock

erl_lock_count.h
===============================================================================

erl_message.h
===============================================================================

dist用のmessageを定義

erl_monitors.h
===============================================================================

monitor系機能一式

erl_nif.h
===============================================================================
nifの定義。 erl_drv_nif.hの中身

erl_nif_api_funcs.h
===============================================================================

nif用のAPIを多数定義

erl_node_container_utils.h
===============================================================================

そもそもNodeってなんだ

全部マクロ定義

erl_node_tables.h
===============================================================================

Nodeをhashtableで管理するらしい。

erl_port.h
===============================================================================
Portの管理

erl_port_task.h
===============================================================================

Scheduling of Port Task

erl_process.h
===============================================================================
processの定義

erl_process_dist.h
===============================================================================
processを辞書管理するらし

erl_process_lock.h
===============================================================================
processのlock
smp対応でいろいろ増えている

erl_ptab.h
===============================================================================
Process/Port table

erl_sched_spec_pre_alloc.h
===============================================================================
sspa

schedulerのlocal chunkにallocate/freeする。

erl_smp.h
===============================================================================

smp向けのlock,spinlock,mtxなどの定義

erl_sock.h
===============================================================================

socketの定義 OS非依存

erl_term.h
===============================================================================

Macroが多すぎてよくわからんが、
コメントで各種レイアウトが定義されていて有用かも。


erl_thr_progress.h
===============================================================================

erts_thr_progress

erl_thr_queue.h
===============================================================================

lock-free queueらしい

erl_threads.h
===============================================================================

巨大

OSの生のthreadを制御するための泥臭い処理が多数。

threadとは別に、memoryを直接さわる処理や、atomic, mem-barrier系も定義

もうlockなんていやだー

erl_utils.h
===============================================================================
なぞ

erl_vm.h
===============================================================================
なぞ

erl_zlib.h
===============================================================================
zlib用の処理

external.h
===============================================================================

dist系の公開if

他プロセスへ送付するメッセージのencode/decode処理を定義

erts_decode_dist_ext, erts_encode_dist_ext などなど


global.h
===============================================================================

extern関数系

hash.h
===============================================================================

hashの自前実装

index.h
===============================================================================

module.h
===============================================================================

module機能

packet_parser.h
===============================================================================

TCP packet parser

register.h
===============================================================================

register

safe_hash.h
===============================================================================

thread safe hash table

sys.h
===============================================================================

アーキテクチャ依存やOS依存のマクロ

alloc系
*******************************************************************************

erl_afit_alloc.h
===============================================================================

erl_ao_firstfit_alloc.h
===============================================================================

erl_bestfit_alloc.h
===============================================================================

erl_goodfit_alloc.h
===============================================================================




低優先度
*******************************************************************************

benchmark.h
===============================================================================

beamのbenchmark用のutilityを定義している。
時間測ったり、統計取ったり



beam_bp.h
===============================================================================
breakpointの制御

dtrace-wrapper.h
===============================================================================
dtrace level 11くらいまである.

erl_bif_timer.h
===============================================================================
bif用に時間測ったり、

erl_debug.h
===============================================================================

erl_instrument.h
===============================================================================

erl_mtrace.h
===============================================================================

erl_printf_term.h
===============================================================================
printf定義

erl_sys_driver.h
===============================================================================

erl_time.h
===============================================================================

erl_trace.h
===============================================================================

各種trace系

erl_unicode.h
===============================================================================
空

erl_unicode_normalize.h
===============================================================================

unicodeのバイナリ定義

error.h
===============================================================================
errorとstacktrace

export.h
===============================================================================

version.h
===============================================================================


db系
*******************************************************************************
key/valueのdbを内部で持って、そこにで各processからアクセスできるらしい。

erl_db.h
===============================================================================

erl_db_hash.h
===============================================================================

erl_db_trace.h
===============================================================================

erl_db_util.h
===============================================================================


