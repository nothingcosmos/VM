Dart VM Advent Calendar 2012 12/05
###############################################################################

Dart VMの概要(2)
===============================================================================

続いて、fibo関数です。

.. literalinclude:: out/fibo.dart

Dart VMの実行の流れ、続き
===============================================================================

前回のアセンブラ抜粋 ::

  //main body
    t0 <- Constant:3(#40)
    PushArgument:4(t0)
    StaticCall:5(fibo t0)
  0xb2f8817c    b850000000             mov eax,0x50                   <-- fiboの引数40
  0xb2f88181    50                     push eax
  0xb2f88182    bab16b03b3             mov edx,0xb3036bb1  Array[1, 1, null]
  0xb2f88187    e87c823702             call 0xb5300408  [stub: CallStaticFunction] <-- Stub越しにfibo呼び出し
  0xb2f8818c    83c404                 add esp,0x4

Stub越しにfiboをcallしたところから。

StubのCallStaticFunctionは、fibo関数がコンパイル済みかチェックし、

コンパイルされていなければJITコンパイル(非最適化)してコードを生成します。

コードをコンパイルしてpatchingした後は、以後コンパイルチェック処理には飛ばず、

生成したコードに直接飛びます。

fiboの中間表現(非最適化)
===============================================================================
.. literalinclude:: out/fibo.fibo.ir

特徴は、(+)や(-)演算も、InstanceCallで呼び出している点です。

Dartは言語仕様において、a + bは、a.(+)(b) のようなメソッド呼び出しの糖衣構文だそうです。

そのため、変数aの型のメソッド(+)を、変数aのthisポインタと、変数bを引数に呼び出すイメージかな？

InstanceCallはさらに特殊な命令で、InstanceCallから生成されるアセンブラコードの中で、
変数aと変数bの型を記録する処理が入っています。

Dart VMの型情報の収集は、InstanceCallの中で行うと考えてOKです。

最初の(n-1)は、n(40)も1もint(Smi型)であるため、
InstanceCall(-) では、InstanceCall(-)は、(Smi型,Smi型)から呼ばれたと記録されます。

fiboのアセンブラ(非最適化)
===============================================================================
.. literalinclude:: out/fibo.fibo.asm

非常に面白いのは、Branch if ReleationalOp()が、callになっている点。

Dart VMでは、比較処理自体も、InstancCallのような呼び出しになっており、
かつ呼び出し先で型情報を収集する。

それなら、比較処理自体をInstanceCallとgotoの2中間表現に分けてしまってよいように思うが、
両者を融合した、非常に大粒な中間表現にしている。それには理由があるが、後で。

JITコンパイラ(非最適化)が生成したコードはどんな型でも動作する。
===============================================================================

ここでちょっと注意点なのですが、Dart VMのJITコンパイラ(非最適化)が生成したコードはどんな型でも動作します。

DartはOptional Typeであり、コンパイル時に型を参照してWarningは発生しますが、
ソースコードに書いた型情報は、Runtimeに何の作用も及ぼさないように設計されています。

そのため、ソースコードと中間表現は以下のような対応を取ります。

イメージ図 ::

  ソースコード                   中間表現
  int    n=0  ; n = n + 1;   --> InstanceCall(+, n, 1)
  double n=0.0; n = n + 1;   --> InstanceCall(+, n, 1)
  Point  n=p  ; n = n + 1;   --> InstanceCall(+, n, 1)
  var    n=0  ; n = n + 1;   --> InstanceCall(+, n, 1)

しかし、実行するコードではそうはいかないです。 ::

  ソースコード                   中間表現                   コード
  int    n=0  ; n = n + 1;   --> InstanceCall(+, n, 1)  --> ((Smi)n)   .(add)((smi)1)
  double n=0.0; n = n + 1;   --> InstanceCall(+, n, 1)  --> ((double)n).(add)((smi)1)
  Point  n=p  ; n = n + 1;   --> InstanceCall(+, n, 1)  --> ((Point)n) .(add)((smi)1)
  var    n=0  ; n = n + 1;   --> InstanceCall(+, n, 1)  --> ((Smi)n)   .(add)((smi)1)

コード上では、Runtimeの型に応じて、呼び出すメソッドを切り替える必要があります。

多くの動的型付け言語の処理系は、上記のような処理を、インタプリタが行っているはずです。

しかしJITコンパイルするDart VMは、
上記のように型情報を参照して動的メソッドディスパッチするコードを生成しておきます。

そのため、(+)や(<)などの基本演算も、すべてメソッドになります。

.. note::

  DartはPreCompile時には静的型付けですが、Runtimeでは動的型付けなので、、

  Dartは、receiver型の動的ディスパッチです。第1引数(thisポインタ？)のみ参照する。

  そのため、fibo(int n)とfibo(double n)はRuntime時に定義が衝突してエラーになります。


そのため、以下のTwoArgsCheckInlineCacheのStub呼び出しは、
引数にどんな型が来ても、呼び出し先のメソッドを適切に選んで、目的の(+)メソッドを呼び出します。

TwoArgsCheckInlineCache ::

  mov ecx,0xb32d06f1  'ICData target:'+' num-checks: 0'
  mov edx,0xb31eba89  Array[2, 2, null]
  call 0xb30402d8  [stub: TwoArgsCheckInlineCache] //2引数のInlineCache
  add esp,0x8

しかし、呼び出す(+)メソッドの候補は多数あり、毎回探して呼び出すと性能劣化が懸念されます。

そのため、InlineCacheという動的メソッドディスパッチの最適化方法を使用します。

InlineCache
===============================================================================
中間表現上で、RelationalOpやInstanceCallだった命令が、
コード上ではTwoArgsCheckInlineCacheのstub呼び出しに変換されています。

InlineCacheは、多型のメソッドディスパッチを高速化するため、
よく呼ばれる型をキャッシュしておき、高速に呼び出せるようにする仕組みです。

動的型付けだとしても、calleeが呼び出すメソッドは同じであることが多いため、高速に動作します。

InlineCacheは、calleeごとにCacheを持ち、メソッド呼び出し履歴を記録します。

fiboが呼び出すメソッド、(<)と(-)と(-)と(+)の4ヶ所で、各々がCacheテーブルを持つはずです。

また、TwoArgsCheckInlineCacheのStubは、未解決クラスのloadとJITコンパイルも行うことができます。

仮に未解決のPointクラスの(+)メソッドを呼び出す場合、以下の手順が必要でしょう。

(1) Pointクラスを探す。
(2) Pointクラスに(+)メソッドが定義されているか確認。
(3) (+)メソッドをJITコンパイルしてコードを生成する。

次回、最適化JITコンパイル！！！
===============================================================================
fiboはfiboを再帰呼び出しするため、いつかは呼び出し回数2000回を越えて、
OptimizeFunctionの呼び出しにより、再コンパイル(最適化)されることになる。

最適化する際には、InlineCacheやInstanceCallの呼び出し時に情報収集した型情報を活用して、
高速なコードを生成します。

続きは次回で。。

まとめ
===============================================================================
(1) +や-や<演算子は、InlineCacheになる。
(2) InlineCacheの中で、型情報を収集する。
(3) fiboは再帰呼び出しで、次回最適化JITコンパイルされそう！！！

