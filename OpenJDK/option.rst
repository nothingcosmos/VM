Option
###############################################################################

optionの例 ::

  java -Dfile.encoding=utf-8
  -XX:+AggressiveOpts
  -XX:+UseFastAccessorMethods
  -XX:+UseCompilerSafepoints
  -XX:+UseOnStackReplacement
  -XX:CompileThreshold=200
  -XX:+UseBiasedLocking
  -XX:ReservedCodeCacheSize=32M
  -XX:MaxNewSize=48M
  -XX:SurvivorRatio=4
  -XX:MaxTenuringThreshold=32
  -XX:TargetSurvivorRatio=80
  -XX:+UseConcMarkSweepGC
  -XX:+CMSParallelRemarkEnabled
  -XX:+UseParNewGC
  -Xmn32M
  -Xms512M
  -Xmx1024M

オプションの分類
*******************************************************************************

-XX:+AggressiveOpts
===============================================================================
初期値:false
推奨:trueかな。。
Aggresssive optimization flags

基本的にtrueにしとけば性能向上する可能性が大きい。
しかしAggressiveOptsと他オプションを同時に指定した際に
JVMがクラッシュするケースもjdk7であったため、 注意が必要。

デフォルトではfalseになっている、積極的な最適化を有効化する。
デフォルトfalseなのは、速度低下するケースが存在するため。

有効になる最適化は、JDKのバージョンごとに異なる。

JDK8の場合、ex)
EliminateAutoBox
DoEscapeAnalysis
AutoBoxCacheMax=20,000
BiasedLockingStartupDelay=500

-XX:+UseFastAccessorMethods
===============================================================================
初期値:true
推奨:指定なし



-XX:+UseCompilerSafepoints
===============================================================================
初期値:true
推奨:指定なし

JITコンパイラが生成したコードにSafepointを挿入して、専用のテーブルを生成する。

-XX:+UseOnStackReplacement
===============================================================================
初期値:true
推奨:指定なし

JITコンパイラの最適化、OnStackReplacementを有効にする。
JITコンパイルの対象が広がって、パフォーマンスがあがる。
何度も呼び出されないけど、長大なループを内包したメソッドをJITコンパイル対象にする機能

-XX:CompileThreshold=200
===============================================================================
初期値:0
推奨:指定なし

JITコンパイルを行うまでのメソッド呼び出し/分岐のための閾値を指定する。
低い数値を指定すると、起動後早くJITコンパイルする可能性が高くなる。

JVM7からTierCompileが有効になったので、指定する意味は薄い。
TierCompileは最高で0-2-3-4の5段階層存在する。


-XX:+UseBiasedLocking
===============================================================================
初期値:true
推奨:指定なし

バイアスロックを有効にする。
詳細についてはJava Tuning White Paper参照。
もしくは、http://www.slideshare.net/nminoru_jp/jvmreadingparallegc
を参照。

-XX:ReservedCodeCacheSize=32M
===============================================================================
初期値:32M

-XX:MaxNewSize=48M
===============================================================================
初期値:max_uintx

-XX:SurvivorRatio=4
===============================================================================
初期値:8

Eden/Survivor領域のサイズの比率
[Solaris AMD64:6; SPARC in 1.3.1:25; その他 Solaris プラットフォーム in 5.0 またはそれ以前:32]

Eden : From : Toは、
8:1:1
になっている。

4を指定すると、4:1:1かな？

Eden : From : To : Tenured


-XX:MaxTenuringThreshold=32
===============================================================================
初期値:15

NewGC のfrom->toの
object headerにage fieldが4bitなので、from toを経由するたびに、
ageがあがっていく、0-15。最大で15歳まで

Tenuringに上がるまでの閾値を操作している。
そのため、Old領域のpromotionまで

-XX:TargetSurvivorRatio=80
===============================================================================
初期値:50




-XX:+UseConcMarkSweepGC
===============================================================================
初期値:false

UseParNewGC, CMSParallelRemarkEnabled

-XX:+CMSParallelRemarkEnabled
===============================================================================
初期値:false

-XX:+UseParNewGC
===============================================================================
初期値:false


===============================================================================
===============================================================================

===============================================================================

*******************************************************************************

===============================================================================
===============================================================================

OpenJDKのソースコードの概要
###############################################################################

ソースコードの取得方法
===============================================================================

ソースコード取得URL

http://hg.openjdk.java.net/jdk7u/jdk7u
http://hg.openjdk.java.net/jdk8/jdk8
http://hg.openjdk.java.net/jdk9/jdk9

上記URLを指定して
(1) hg clone xxx
(2) ディレクトリ内で./get_source.sh //これで必要なソースコードを全部取得

jdk7uが最新版。jdk7は古い。

オプションからの処理の辿り方
===============================================================================

-Xで始まるオプションは、JVMの非標準オプション。HotSpotでは動くが、IBMで動くかはなぞ。
-XX:で始まるオプションは、HotSpotの非推奨オプション。経験者向け。



===============================================================================
===============================================================================
===============================================================================
