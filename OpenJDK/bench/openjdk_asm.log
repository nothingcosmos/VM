    122    1    b  3       java.lang.String::equals (81 bytes)
    127    2    b  3       java.lang.Math::min (11 bytes)
    128    3    b  3       java.lang.String::charAt (29 bytes)
                              @ 18  java/lang/StringIndexOutOfBoundsException::<init> (not loaded)   not inlineable
    130    4    b  3       java.lang.String::indexOf (70 bytes)
                              @ 66   java.lang.String::indexOfSupplementary (71 bytes)   callee is too large
    136    5    b  3       java.lang.String::length (6 bytes)
    137    6     n 0       java.lang.System::arraycopy (native)   (static)
    144    7    b  3       java.lang.Object::<init> (1 bytes)
    157    8    b  3       java.io.BufferedInputStream::getBufIfOpen (21 bytes)
                              @ 15  java/io/IOException::<init> (not loaded)   not inlineable
    159    9  s b  3       java.io.BufferedInputStream::read (49 bytes)
                              @ 12   java.io.BufferedInputStream::fill (233 bytes)   callee is too large
                              @ 29   java.io.BufferedInputStream::getBufIfOpen (21 bytes)
                                @ 15  java/io/IOException::<init> (not loaded)   not inlineable
    163   10    b  3       java.io.DataInputStream::readUTF (501 bytes)
                              @ 1   java.io.DataInputStream::readUnsignedShort (39 bytes)   callee is too large
                              @ 87   java.io.DataInputStream::readFully (63 bytes)   callee is too large
                              @ 259  java/io/UTFDataFormatException::<init> (not loaded)   not inlineable
                              @ 291   java.lang.StringBuilder::<init> (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::<init> (12 bytes)
                                  @ 1   java.lang.Object::<init> (1 bytes)
                              @ 296   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (50 bytes)   callee is too large
                              @ 301   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (62 bytes)   callee is too large
                              @ 304   java.lang.StringBuilder::toString (17 bytes)
                                @ 13   java.lang.String::<init> (62 bytes)   callee is too large
                              @ 307  java/io/UTFDataFormatException::<init> (not loaded)   not inlineable
                              @ 351  java/io/UTFDataFormatException::<init> (not loaded)   not inlineable
                              @ 403   java.lang.StringBuilder::<init> (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::<init> (12 bytes)
                                  @ 1   java.lang.Object::<init> (1 bytes)
                              @ 408   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (50 bytes)   callee is too large
                              @ 415   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (62 bytes)   callee is too large
                              @ 418   java.lang.StringBuilder::toString (17 bytes)
                                @ 13   java.lang.String::<init> (62 bytes)   callee is too large
                              @ 421  java/io/UTFDataFormatException::<init> (not loaded)   not inlineable
                              @ 469   java.lang.StringBuilder::<init> (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::<init> (12 bytes)
                                  @ 1   java.lang.Object::<init> (1 bytes)
                              @ 474   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (50 bytes)   callee is too large
                              @ 479   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (62 bytes)   callee is too large
                              @ 482   java.lang.StringBuilder::toString (17 bytes)
                                @ 13   java.lang.String::<init> (62 bytes)   callee is too large
                              @ 485  java/io/UTFDataFormatException::<init> (not loaded)   not inlineable
                              @ 497   java.lang.String::<init> (62 bytes)   callee is too large
    192   11    b  3       java.util.Arrays::copyOfRange (63 bytes)
                              @ 16   java.lang.StringBuilder::<init> (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::<init> (12 bytes)
                                  @ 1   java.lang.Object::<init> (1 bytes)
                              @ 20   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (62 bytes)   callee is too large
                              @ 25   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (50 bytes)   callee is too large
                              @ 29   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (62 bytes)   callee is too large
                              @ 32   java.lang.StringBuilder::toString (17 bytes)
                                @ 13   java.lang.String::<init> (62 bytes)   callee is too large
                              @ 35   java.lang.IllegalArgumentException::<init> (6 bytes)   don't inline Throwable constructors
                              @ 54   java.lang.Math::min (11 bytes)
                              @ 57   java.lang.System::arraycopy (0 bytes)   intrinsic
    197   12    b  3       java.lang.String::<init> (62 bytes)
                              @ 1   java.lang.Object::<init> (1 bytes)
                              @ 13  java/lang/StringIndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 26  java/lang/StringIndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 45  java/lang/StringIndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 55   java.util.Arrays::copyOfRange (63 bytes)   callee is too large
    198   13    b  3       java.io.DataInputStream::readUnsignedShort (39 bytes)
                              @ 4   java.io.InputStream::read (0 bytes)   no static binding
                              @ 12   java.io.InputStream::read (0 bytes)   no static binding
                              @ 26  java/io/EOFException::<init> (not loaded)   not inlineable
    200   14    b  3       java.io.DataInputStream::readFully (63 bytes)
                              @ 8  java/lang/IndexOutOfBoundsException::<init> (not loaded)   not inlineable
               !              @ 34   java.io.InputStream::read (109 bytes)   no static binding
                              @ 48  java/io/EOFException::<init> (not loaded)   not inlineable
    201   15    b  3       java.io.DataInputStream::readUTF (5 bytes)
                              @ 1   java.io.DataInputStream::readUTF (501 bytes)   callee is too large
    202   16  s b  3       java.io.BufferedInputStream::read (113 bytes)
                              @ 1   java.io.BufferedInputStream::getBufIfOpen (21 bytes)
                                @ 15  java/io/IOException::<init> (not loaded)   not inlineable
                              @ 26  java/lang/IndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 49   java.io.BufferedInputStream::read1 (108 bytes)   callee is too large
                              @ 101   java.io.InputStream::available (2 bytes)   no static binding
    206   17    b  3       java.io.BufferedInputStream::read1 (108 bytes)
                              @ 18   java.io.BufferedInputStream::getBufIfOpen (21 bytes)
                                @ 15  java/io/IOException::<init> (not loaded)   not inlineable
                              @ 33   java.io.BufferedInputStream::getInIfOpen (21 bytes)
                                @ 15  java/io/IOException::<init> (not loaded)   not inlineable
               !              @ 39   java.io.InputStream::read (109 bytes)   no static binding
                              @ 44   java.io.BufferedInputStream::fill (233 bytes)   callee is too large
                              @ 80   java.io.BufferedInputStream::getBufIfOpen (21 bytes)
                                @ 15  java/io/IOException::<init> (not loaded)   not inlineable
                              @ 91   java.lang.System::arraycopy (0 bytes)   intrinsic
    212   18    b  3       java.io.DataInputStream::readShort (40 bytes)
                              @ 4   java.io.InputStream::read (0 bytes)   no static binding
                              @ 12   java.io.InputStream::read (0 bytes)   no static binding
                              @ 26  java/io/EOFException::<init> (not loaded)   not inlineable
    213   19    b  3       java.io.DataInputStream::readFully (9 bytes)
                              @ 5   java.io.DataInputStream::readFully (63 bytes)   callee is too large
    221   20    b  3       java.lang.String::hashCode (55 bytes)
    375   21    b  3       java.util.HashMap::hash (20 bytes)
                              @ 9   java.lang.Object::hashCode (0 bytes)   no static binding
    384   22    b  3       java.util.HashMap::put (13 bytes)
                              @ 2   java.util.HashMap::hash (20 bytes)
                                @ 9   java.lang.Object::hashCode (0 bytes)   no static binding
                              @ 9   java.util.HashMap::putVal (300 bytes)   callee is too large
    385   23    b  1       java.lang.ref.Reference::get (5 bytes)
    386   24    b  1       java.lang.ThreadLocal::access$400 (5 bytes)
    389   25    b  1       java.lang.Object::<init> (1 bytes)
    389    7       3       java.lang.Object::<init> (1 bytes)   made not entrant
    391   26    b  3       java.lang.System::getSecurityManager (4 bytes)
    393   27    b  3       java.lang.AbstractStringBuilder::ensureCapacityInternal (16 bytes)
                              @ 12   java.lang.AbstractStringBuilder::expandCapacity (50 bytes)   callee is too large
    395   28    b  4       java.lang.String::charAt (29 bytes)
{method}
 - this oop:          0x00007fd948618808
 - method holder:     'java/lang/String'
 - constants:         0x00007fd948615100 constant pool [678] {0x00007fd948615100} for 'java/lang/String' cache=0x00007fd9486c5478
 - access:            0x81000001  public 
 - name:              'charAt'
 - signature:         '(I)C'
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd9491fc400
 - code size:         29
 - code start:        0x00007fd9486187c8
 - code end (excl):   0x00007fd9486187e5
 - method data:       0x00007fd9487bd8d0
 - checked ex length: 0
 - linenumber start:  0x00007fd9486187e5
 - localvar length:   2
 - localvar start:    0x00007fd9486187ee
 - compiled code: nmethod    398    3       3       java.lang.String::charAt (29 bytes)
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N68: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B7 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	testl   RDX, RDX
02e   	jl,s   B7  P=0.000000 C=5631.000000
02e
030   B2: #	B8 B3 <- B1  Freq: 1
030   	movl    RBP, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
033   	movl    R10, [RBP + #12 (8-bit)]	# range
037   	NullCheck RBP
037
037   B3: #	B7 B4 <- B2  Freq: 0.999999
037   	cmpl    RDX, R10
03a   	jge,s   B7  P=0.000000 C=5631.000000
03a
03c   B4: #	B6 B5 <- B3  Freq: 0.999998
03c   	cmpl    RDX, R10	# unsigned
03f   	jnb,us  B6  P=0.000001 C=-1.000000
03f
041   B5: #	N68 <- B4  Freq: 0.999997
041   	movzwl  RAX, [RBP + #16 + RDX << #1]	# ushort/char
046   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

051   	ret
051
052   B6: #	N68 <- B4  Freq: 1.01328e-06
052   	movl    RSI, #-28	# int
057   	movl    [rsp + #0], RDX	# spill
      	nop 	# 1 bytes pad for loops and calls
05b   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop off=96}
060   	int3	# ShouldNotReachHere
060
065   B7: #	N68 <- B3 B1  Freq: 9.76836e-07
065   	movl    RSI, #5	# int
06a   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
06f   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='5')
        # java.lang.String::charAt @ bci:13  L[0]=_ L[1]=RBP
        # OopMap{off=116}
074   	int3	# ShouldNotReachHere
074
079   B8: #	N68 <- B2  Freq: 1.01328e-06
079   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
07f   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=132}
084   	int3	# ShouldNotReachHere
084

    400    3       3       java.lang.String::charAt (29 bytes)   made not entrant
    401   29    b  3       java.lang.String::indexOf (7 bytes)
                              @ 3   java.lang.String::indexOf (70 bytes)   callee is too large
    402   30    b  3       java.lang.AbstractStringBuilder::append (50 bytes)
                              @ 5   java.lang.AbstractStringBuilder::appendNull (56 bytes)   callee is too large
                              @ 10   java.lang.String::length (6 bytes)
                              @ 21   java.lang.AbstractStringBuilder::ensureCapacityInternal (16 bytes)
                                @ 12   java.lang.AbstractStringBuilder::expandCapacity (50 bytes)   callee is too large
                              @ 35   java.lang.String::getChars (62 bytes)   callee is too large
    408   31    b  3       java.util.HashMap$Node::<init> (26 bytes)
                              @ 1   java.lang.Object::<init> (1 bytes)
    410   32    b  3       java.lang.String::lastIndexOf (52 bytes)
                              @ 16   java.lang.Math::min (11 bytes)
                              @ 48   java.lang.String::lastIndexOfSupplementary (70 bytes)   callee is too large
    418   33    b  3       sun.util.locale.LocaleUtils::isUpper (18 bytes)
    423   34    b  3       java.lang.StringBuilder::append (8 bytes)
                              @ 2   java.lang.AbstractStringBuilder::append (50 bytes)   callee is too large
    433   35    b  3       java.util.concurrent.ConcurrentHashMap::tabAt (21 bytes)
                              @ 14   sun.misc.Unsafe::getObjectVolatile (0 bytes)   intrinsic
    434   36     n 0       sun.misc.Unsafe::getObjectVolatile (native)   
    438   37    b  3       sun.nio.cs.UTF_8$Encoder::encode (359 bytes)
                              @ 14   java.lang.Math::min (11 bytes)
                              @ 139   java.lang.Character::isSurrogate (18 bytes)
                              @ 157  sun/nio/cs/Surrogate$Parser::<init> (not loaded)   not inlineable
                              @ 175  sun/nio/cs/Surrogate$Parser::parse (not loaded)   not inlineable
                              @ 186   java.nio.charset.CharsetEncoder::malformedInputAction (5 bytes)
    454   38  s b  4       java.io.BufferedInputStream::read (49 bytes)
                              @ 12   java.io.BufferedInputStream::fill (233 bytes)   too big
                              @ 29   java.io.BufferedInputStream::getBufIfOpen (21 bytes)   inline (hot)
{method}
 - this oop:          0x00007fd9487651f8
 - method holder:     'java/io/BufferedInputStream'
 - constants:         0x00007fd948764630 constant pool [155] {0x00007fd948764630} for 'java/io/BufferedInputStream' cache=0x00007fd9487666e8
 - access:            0x81000021  public synchronized 
 - name:              'read'
 - signature:         '()I'
 - max stack:         6
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x00007fd94901f060
 - adapters:          AHE@0x00007fd9580b8060: 0xb0000000 i2c: 0x00007fd949106ae0 c2i: 0x00007fd949106bf4 c2iUV: 0x00007fd949106bc7
 - compiled entry     0x00007fd9491ffba0
 - code size:         49
 - code start:        0x00007fd9487651a8
 - code end (excl):   0x00007fd9487651d9
 - method data:       0x00007fd94887a7f0
 - checked ex length: 1
 - checked ex start:  0x00007fd9487651f4
 - linenumber start:  0x00007fd9487651d9
 - localvar length:   1
 - localvar start:    0x00007fd9487651e6
 - compiled code: nmethod    460    9  s    3       java.io.BufferedInputStream::read (49 bytes)
#
#  int ( java/io/BufferedInputStream:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/io/BufferedInputStream:NotNull *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: Fixed slot 3
#r186 rsp+24: Fixed slot 2
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N336: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B14 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    [rsp + #0], RSI	# spill
030   	movq    RAX, [RSI]	# long
033   	movq    R10, RAX	# spill
036   	andq    R10, #7	# long
03a   	cmpq    R10, #5
03e   	jne     B14  P=0.000001 C=-1.000000
03e
044   B2: #	B16 B3 <- B1  Freq: 0.999999
044   	# TLS is in R15
044   	movl    R11, narrowklass: precise klass java/io/BufferedInputStream: 0x00007fd9000b4df8:Constant:exact *	# compressed klass ptr
04a   	decode_klass_not_null R10,R11
058   	movq    R10, [R10 + #176 (32-bit)]	# long
05f   	movq    R11, R10	# spill
062   	orq     R11, R15	# long
065   	movq    R8, R11	# spill
068   	xorq    R8, RAX	# long
06b   	testq   R8, #-121	# long
072   	jne     B16  P=0.000001 C=-1.000000
072
078   B3: #	B8 B4 <- B15 B14 B2 B20  Freq: 1
078   	MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
078   	movq    R10, [rsp + #0]	# spill
07c   	movl    R10, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
080   	movq    R11, [rsp + #0]	# spill
084   	movl    R8, [R11 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
088   	cmpl    R10, R8
08b   	jge,s   B8  P=0.000186 C=5375.000000
08b
08d   B4: #	B25 B5 <- B9 B3  Freq: 0.999907
08d   	movq    R10, [rsp + #0]	# spill
091   	movl    R11, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
095   	MEMBAR-acquire ! (empty encoding)
095   	movl    R10, [R11 + #12 (8-bit)]	# range
099   	NullCheck R11
099
099   B5: #	B12 B6 <- B4  Freq: 0.999906
099   	movq    R8, [rsp + #0]	# spill
09d   	movl    RBP, [R8 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0a1   	movl    R9, RBP	# spill
0a4   	incl    R9	# int
0a7   	movl    [R8 + #20 (8-bit)], R9	# int ! Field: java/io/BufferedInputStream.pos
0ab   	cmpl    RBP, R10	# unsigned
0ae   	jnb,us  B12  P=0.000001 C=-1.000000
0ae
0b0   B6: #	B21 B7 <- B5  Freq: 0.999905
0b0   	movslq  R10, RBP	# i2l
0b3   	movzbl  RBX, [R11 + #16 + R10]	# ubyte
0b9   	MEMBAR-release (a FastUnlock follows so empty encoding)
0b9   	movl    R10, #7	# long (unsigned 32-bit)
0bf   	andq    R10, [R8]	# long
0c2   	cmpq    R10, #5
0c6   	jne     B21  P=0.000001 C=-1.000000
0c6
0cc   B7: #	N336 <- B11 B22 B21 B6  Freq: 0.999998
0cc   	movl    RAX, RBX	# spill
0ce   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0d9   	ret
0d9
0da   B8: #	B26 B9 <- B3  Freq: 0.000186026
0da   	movq    RSI, R11	# spill
0dd   	movq    RBP, RSI	# spill
      	nop 	# 3 bytes pad for loops and calls
0e3   	call,static  java.io.BufferedInputStream::fill
        # java.io.BufferedInputStream::read @ bci:12  L[0]=RBP MON-BOX0=rsp+16 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [0]=Oop off=232}
0e8
0e8   B9: #	B4 B10 <- B8  Freq: 0.000186022
        # Block is sole successor of call
0e8   	movl    R11, [RBP + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
0ec   	movl    R10, [RBP + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0f0   	cmpl    R10, R11
0f3   	jl,s   B4  P=0.500000 C=-1.000000
0f3
0f5   B10: #	B23 B11 <- B9  Freq: 9.30112e-05
0f5   	MEMBAR-release (a FastUnlock follows so empty encoding)
0f5   	movl    R10, #7	# long (unsigned 32-bit)
0fb   	andq    R10, [RBP]	# long
0ff   	cmpq    R10, #5
103   	jne     B23  P=0.000001 C=-1.000000
103
109   B11: #	B7 <- B24 B23 B10  Freq: 9.30112e-05
109   	movl    RBX, #-1	# int
10e   	jmp,s   B7
10e
110   B12: #	N336 <- B5  Freq: 1.01318e-06
110   	movl    RSI, #-28	# int
115   	movl    [rsp + #8], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
11b   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.io.BufferedInputStream::read @ bci:43  L[0]=_ STK[0]=rsp + #8 STK[1]=RBP MON-BOX0=rsp+16 MON-OBJ[0]=rsp + #0
        # OopMap{[0]=Oop [8]=NarrowOop off=288}
120   	int3	# ShouldNotReachHere
120
125   B13: #	B14 <- B16  Freq: 9.99999e-13
125   	cmpxchgq [RSI], R10	# If rax == [RSI] then store R10 into [RSI]
12a
12a   B14: #	B3 B15 <- B1 B13  Freq: 1e-06
12a   	leaq    RBX, [rsp + #16]	# box lock
12f   	fastlock RSI,RBX	! kills RBX,RAX,R10
17e   	je     B3  P=0.999999 C=-1.000000
17e
184   B15: #	B3 <- B19 B14  Freq: 2e-12
184   	leaq    RDX, [rsp + #16]	# box lock
189   	movq    RBP, RSI	# spill
      	nop 	# 3 bytes pad for loops and calls
18f   	call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=RBP MON-BOX0=rsp+16 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [0]=Oop off=404}
194   	jmp     B3
194
199   B16: #	B13 B17 <- B2  Freq: 9.99999e-07
199   	testq   R8, #7	# long
1a0   	jne     B13  P=0.000001 C=-1.000000
1a0
1a6   B17: #	B19 B18 <- B16  Freq: 9.99998e-07
1a6   	testq   R8, #768	# long
1ad   	jne,s   B19  P=0.000001 C=-1.000000
1ad
1af   B18: #	B19 <- B17  Freq: 9.99997e-07
1af   	andq    RAX, #895	# long
1b6   	movq    R11, RAX	# spill
1b9   	orq     R11, R15	# long
1bc
1bc   B19: #	B15 B20 <- B18 B17  Freq: 9.99998e-07
1bc   	cmpxchgq [RSI], R11	# If rax == [RSI] then store R11 into [RSI]
1c1   	jne,us  B15  P=0.000001 C=-1.000000
1c1
1c3   B20: #	B3 <- B19  Freq: 9.99997e-07
1c3   	jmp     B3
1c3
1c8   B21: #	B7 B22 <- B6  Freq: 9.99905e-07
1c8   	leaq    RAX, [rsp + #16]	# box lock
1cd   	fastunlock R8,RAX	! kills RAX,R10
26f   	je     B7  P=0.999999 C=-1.000000
26f
275   B22: #	B7 <- B21  Freq: 9.99905e-13
275   	movq    RDI, R8	# spill
278   	leaq    RSI, [rsp + #16]	# box lock
27d   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
28a   	jmp     B7
28a
28f   B23: #	B11 B24 <- B10  Freq: 9.30112e-11
28f   	leaq    RAX, [rsp + #16]	# box lock
294   	fastunlock RBP,RAX	! kills RAX,R10
338   	je     B11  P=0.999999 C=-1.000000
338
33e   B24: #	B11 <- B23  Freq: 9.30112e-17
33e   	movq    RDI, RBP	# spill
341   	leaq    RSI, [rsp + #16]	# box lock
346   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
353   	jmp     B11
353
358   B25: #	N336 <- B4  Freq: 4.76793e-07
358   	movl    RSI, #-83	# int
35d   	movq    RBP, [rsp + #0]	# spill
361   	movl    [rsp + #12], R11	# spill
      	nop 	# 1 bytes pad for loops and calls
367   	call,static  wrapper for: uncommon_trap(reason='unreached' action='reinterpret')
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #12 STK[0]=rsp + #12
        # java.io.BufferedInputStream::read @ bci:29  L[0]=RBP MON-BOX0=rsp+16 MON-OBJ[0]=RBP
        # OopMap{rbp=Oop [12]=NarrowOop off=876}
36c   	int3	# ShouldNotReachHere
36c
371   B26: #	B28 B27 <- B8  Freq: 1.86026e-09
371   	# exception oop is in rax; no code emitted
371   	movq    RBX, RAX	# spill
374   	MEMBAR-release (a FastUnlock follows so empty encoding)
374   	movl    R10, #7	# long (unsigned 32-bit)
37a   	andq    R10, [RBP]	# long
37e   	cmpq    R10, #5
382   	jne,s   B28  P=0.000001 C=-1.000000
382
384   B27: #	N336 <- B29 B28 B26  Freq: 1.86026e-09
384   	movq    RSI, RBX	# spill
387   	addq    rsp, 32	# Destroy frame
	popq   rbp

38c   	jmp     rethrow_stub
38c
391   B28: #	B27 B29 <- B26  Freq: 1.86026e-15
391   	leaq    RAX, [rsp + #16]	# box lock
396   	fastunlock RBP,RAX	! kills RAX,R10
43a   	je     B27  P=0.999999 C=-1.000000
43a
440   B29: #	B27 <- B28  Freq: 1.86026e-21
440   	movq    RDI, RBP	# spill
443   	leaq    RSI, [rsp + #16]	# box lock
448   	call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
455   	jmp     B27
455

    481    9  s    3       java.io.BufferedInputStream::read (49 bytes)   made not entrant
    482   39    b  3       java.io.DataInputStream::readInt (72 bytes)
                              @ 4   java.io.InputStream::read (0 bytes)   no static binding
                              @ 12   java.io.InputStream::read (0 bytes)   no static binding
                              @ 20   java.io.InputStream::read (0 bytes)   no static binding
                              @ 28   java.io.InputStream::read (0 bytes)   no static binding
                              @ 48  java/io/EOFException::<init> (not loaded)   not inlineable
seed: 1700461846
size: 10000000 bytes
loop: 100 times
    509   40     n 0       sun.misc.Unsafe::compareAndSwapLong (native)   
    509   41    b  3       java.util.Random::nextInt (7 bytes)
                              @ 3   java.util.Random::next (47 bytes)   callee is too large
    511   42    b  3       java.util.concurrent.atomic.AtomicLong::get (5 bytes)
    512   43    b  3       java.util.concurrent.atomic.AtomicLong::compareAndSet (13 bytes)
                              @ 9   sun.misc.Unsafe::compareAndSwapLong (0 bytes)   intrinsic
    513   44    b  3       java.util.Random::next (47 bytes)
                              @ 8   java.util.concurrent.atomic.AtomicLong::get (5 bytes)
                              @ 32   java.util.concurrent.atomic.AtomicLong::compareAndSet (13 bytes)
                                @ 9   sun.misc.Unsafe::compareAndSwapLong (0 bytes)   intrinsic
    517   45    b  4       java.lang.Math::min (11 bytes)
{method}
 - this oop:          0x00007fd9486f1078
 - method holder:     'java/lang/Math'
 - constants:         0x00007fd9486ede80 constant pool [324] {0x00007fd9486ede80} for 'java/lang/Math' cache=0x00007fd9486f28e0
 - access:            0x81000009  public static 
 - name:              'min'
 - signature:         '(II)I'
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      14 _min
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b95b0: 0xaa000000 i2c: 0x00007fd949127660 c2i: 0x00007fd94912779c c2iUV: 0x00007fd94912776f
 - compiled entry     0x00007fd9491cd460
 - code size:         11
 - code start:        0x00007fd9486f1048
 - code end (excl):   0x00007fd9486f1053
 - method data:       0x00007fd948833610
 - checked ex length: 0
 - linenumber start:  0x00007fd9486f1053
 - localvar length:   2
 - localvar start:    0x00007fd9486f105e
 - compiled code: nmethod    518    2       3       java.lang.Math::min (11 bytes)
#
#  int ( int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 <- B3  Freq: 1
abababab
000   B1: #	B4 B2 <- BLOCK HEAD IS JUNK   Freq: 1
000   	subq    rsp, #24	# Create frame
	movq    [rsp + #16], rbp	# Save rbp

00c   	cmpl    RSI, RDX
00e   	jle,s   B4  P=0.086884 C=5375.000000
00e
010   B2: #	B3 <- B1  Freq: 0.913116
010   	movl    RAX, RDX	# spill
010
012   B3: #	N1 <- B2 B4  Freq: 1
012   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

01d   	ret
01d
01e   B4: #	B3 <- B1  Freq: 0.0868837
01e   	movl    RAX, RSI	# spill
020   	jmp,s   B3
020

    519    2       3       java.lang.Math::min (11 bytes)   made not entrant
    520   46    b  4       java.util.Random::next (47 bytes)
                              @ 8   java.util.concurrent.atomic.AtomicLong::get (5 bytes)   inline (hot)
                              @ 32   java.util.concurrent.atomic.AtomicLong::compareAndSet (13 bytes)   inline (hot)
                                @ 9   sun.misc.Unsafe::compareAndSwapLong (0 bytes)   (intrinsic)
                              @ 8   java.util.concurrent.atomic.AtomicLong::get (5 bytes)   inline (hot)
                              @ 32   java.util.concurrent.atomic.AtomicLong::compareAndSet (13 bytes)   inline (hot)
                                @ 9   sun.misc.Unsafe::compareAndSwapLong (0 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd9489451c0
 - method holder:     'java/util/Random'
 - constants:         0x00007fd948943ef8 constant pool [383] {0x00007fd948943ef8} for 'java/util/Random' cache=0x00007fd948946b60
 - access:            0xc1000004  protected 
 - name:              'next'
 - signature:         '(I)I'
 - max stack:         6
 - max locals:        7
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      20
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd94921abc0
 - code size:         47
 - code start:        0x00007fd948945148
 - code end (excl):   0x00007fd948945177
 - method data:       0x00007fd948949118
 - checked ex length: 0
 - linenumber start:  0x00007fd948945177
 - localvar length:   5
 - localvar start:    0x00007fd948945182
 - compiled code: nmethod    523   44       3       java.util.Random::next (47 bytes)
#
#  int ( java/util/Random:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/util/Random:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N121: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B6 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R8, [RSI + #24 (8-bit)]	# compressed ptr ! Field: java/util/Random.seed
030   	movq    RAX, [R8 + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
034   	NullCheck R8
034
034   B2: #	B4 B3 <- B1  Freq: 0.999999
034   	MEMBAR-acquire ! (empty encoding)
034   	MEMBAR-release ! (empty encoding)
034   	
034   	movq    R11, #281474976710655	# long
03e   	movq    R9, #25214903917	# long
048   	movq    RBX, RAX	# spill
04b   	imulq   RBX, R9	# long
04f   	addq    RBX, #11	# long
053   	andq    RBX, R11	# long
056   	cmpxchgq [R8 + #16 (8-bit)],RBX	# If rax == [R8 + #16 (8-bit)] then store RBX into [R8 + #16 (8-bit)]
	sete    RCX
	movzbl  RCX, RCX
062   	
062   	MEMBAR-acquire ! (empty encoding)
062   	testl   RCX, RCX
064   	je,s   B4  P=0.000000 C=5374.000000
064
066   B3: #	N121 <- B5 B2  Freq: 0.999999
066   	movl    RCX, #48	# int
06b   	subl    RCX, RDX	# int
06d   	shrq    RBX, RCX
070   	movl    RAX, RBX	# l2i
072   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

07d   	ret
      	nop 	# 2 bytes pad for loops and calls

080   B4: #	B4 B5 <- B2 B4 	Loop: B4-B4 inner  Freq: 4.76837e-07
080   	movq    RAX, [R8 + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
084   	MEMBAR-acquire ! (empty encoding)
084   	MEMBAR-release ! (empty encoding)
084   	
084   	movq    RBX, RAX	# spill
087   	imulq   RBX, R9	# long
08b   	addq    RBX, #11	# long
08f   	andq    RBX, R11	# long
092   	cmpxchgq [R8 + #16 (8-bit)],RBX	# If rax == [R8 + #16 (8-bit)] then store RBX into [R8 + #16 (8-bit)]
	sete    RCX
	movzbl  RCX, RCX
09e   	
09e   	MEMBAR-acquire ! (empty encoding)
09e   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.Random::next @ bci:35  L[0]=_ L[1]=RDX L[2]=_ L[3]=_ L[4]=RBX L[5]=_ L[6]=R8 STK[0]=RCX
        # OopMap{r8=NarrowOop off=158}
0a4   	testl   RCX, RCX
0a6   	je,s   B4  P=0.000000 C=5374.000000
0a6
0a8   B5: #	B3 <- B4  Freq: 4.76837e-07
0a8   	jmp,s   B3
0a8
0aa   B6: #	N121 <- B1  Freq: 1.01328e-06
0aa   	movl    RSI, #-10	# int
0af   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.util.Random::next @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap{off=180}
0b4   	int3	# ShouldNotReachHere
0b4

    525   44       3       java.util.Random::next (47 bytes)   made not entrant
    526   47    b  4       java.util.Random::nextInt (7 bytes)
                              @ 3   java.util.Random::next (47 bytes)   inline (hot)
                                @ 8   java.util.concurrent.atomic.AtomicLong::get (5 bytes)   inline (hot)
                                @ 32   java.util.concurrent.atomic.AtomicLong::compareAndSet (13 bytes)   inline (hot)
                                  @ 9   sun.misc.Unsafe::compareAndSwapLong (0 bytes)   (intrinsic)
                                @ 8   java.util.concurrent.atomic.AtomicLong::get (5 bytes)   inline (hot)
                                @ 32   java.util.concurrent.atomic.AtomicLong::compareAndSet (13 bytes)   inline (hot)
                                  @ 9   sun.misc.Unsafe::compareAndSwapLong (0 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd948945710
 - method holder:     'java/util/Random'
 - constants:         0x00007fd948943ef8 constant pool [383] {0x00007fd948943ef8} for 'java/util/Random' cache=0x00007fd948946b60
 - access:            0x81000001  public 
 - name:              'nextInt'
 - signature:         '()I'
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      25
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8060: 0xb0000000 i2c: 0x00007fd949106ae0 c2i: 0x00007fd949106bf4 c2iUV: 0x00007fd949106bc7
 - compiled entry     0x00007fd94921a420
 - code size:         7
 - code start:        0x00007fd9489456f0
 - code end (excl):   0x00007fd9489456f7
 - method data:       0x00007fd948949038
 - checked ex length: 0
 - linenumber start:  0x00007fd9489456f7
 - localvar length:   1
 - localvar start:    0x00007fd948945702
 - compiled code: nmethod    530   41       3       java.util.Random::nextInt (7 bytes)
#
#  int ( java/util/Random:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/util/Random:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N118: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B6 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R10, [RSI + #24 (8-bit)]	# compressed ptr ! Field: java/util/Random.seed
030   	movq    RAX, [R10 + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
034   	NullCheck R10
034
034   B2: #	B4 B3 <- B1  Freq: 0.999999
034   	MEMBAR-acquire ! (empty encoding)
034   	MEMBAR-release ! (empty encoding)
034   	
034   	movq    R8, #281474976710655	# long
03e   	movq    R9, #25214903917	# long
048   	movq    RCX, RAX	# spill
04b   	imulq   RCX, R9	# long
04f   	addq    RCX, #11	# long
053   	andq    RCX, R8	# long
056   	cmpxchgq [R10 + #16 (8-bit)],RCX	# If rax == [R10 + #16 (8-bit)] then store RCX into [R10 + #16 (8-bit)]
	sete    R11
	movzbl  R11, R11
064   	
064   	MEMBAR-acquire ! (empty encoding)
064   	testl   R11, R11
067   	je,s   B4  P=0.000000 C=5375.000000
067
069   B3: #	N118 <- B5 B2  Freq: 0.999999
069   	shrq    RCX, #16
06d   	movl    RAX, RCX	# l2i
06f   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

07a   	ret
      	nop 	# 5 bytes pad for loops and calls

080   B4: #	B4 B5 <- B2 B4 	Loop: B4-B4 inner  Freq: 4.76837e-07
080   	movq    RAX, [R10 + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
084   	MEMBAR-acquire ! (empty encoding)
084   	MEMBAR-release ! (empty encoding)
084   	
084   	movq    RCX, RAX	# spill
087   	imulq   RCX, R9	# long
08b   	addq    RCX, #11	# long
08f   	andq    RCX, R8	# long
092   	cmpxchgq [R10 + #16 (8-bit)],RCX	# If rax == [R10 + #16 (8-bit)] then store RCX into [R10 + #16 (8-bit)]
	sete    R11
	movzbl  R11, R11
0a0   	
0a0   	MEMBAR-acquire ! (empty encoding)
0a0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.Random::next @ bci:35  L[0]=_ L[1]=#32 L[2]=_ L[3]=_ L[4]=RCX L[5]=_ L[6]=R10 STK[0]=R11
        # java.util.Random::nextInt @ bci:3  L[0]=_
        # OopMap{r10=NarrowOop off=160}
0a6   	testl   R11, R11
0a9   	je,s   B4  P=0.000000 C=5375.000000
0a9
0ab   B5: #	B3 <- B4  Freq: 4.76837e-07
0ab   	jmp,s   B3
0ab
0ad   B6: #	N118 <- B1  Freq: 1.01328e-06
0ad   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
0b3   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.util.Random::next @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.Random::nextInt @ bci:3  L[0]=_
        # OopMap{off=184}
0b8   	int3	# ShouldNotReachHere
0b8

    532   41       3       java.util.Random::nextInt (7 bytes)   made not entrant
    535   48 %  b  3       java.util.Random::nextBytes @ 25 (56 bytes)
                              @ 11   java.util.Random::nextInt (7 bytes)
                                @ 3   java.util.Random::next (47 bytes)   callee is too large
                              @ 20   java.lang.Math::min (11 bytes)
    539   49    b  3       java.util.Random::nextBytes (56 bytes)
                              @ 11   java.util.Random::nextInt (7 bytes)
                                @ 3   java.util.Random::next (47 bytes)   callee is too large
                              @ 20   java.lang.Math::min (11 bytes)
    542   50 %  b  4       java.util.Random::nextBytes @ 25 (56 bytes)
                              @ 11   java.util.Random::nextInt (7 bytes)   inline (hot)
                                @ 3   java.util.Random::next (47 bytes)   inline (hot)
                                  @ 8   java.util.concurrent.atomic.AtomicLong::get (5 bytes)   inline (hot)
                                  @ 32   java.util.concurrent.atomic.AtomicLong::compareAndSet (13 bytes)   inline (hot)
                                    @ 9   sun.misc.Unsafe::compareAndSwapLong (0 bytes)   (intrinsic)
                                  @ 8   java.util.concurrent.atomic.AtomicLong::get (5 bytes)   inline (hot)
                                  @ 32   java.util.concurrent.atomic.AtomicLong::compareAndSet (13 bytes)   inline (hot)
                                    @ 9   sun.misc.Unsafe::compareAndSwapLong (0 bytes)   (intrinsic)
                              @ 20   java.lang.Math::min (11 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd9489452e0
 - method holder:     'java/util/Random'
 - constants:         0x00007fd948943ef8 constant pool [383] {0x00007fd948943ef8} for 'java/util/Random' cache=0x00007fd948946b60
 - access:            0xc1000001  public 
 - name:              'nextBytes'
 - signature:         '([B)V'
 - max stack:         4
 - max locals:        6
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      19
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8110: 0xbb000000 i2c: 0x00007fd949106520 c2i: 0x00007fd949106638 c2iUV: 0x00007fd94910660b
 - compiled entry     0x00007fd94921d6a0
 - code size:         56
 - code start:        0x00007fd948945250
 - code end (excl):   0x00007fd948945288
 - method data:       0x00007fd948949400
 - checked ex length: 0
 - linenumber start:  0x00007fd948945288
 - localvar length:   6
 - localvar start:    0x00007fd948945296
 - compiled code: nmethod    558   49       3       java.util.Random::nextBytes (56 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N498: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B36 B2 <- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c   	movl    R14, [RSI]	# int
01f   	movl    R13, [RSI + #8 (8-bit)]	# int
023   	movq    RBP, [RSI + #40 (8-bit)]	# ptr
027   	movq    R10, [RSI + #32 (8-bit)]	# ptr
02b   	movq    [rsp + #0], R10	# spill
02f   	movl    R10, [RSI + #16 (8-bit)]	# int
033   	movl    [rsp + #16], R10	# spill
038   	movl    RBX, [RSI + #24 (8-bit)]	# int
03b   	movq    RDI, RSI	# spill
03e   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
04b   	testq   RBP, RBP	# ptr
04e   	je     B36  P=0.001000 C=-1.000000
04e
054   B2: #	B38 B3 <- B1  Freq: 0.999
054   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
058   	cmpl    R10, narrowklass: precise klass java/util/Random: 0x00007fd90004f4c8:Constant:exact *	# compressed klass ptr
05f   	jne,u  B38  P=0.000001 C=-1.000000
05f
065   B3: #	B4 <- B2  Freq: 0.998999
065   	movq    R9, RBP	# spill
068   	# checkcastPP of R9
068
068   B4: #	B37 B5 <- B3 B36  Freq: 0.999999
068   	movq    R11, [rsp + #0]	# spill
06c   	testq   R11, R11	# ptr
06f   	je     B37  P=0.001000 C=-1.000000
06f
075   B5: #	B39 B6 <- B4  Freq: 0.998999
075   	movl    R8, [R11 + #8 (8-bit)]	# compressed klass ptr
079   	cmpl    R8, narrowklass: precise klass [B: 0x00007fd95812f088:Constant:exact *	# compressed klass ptr
080   	jne,u  B39  P=0.000001 C=-1.000000
080
086   B6: #	B7 <- B5  Freq: 0.998998
086   	# checkcastPP of R11
086   	movq    RDX, R11	# spill
089   	addq    RDX, #12	# ptr
08d
08d   B7: #	B15 <- B6 B37  Freq: 0.999998
08d   	xorl    RSI, RSI	# int
08f   	movq    RBP, #25214903917	# long
099   	jmp,s   B15
099
09b   B8: #	B9 <- B26  top-of-loop Freq: 61007.8
09b   	incl    RBX	# int
09d
09d   B9: #	B10 <- B8 B24  top-of-loop Freq: 122016
09d   	movq    R11, RAX	# spill
09d
0a0   B10: #	B33 B11 <- B15 B9  Freq: 152520
0a0   	cmpl    RBX, [RSP + #16 (32-bit)]
0a4   	jge     B33  P=0.000000 C=8192.000000
0a4
0aa   B11: #	B40 B12 <- B10  Freq: 152520
0aa   	movl    R8, [R9 + #24 (8-bit)]	# compressed ptr ! Field: java/util/Random.seed
0ae   	NullCheck R9
0ae
0ae   B12: #	B41 B13 <- B11  Freq: 152520
0ae   	movq    RAX, [R8 + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
0b2   	NullCheck R8
0b2
0b2   B13: #	B34 B14 <- B12  Freq: 152519
0b2   	MEMBAR-acquire ! (empty encoding)
0b2   	MEMBAR-release ! (empty encoding)
0b2   	
0b2   	movq    RDI, RAX	# spill
0b5   	imulq   RDI, RBP	# long
0b9   	addq    RDI, #11	# long
0bd   	movq    R10, #281474976710655	# long
0c7   	andq    RDI, R10	# long
0ca   	cmpxchgq [R8 + #16 (8-bit)],RDI	# If rax == [R8 + #16 (8-bit)] then store RDI into [R8 + #16 (8-bit)]
	sete    R10
	movzbl  R10, R10
0d8   	
0d8   	MEMBAR-acquire ! (empty encoding)
0d8   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.Random::next @ bci:35  L[0]=_ L[1]=#32 L[2]=_ L[3]=_ L[4]=RDI L[5]=_ L[6]=R8 STK[0]=R10
        # java.util.Random::nextInt @ bci:3  L[0]=_
        # java.util.Random::nextBytes @ bci:11  L[0]=R9 L[1]=R11 L[2]=RBX L[3]=rsp + #16 L[4]=_ L[5]=_
        # OopMap{r11=Oop r8=NarrowOop r9=Oop rdx=Derived_oop_r11 off=216}
0de   	testl   R10, R10
0e1   	je     B34  P=0.000000 C=5375.000000
0e1
0e7   B14: #	B15 <- B35 B13  Freq: 152519
0e7   	movl    R14, [rsp + #16]	# spill
0ec   	subl    R14, RBX	# int
0ef   	shrq    RDI, #16
0f3   	cmpl    R14, #4
0f7   	movl    R10, #4	# int
0fd   	cmovlge R14, R10	# signed, int
101   	movl    R13, RDI	# l2i
101
104   B15: #	B10 B16 <- B7 B14 	Loop: B15-B14  Freq: 152520
104   	testl   R14, R14
107   	jle,s   B10  P=0.200000 C=40960.000000
107
109   B16: #	B17 <- B15  Freq: 122016
109   	movq    RAX, R11	# spill
10c   	movl    R10, RBX	# spill
10f   	addl    R10, R14	# int
112   	movsbl  RCX, R13	# i2b
116   	movl    R11, R14	# spill
119   	decl    R11	# int
11c   	cmpl    R11, R10
11f   	cmovlgt R11, R10	# min
123   	cmpl    R11, RSI
126   	cmovllt R11, RSI	# max
126
12a   B17: #	B28 B18 <- B16 B20 	Loop: B17-B20 inner pre of N561 Freq: 244032
12a   	testq   RAX, RAX	# ptr
12d   	je     B28  P=0.000001 C=-1.000000
12d
133   B18: #	B29 B19 <- B17  Freq: 244032
133   	movl    R8, [RDX]	# range
136   	movl    RDI, R14	# spill
139   	decl    RDI	# int
13b   	cmpl    RBX, R8	# unsigned
13e   	jnb,u  B29  P=0.000001 C=-1.000000
13e
144   B19: #	B21 B20 <- B18  Freq: 244032
144   	movslq  RCX, RBX	# i2l
147   	movb    [RAX + #16 + RCX], R13	# byte
14c   	sarl    R13, #8
150   	movsbl  RCX, R13	# i2b
154   	cmpl    RDI, R11
157   	jle,s   B21	# loop end  P=0.500000 C=40960.000000
157
159   B20: #	B17 <- B19  Freq: 122016
159   	movl    RBX, R10	# spill
15c   	incl    RBX	# int
15e   	subl    RBX, R14	# int
161   	movl    R14, RDI	# spill
164   	jmp,s   B17
164
166   B21: #	B32 B22 <- B19  Freq: 122016
166   	movl    R14, R10	# spill
169   	subl    R14, R8	# int
16c   	cmpl    R14, RSI
16f   	cmovllt R14, RSI	# max
173   	movl    R11, R14	# spill
176   	addl    R11, #3	# int
17a   	cmpl    R14, R11
17d   	movl    R14, #2147483647	# int
183   	cmovlg R11, R14	# signed, int
187   	cmpl    RDI, R11
18a   	jle     B32  P=0.000001 C=-1.000000
18a
190   B22: #	B22 B23 <- B21 B22 	Loop: B22-B22 inner main of N173 Freq: 610079
190   	movl    RBX, R10	# spill
193   	subl    RBX, RDI	# int
195   	movl    R14, R13	# spill
198   	sarl    R14, #8
19c   	movslq  RCX, RBX	# i2l
19f   	movb    [RAX + #16 + RCX], R13	# byte
1a4   	movl    R13, R14	# spill
1a7   	sarl    R13, #8
1ab   	movslq  RCX, RBX	# i2l
1ae   	movb    [RAX + #17 + RCX], R14	# byte
1b3   	movb    [RAX + #18 + RCX], R13	# byte
1b8   	sarl    R13, #8
1bc   	movb    [RAX + #19 + RCX], R13	# byte
1c1   	sarl    R13, #8
1c5   	addl    RDI, #-4	# int
1c8   	cmpl    RDI, R11
1cb   	jg,s   B22	# loop end  P=0.800000 C=40960.000000
1cb
1cd   B23: #	B24 <- B22  Freq: 122016
1cd   	addl    RBX, #4	# int
1d0   	movl    RCX, R13	# spill
1d0
1d3   B24: #	B9 B25 <- B32 B23  Freq: 122016
1d3   	testl   RDI, RDI
1d5   	jle     B9  P=0.500000 C=-1.000000
      	nop 	# 1 bytes pad for loops and calls

1dc   B25: #	B30 B26 <- B24 B27 	Loop: B25-B27 inner post of N561 Freq: 122016
1dc   	movl    RBX, R10	# spill
1df   	subl    RBX, RDI	# int
1e1   	decl    RDI	# int
1e3   	cmpl    RBX, R8	# unsigned
1e6   	jnb,us  B30  P=0.000001 C=-1.000000
1e6
1e8   B26: #	B8 B27 <- B25  Freq: 122016
1e8   	movslq  R11, RBX	# i2l
1eb   	movb    [RAX + #16 + R11], R13	# byte
1f0   	testl   RDI, RDI
1f2   	jle     B8	# loop end  P=0.500000 C=40960.000000
1f2
1f8   B27: #	B25 <- B26  Freq: 61007.8
1f8   	sarl    R13, #8
1fc   	movsbl  RCX, R13	# i2b
200   	jmp,s   B25
200
202   B28: #	N498 <- B17  Freq: 0.247273
202   	movl    RSI, #-10	# int
207   	movl    RBP, RBX	# spill
209   	movl    [rsp + #0], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
20f   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.util.Random::nextBytes @ bci:41  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0
        # OopMap{off=532}
214   	int3	# ShouldNotReachHere
214
219   B29: #	B31 <- B18  Freq: 0.247272
219   	movl    RBP, RBX	# spill
21b   	incl    RBP	# int
21d   	jmp,s   B31
21d
21f   B30: #	B31 <- B25  Freq: 0.123636
21f   	movl    RBP, RBX	# spill
221   	incl    RBP	# int
223
223   B31: #	N498 <- B30 B29  Freq: 0.370908
223   	movl    RSI, #-28	# int
228   	movq    [rsp + #0], R9	# spill
22c   	movl    [rsp + #20], R13	# spill
231   	movl    [rsp + #24], RDI	# spill
235   	movq    [rsp + #32], RAX	# spill
23a   	movl    [rsp + #28], RBX	# spill
23e   	movl    [rsp + #40], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
243   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.util.Random::nextBytes @ bci:41  L[0]=rsp + #0 L[1]=rsp + #32 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #20 L[5]=rsp + #24 STK[0]=rsp + #32 STK[1]=rsp + #28 STK[2]=rsp + #40
        # OopMap{[0]=Oop [32]=Oop off=584}
248   	int3	# ShouldNotReachHere
248
24d   B32: #	B24 <- B21  Freq: 0.123636
24d   	incl    RBX	# int
24f   	jmp     B24
24f
254   B33: #	N498 <- B10  Freq: 0.0727271
254   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

25f   	ret
25f
260   B34: #	B34 B35 <- B13 B34 	Loop: B34-B34 inner  Freq: 0.072727
260   	movq    RAX, [R8 + #16 (8-bit)]	# long ! Field: volatile java/util/concurrent/atomic/AtomicLong.value
264   	MEMBAR-acquire ! (empty encoding)
264   	MEMBAR-release ! (empty encoding)
264   	
264   	movq    RDI, RAX	# spill
267   	imulq   RDI, RBP	# long
26b   	addq    RDI, #11	# long
26f   	movq    R10, #281474976710655	# long
279   	andq    RDI, R10	# long
27c   	cmpxchgq [R8 + #16 (8-bit)],RDI	# If rax == [R8 + #16 (8-bit)] then store RDI into [R8 + #16 (8-bit)]
	sete    RCX
	movzbl  RCX, RCX
288   	
288   	MEMBAR-acquire ! (empty encoding)
288   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.util.Random::next @ bci:35  L[0]=_ L[1]=#32 L[2]=_ L[3]=_ L[4]=RDI L[5]=_ L[6]=R8 STK[0]=RCX
        # java.util.Random::nextInt @ bci:3  L[0]=_
        # java.util.Random::nextBytes @ bci:11  L[0]=R9 L[1]=R11 L[2]=RBX L[3]=rsp + #16 L[4]=_ L[5]=_
        # OopMap{r11=Oop r8=NarrowOop r9=Oop rdx=Derived_oop_r11 off=648}
28e   	testl   RCX, RCX
290   	je,s   B34  P=0.000000 C=5375.000000
290
292   B35: #	B14 <- B34  Freq: 0.0727269
292   	jmp     B14
292
297   B36: #	B4 <- B1  Freq: 0.000999987
297   	xorl    R9, R9	# ptr
29a   	jmp     B4
29a
29f   B37: #	B7 <- B4  Freq: 0.000999986
29f   	movl    RDX, NULL+12	# ptr (positive 32-bit)
2a4   	xorl    R11, R11	# ptr
2a7   	jmp     B7
2a7
2ac   B38: #	B39 <- B2  Freq: 9.99e-07
2ac   	movq    R11, [rsp + #0]	# spill
2ac
2b0   B39: #	N498 <- B38 B5  Freq: 1.998e-06
2b0   	movl    RSI, #-99	# int
2b5   	movq    [rsp + #0], R11	# spill
2b9   	movl    [rsp + #8], RBX	# spill
2bd   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
2cf   	movl    [rsp + #16], R13	# spill
2d4   	movl    [rsp + #20], R14	# spill
      	nop 	# 2 bytes pad for loops and calls
2db   	call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret')
        # java.util.Random::nextBytes @ bci:25  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=rsp + #16 L[5]=rsp + #20
        # OopMap{rbp=Oop [0]=Oop off=736}
2e0   	int3	# ShouldNotReachHere
2e0
2e5   B40: #	N498 <- B11  Freq: 0.154545
2e5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2eb   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.util.Random::nextBytes @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=752}
2f0   	int3	# ShouldNotReachHere
2f0
2f5   B41: #	N498 <- B12  Freq: 0.154545
2f5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
2fb   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.util.Random::next @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # java.util.Random::nextInt @ bci:3  L[0]=_
        # java.util.Random::nextBytes @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # OopMap{off=768}
300   	int3	# ShouldNotReachHere
300

    561   48 %     3       java.util.Random::nextBytes @ -2 (56 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd9625234e0 unextended sp=0x00007fd9625234e0, fp=0x00007fd9625235c0, real_fp=0x00007fd962523570, pc=0x00007fd94921bd5c)
     nmethod    561   48 %     3       java.util.Random::nextBytes @ -2 (56 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd9625234e0, unextended_sp=0x00007fd9625234e0, fp=0x00007fd9625235c0, pc=0x00007fd94921bd5c)
java.util.Random.nextBytes(Random.java:231) - goto @ bci 49 
     Created vframeArray 0x00007fd9581b78c8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581b78c8 mode 0
     {method} {0x00007fd9489452e0} 'nextBytes' '([B)V' in 'java/util/Random' - goto @ bci 49 sp = 0x00007fd962523500
    593   51    b  3       java.util.concurrent.ConcurrentHashMap::spread (10 bytes)
    609   52    b  3       java.nio.HeapByteBuffer::_get (7 bytes)
    611   53    b  3       java.nio.HeapByteBuffer::ix (7 bytes)
    612   54    b  1       java.nio.HeapByteBuffer::_get (7 bytes)
    613   52       3       java.nio.HeapByteBuffer::_get (7 bytes)   made not entrant
    613   55    b  3       java.nio.Buffer::checkIndex (22 bytes)
                              @ 16  java/lang/IndexOutOfBoundsException::<init> (not loaded)   not inlineable
    615   56    b  3       java.nio.HeapByteBuffer::get (15 bytes)
                              @ 7   java.nio.Buffer::checkIndex (22 bytes)   intrinsic
                              @ 10   java.nio.HeapByteBuffer::ix (7 bytes)
    617   57    b  3       java.nio.Buffer::checkIndex (24 bytes)
                              @ 18  java/lang/IndexOutOfBoundsException::<init> (not loaded)   not inlineable
    619   58    b  3       java.nio.HeapByteBuffer::getInt (19 bytes)
                              @ 5   java.nio.Buffer::checkIndex (24 bytes)
                                @ 18  java/lang/IndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 8   java.nio.HeapByteBuffer::ix (7 bytes)
                              @ 15   java.nio.Bits::getInt (18 bytes)
                                @ 6   java.nio.Bits::getIntB (30 bytes)
                                  @ 2   java.nio.HeapByteBuffer::_get (7 bytes)
                                  @ 9   java.nio.HeapByteBuffer::_get (7 bytes)
                                  @ 16   java.nio.HeapByteBuffer::_get (7 bytes)
                                  @ 23   java.nio.HeapByteBuffer::_get (7 bytes)
                                  @ 26   java.nio.Bits::makeInt (29 bytes)   callee is too large
                                @ 14   java.nio.Bits::getIntL (30 bytes)
                                  @ 4   java.nio.HeapByteBuffer::_get (7 bytes)
                                  @ 11   java.nio.HeapByteBuffer::_get (7 bytes)
                                  @ 18   java.nio.HeapByteBuffer::_get (7 bytes)
                                  @ 23   java.nio.HeapByteBuffer::_get (7 bytes)
                                  @ 26   java.nio.Bits::makeInt (29 bytes)   callee is too large
    628   59    b  3       java.nio.HeapByteBuffer::getLong (20 bytes)
                              @ 6   java.nio.Buffer::checkIndex (24 bytes)
                                @ 18  java/lang/IndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 9   java.nio.HeapByteBuffer::ix (7 bytes)
                              @ 16   java.nio.Bits::getLong (18 bytes)
                                @ 6   java.nio.Bits::getLongB (60 bytes)   callee is too large
                                @ 14   java.nio.Bits::getLongL (60 bytes)   callee is too large
    630   60    b  3       java.nio.Bits::makeLong (77 bytes)
    633   61    b  3       java.nio.Bits::makeInt (29 bytes)
    634   62    b  3       java.nio.Bits::getLongB (60 bytes)
                              @ 2   java.nio.ByteBuffer::_get (0 bytes)   no static binding
                              @ 9   java.nio.ByteBuffer::_get (0 bytes)   no static binding
                              @ 16   java.nio.ByteBuffer::_get (0 bytes)   no static binding
                              @ 23   java.nio.ByteBuffer::_get (0 bytes)   no static binding
                              @ 30   java.nio.ByteBuffer::_get (0 bytes)   no static binding
                              @ 37   java.nio.ByteBuffer::_get (0 bytes)   no static binding
                              @ 45   java.nio.ByteBuffer::_get (0 bytes)   no static binding
                              @ 53   java.nio.ByteBuffer::_get (0 bytes)   no static binding
                              @ 56   java.nio.Bits::makeLong (77 bytes)   callee is too large
    638   63    b  4       java.nio.Bits::makeInt (29 bytes)
{method}
 - this oop:          0x00007fd9487871e8
 - method holder:     'java/nio/Bits'
 - constants:         0x00007fd948784020 constant pool [576] {0x00007fd948784020} for 'java/nio/Bits' cache=0x00007fd94878b6b8
 - access:            0x8100000a  private static 
 - name:              'makeInt'
 - signature:         '(BBBB)I'
 - max stack:         4
 - max locals:        4
 - size of params:    4
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580fb9d0: 0xaaaa0000 i2c: 0x00007fd94912e460 c2i: 0x00007fd94912e5a3 c2iUV: 0x00007fd94912e576
 - compiled entry     0x00007fd94921e260
 - code size:         29
 - code start:        0x00007fd948787190
 - code end (excl):   0x00007fd9487871ad
 - method data:       0x00007fd94894af08
 - checked ex length: 0
 - linenumber start:  0x00007fd9487871ad
 - localvar length:   4
 - localvar start:    0x00007fd9487871b6
 - compiled code: nmethod    640   61       3       java.nio.Bits::makeInt (29 bytes)
#
#  int ( byte, byte, byte, byte )
#
#r018 rsi   : parm 0: byte
#r016 rdx   : parm 1: byte
#r010 rcx   : parm 2: byte
#r004 r8   : parm 3: byte
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 <- B1  Freq: 1
abababab
000   B1: #	N1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	subq    rsp, #24	# Create frame
	movq    [rsp + #16], rbp	# Save rbp

00c   	sall    RSI, #24
00f   	movzbl  R8, R8	# int & 0xFF
013   	movzbl  RCX, RCX	# int & 0xFF
016   	movzbl  RDX, RDX	# int & 0xFF
019   	sall    RCX, #8
01c   	sall    RDX, #16
01f   	orl     RSI, RDX	# int
021   	orl     RSI, RCX	# int
023   	movl    RAX, RSI	# spill
025   	orl     RAX, R8	# int
028   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

033   	ret
033

    641   61       3       java.nio.Bits::makeInt (29 bytes)   made not entrant
    641   64    b  4       java.nio.Bits::makeLong (77 bytes)
{method}
 - this oop:          0x00007fd948788008
 - method holder:     'java/nio/Bits'
 - constants:         0x00007fd948784020 constant pool [576] {0x00007fd948784020} for 'java/nio/Bits' cache=0x00007fd94878b6b8
 - access:            0x8100000a  private static 
 - name:              'makeLong'
 - signature:         '(BBBBBBBB)J'
 - max stack:         7
 - max locals:        8
 - size of params:    8
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580fb978: 0xaaaaaaaa i2c: 0x00007fd94912e120 c2i: 0x00007fd94912e280 c2iUV: 0x00007fd94912e253
 - compiled entry     0x00007fd94921e620
 - code size:         77
 - code start:        0x00007fd948787f50
 - code end (excl):   0x00007fd948787f9d
 - method data:       0x00007fd94894b828
 - checked ex length: 0
 - linenumber start:  0x00007fd948787f9d
 - localvar length:   8
 - localvar start:    0x00007fd948787fa6
 - compiled code: nmethod    642   60       3       java.nio.Bits::makeLong (77 bytes)
#
#  long/half ( byte, byte, byte, byte, byte, byte, byte, byte )
#
#r018 rsi   : parm 0: byte
#r016 rdx   : parm 1: byte
#r010 rcx   : parm 2: byte
#r004 r8   : parm 3: byte
#r006 r9   : parm 4: byte
#r014 rdi   : parm 5: byte
#r195 rsp+44: pad0, owned by CALLER
#r194 rsp+40: parm 7: byte
#r193 rsp+36: HOLE, owned by SELF
#r192 rsp+32: parm 6: byte
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 <- B1  Freq: 1
abababab
000   B1: #	N1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	subq    rsp, #24	# Create frame
	movq    [rsp + #16], rbp	# Save rbp

00c   	movslq  RAX, RSI	# i2l
00f   	movzbq  R10, [RSP + #40 (32-bit)]	# int & 0xFF -> long
015   	salq    RAX, #56
019   	movzbq  R11, [RSP + #32 (32-bit)]	# int & 0xFF -> long
01f   	movzbl  RBX, RDI	# int & 0xFF -> long
023   	salq    R11, #8
027   	salq    RBX, #16
02b   	movzbl  R9, R9	# int & 0xFF -> long
02f   	movzbl  R8, R8	# int & 0xFF -> long
033   	salq    R9, #24
037   	salq    R8, #32
03b   	movzbl  RCX, RCX	# int & 0xFF -> long
03e   	movzbl  RDI, RDX	# int & 0xFF -> long
041   	salq    RCX, #40
045   	salq    RDI, #48
049   	orq     RAX, RDI	# long
04c   	orq     RAX, RCX	# long
04f   	orq     RAX, R8	# long
052   	orq     RAX, R9	# long
055   	orq     RAX, RBX	# long
058   	orq     RAX, R11	# long
05b   	orq     RAX, R10	# long
05e   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

069   	ret
069

    644   60       3       java.nio.Bits::makeLong (77 bytes)   made not entrant
    645   65    b  4       java.nio.HeapByteBuffer::get (15 bytes)
                              @ 7   java.nio.Buffer::checkIndex (22 bytes)   inline (hot)
                              @ 10   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
{method}
 - this oop:          0x00007fd948781498
 - method holder:     'java/nio/HeapByteBuffer'
 - constants:         0x00007fd9487802d8 constant pool [286] {0x00007fd9487802d8} for 'java/nio/HeapByteBuffer' cache=0x00007fd948783668
 - access:            0x81000001  public 
 - name:              'get'
 - signature:         '(I)B'
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      10
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd94921f020
 - code size:         15
 - code start:        0x00007fd948781468
 - code end (excl):   0x00007fd948781477
 - method data:       0x00007fd94894a918
 - checked ex length: 0
 - linenumber start:  0x00007fd948781477
 - localvar length:   2
 - localvar start:    0x00007fd94878147e
 - compiled code: nmethod    647   56       3       java.nio.HeapByteBuffer::get (15 bytes)
#
#  byte ( java/nio/HeapByteBuffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/HeapByteBuffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N76: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B6 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    R11, [RSI + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
030   	testl   RDX, RDX
032   	jl,s   B6  P=0.000001 C=-1.000000
032
034   B2: #	B6 B3 <- B1  Freq: 0.999999
034   	movl    R8, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
038   	cmpl    RDX, R8
03b   	jge,s   B6  P=0.000001 C=-1.000000
03b
03d   B3: #	B8 B4 <- B2  Freq: 0.999998
03d   	addl    RDX, [RSI + #36 (8-bit)]	# int
040   	movl    R10, [R11 + #12 (8-bit)]	# range
044   	NullCheck R11
044
044   B4: #	B7 B5 <- B3  Freq: 0.999997
044   	cmpl    RDX, R10	# unsigned
047   	jnb,us  B7  P=0.000001 C=-1.000000
047
049   B5: #	N76 <- B4  Freq: 0.999996
049   	movslq  R10, RDX	# i2l
04c   	movsbl  RAX, [R11 + #16 + R10]	# byte
052   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

05d   	ret
05d
05e   B6: #	N76 <- B2 B1  Freq: 2.01328e-06
05e   	movl    RBP, R11	# spill
061   	movq    [rsp + #0], RSI	# spill
065   	movl    RSI, #26	# int
      	nop 	# 1 bytes pad for loops and calls
06b   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:12  L[0]=_ L[1]=_
        # java.nio.HeapByteBuffer::get @ bci:7  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop [0]=Oop off=112}
070   	int3	# ShouldNotReachHere
070
075   B7: #	N76 <- B4  Freq: 1.01328e-06
075   	movl    RSI, #-28	# int
07a   	movl    RBP, R11	# spill
07d   	movl    [rsp + #0], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
083   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop off=136}
088   	int3	# ShouldNotReachHere
088
08d   B8: #	N76 <- B3  Freq: 1.01328e-06
08d   	movl    RSI, #-10	# int
092   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
097   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=156}
09c   	int3	# ShouldNotReachHere
09c

    649   56       3       java.nio.HeapByteBuffer::get (15 bytes)   made not entrant
    651   66    b  4       java.nio.HeapByteBuffer::getInt (19 bytes)
                              @ 5   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                              @ 8   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                              @ 15   java.nio.Bits::getInt (18 bytes)   inline (hot)
                                @ 6   java.nio.Bits::getIntB (30 bytes)   inline (hot)
                                  @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 26   java.nio.Bits::makeInt (29 bytes)   inline (hot)
                                @ 14   java.nio.Bits::getIntL (30 bytes)   never executed
{method}
 - this oop:          0x00007fd948782728
 - method holder:     'java/nio/HeapByteBuffer'
 - constants:         0x00007fd9487802d8 constant pool [286] {0x00007fd9487802d8} for 'java/nio/HeapByteBuffer' cache=0x00007fd948783668
 - access:            0x81000001  public 
 - name:              'getInt'
 - signature:         '(I)I'
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      29
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd949221680
 - code size:         19
 - code start:        0x00007fd9487826f0
 - code end (excl):   0x00007fd948782703
 - method data:       0x00007fd94894ab40
 - checked ex length: 0
 - linenumber start:  0x00007fd948782703
 - localvar length:   2
 - localvar start:    0x00007fd94878270e
 - compiled code: nmethod    657   58       3       java.nio.HeapByteBuffer::getInt (19 bytes)
#
#  int ( java/nio/HeapByteBuffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/HeapByteBuffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N155: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B11 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	testl   RDX, RDX
02e   	jl     B11  P=0.000000 C=10656.000000
02e
034   B2: #	B11 B3 <- B1  Freq: 1
034   	movl    R10, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
038   	subl    R10, RDX	# int
03b   	cmpl    R10, #4
03f   	jl     B11  P=0.000000 C=10656.000000
03f
045   B3: #	B12 B4 <- B2  Freq: 0.999999
045   	addl    RDX, [RSI + #36 (8-bit)]	# int
048   	movzbl  R10, [RSI + #41 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.bigEndian
04d   	testl   R10, R10
050   	je     B12  P=0.000000 C=5375.000000
050
056   B4: #	B14 B5 <- B3  Freq: 0.999999
056   	movl    R9, [RSI + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
05a   	movl    R10, [R9 + #12 (8-bit)]	# range
05e   	NullCheck R9
05e
05e   B5: #	B9 B6 <- B4  Freq: 0.999998
05e   	cmpl    RDX, R10	# unsigned
061   	jnb,us  B9  P=0.000001 C=-1.000000
061
063   B6: #	B10 B7 <- B5  Freq: 0.999997
063   	movl    R11, RDX	# spill
066   	addl    R11, #3	# int
06a   	movslq  R8, RDX	# i2l
06d   	movsbl  RAX, [R9 + #16 + R8]	# byte
073   	cmpl    R11, R10	# unsigned
076   	jnb,us  B10  P=0.000001 C=-1.000000
076
078   B7: #	B8 <- B6  Freq: 0.999996
078   	sall    RAX, #24
07b   	movslq  R10, RDX	# i2l
07e   	movzbl  R8, [R9 + #17 + R10]	# ubyte
084   	movzbl  R11, [R9 + #19 + R10]	# ubyte
08a   	movzbl  R9, [R9 + #18 + R10]	# ubyte
090   	sall    R8, #16
094   	orl     RAX, R8	# int
097   	sall    R9, #8
09b   	orl     RAX, R9	# int
09e   	orl     RAX, R11	# int
0a1
0a1   B8: #	N155 <- B13 B7  Freq: 0.999996
0a1   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0ac   	ret
0ac
0ad   B9: #	N155 <- B5  Freq: 1.01328e-06
0ad   	movq    RBP, RSI	# spill
0b0   	movl    [rsp + #4], RDX	# spill
0b4   	movl    [rsp + #8], R9	# spill
0b9   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
0bf   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #4
        # java.nio.Bits::getIntB @ bci:2  L[0]=RBP L[1]=rsp + #4
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [8]=NarrowOop off=196}
0c4   	int3	# ShouldNotReachHere
0c4
0c9   B10: #	N155 <- B6  Freq: 1.01328e-06
0c9   	movl    RBP, RDX	# spill
0cb   	incl    RBP	# int
0cd   	movq    [rsp + #0], RSI	# spill
0d1   	movl    [rsp + #8], RDX	# spill
0d5   	movl    [rsp + #12], RAX	# spill
0d9   	movl    [rsp + #16], R9	# spill
0de   	movl    RSI, #-28	# int
0e3   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=RBP
        # java.nio.Bits::getIntB @ bci:9  L[0]=rsp + #0 L[1]=rsp + #8 STK[0]=rsp + #12
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # OopMap{[0]=Oop [16]=NarrowOop off=232}
0e8   	int3	# ShouldNotReachHere
0e8
0ed   B11: #	N155 <- B2 B1  Freq: 9.76837e-07
0ed   	movq    [rsp + #0], RSI	# spill
0f1   	movq    [rsp + #8], RSI	# spill
0f6   	movl    RSI, #26	# int
0fb   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:5  L[0]=rsp + #0 L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop off=256}
100   	int3	# ShouldNotReachHere
100
105   B12: #	B15 B13 <- B3  Freq: 4.76837e-07
      	nop 	# 2 bytes pad for loops and calls
107   	call,static  java.nio.Bits::getIntL
        # java.nio.Bits::getInt @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # OopMap{off=268}
10c
10c   B13: #	B8 <- B12  Freq: 4.76827e-07
        # Block is sole successor of call
10c   	jmp,s   B8
10c
10e   B14: #	N155 <- B4  Freq: 1.01328e-06
10e   	movl    RSI, #-10	# int
113   	movl    RBP, RDX	# spill
      	nop 	# 2 bytes pad for loops and calls
117   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # java.nio.Bits::getIntB @ bci:2  L[0]=_ L[1]=_
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # OopMap{off=284}
11c   	int3	# ShouldNotReachHere
11c
121   B15: #	N155 <- B12  Freq: 4.76837e-12
121   	# exception oop is in rax; no code emitted
121   	movq    RSI, RAX	# spill
124   	addq    rsp, 48	# Destroy frame
	popq   rbp

129   	jmp     rethrow_stub
129

    661   58       3       java.nio.HeapByteBuffer::getInt (19 bytes)   made not entrant
    661   67    b  4       java.nio.Bits::getLongB (60 bytes)
                              @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                               \-> TypeProfile (5119/5119 counts) = java/nio/HeapByteBuffer
                              @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                              @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                              @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                              @ 30   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                              @ 37   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                              @ 45   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                              @ 53   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                              @ 56   java.nio.Bits::makeLong (77 bytes)   inline (hot)
{method}
 - this oop:          0x00007fd9487882e8
 - method holder:     'java/nio/Bits'
 - constants:         0x00007fd948784020 constant pool [576] {0x00007fd948784020} for 'java/nio/Bits' cache=0x00007fd94878b6b8
 - access:            0x81000008  static 
 - name:              'getLongB'
 - signature:         '(Ljava/nio/ByteBuffer;I)J'
 - max stack:         11
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd949223900
 - code size:         60
 - code start:        0x00007fd948788280
 - code end (excl):   0x00007fd9487882bc
 - method data:       0x00007fd94894b398
 - checked ex length: 0
 - linenumber start:  0x00007fd9487882bc
 - localvar length:   2
 - localvar start:    0x00007fd9487882ce
 - compiled code: nmethod    669   62       3       java.nio.Bits::getLongB (60 bytes)
#
#  long/half ( java/nio/ByteBuffer *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/ByteBuffer *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 <- B10 B9 B11 B7 B8 B6  Freq: 1
abababab
000   B1: #	B10 B2 <- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c   	movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
010   	NullCheck RSI
010
010   B2: #	B9 B3 <- B1  Freq: 0.999999
010   	cmpl    R10, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd908002058:Constant:exact *	# compressed klass ptr
017   	jne,u  B9  P=0.000001 C=-1.000000
017
01d   B3: #	B11 B4 <- B2  Freq: 0.999998
01d   	# checkcastPP of RSI
01d   	movl    RDI, [RSI + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
020   	movl    R10, [RDI + #12 (8-bit)]	# range
024   	NullCheck RDI
024
024   B4: #	B7 B5 <- B3  Freq: 0.999997
024   	cmpl    RDX, R10	# unsigned
027   	jnb,u  B7  P=0.000001 C=-1.000000
027
02d   B5: #	B8 B6 <- B4  Freq: 0.999996
02d   	movl    R11, RDX	# spill
030   	addl    R11, #7	# int
034   	movslq  R8, RDX	# i2l
037   	movsbl  R9, [RDI + #16 + R8]	# byte
03d   	cmpl    R11, R10	# unsigned
040   	jnb,u  B8  P=0.000001 C=-1.000000
040
046   B6: #	N1 <- B5  Freq: 0.999995
046   	movslq  RAX, R9	# i2l
049   	movslq  RBX, RDX	# i2l
04c   	movsbl  R10, [RDI + #17 + RBX]	# byte
052   	movzbq  RDX, [RDI + #23 + RBX]	# ubyte -> long
058   	movsbl  R8, [RDI + #18 + RBX]	# byte
05e   	movsbl  R11, [RDI + #22 + RBX]	# byte
064   	movsbl  RCX, [RDI + #19 + RBX]	# byte
069   	movsbl  R9, [RDI + #20 + RBX]	# byte
06f   	movsbl  RDI, [RDI + #21 + RBX]	# byte
074   	salq    RAX, #56
078   	movzbl  RBX, RDI	# int & 0xFF -> long
07c   	movzbl  R9, R9	# int & 0xFF -> long
080   	salq    RBX, #16
084   	salq    R9, #24
088   	movzbl  RCX, RCX	# int & 0xFF -> long
08b   	movzbl  R11, R11	# int & 0xFF -> long
08f   	salq    RCX, #32
093   	salq    R11, #8
097   	movzbl  R8, R8	# int & 0xFF -> long
09b   	movzbl  R10, R10	# int & 0xFF -> long
09f   	salq    R8, #40
0a3   	salq    R10, #48
0a7   	orq     RAX, R10	# long
0aa   	orq     RAX, R8	# long
0ad   	orq     RAX, RCX	# long
0b0   	orq     RAX, R9	# long
0b3   	orq     RAX, RBX	# long
0b6   	orq     RAX, R11	# long
0b9   	orq     RAX, RDX	# long
0bc   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0c7   	ret
0c7
0c8   B7: #	N1 <- B4  Freq: 1.01328e-06
0c8   	movq    RBP, RSI	# spill
0cb   	movl    [rsp + #4], RDX	# spill
0cf   	movl    [rsp + #8], RDI	# spill
0d3   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
0db   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #4
        # java.nio.Bits::getLongB @ bci:2  L[0]=RBP L[1]=rsp + #4
        # OopMap{rbp=Oop [8]=NarrowOop off=224}
0e0   	int3	# ShouldNotReachHere
0e0
0e5   B8: #	N1 <- B5  Freq: 1.01327e-06
0e5   	movl    RBP, RDX	# spill
0e7   	incl    RBP	# int
0e9   	movq    [rsp + #0], RSI	# spill
0ed   	movl    [rsp + #8], RDX	# spill
0f1   	movl    [rsp + #12], R9	# spill
0f6   	movl    [rsp + #16], RDI	# spill
0fa   	movl    RSI, #-28	# int
0ff   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=RBP
        # java.nio.Bits::getLongB @ bci:9  L[0]=rsp + #0 L[1]=rsp + #8 STK[0]=rsp + #12
        # OopMap{[0]=Oop [16]=NarrowOop off=260}
104   	int3	# ShouldNotReachHere
104
109   B9: #	N1 <- B2  Freq: 9.99999e-07
109   	movq    [rsp + #8], RSI	# spill
10e   	movl    [rsp + #4], RDX	# spill
112   	movl    RSI, #-34	# int
117   	call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile')
        # java.nio.Bits::getLongB @ bci:2  L[0]=rsp + #8 L[1]=rsp + #4 STK[0]=rsp + #8 STK[1]=rsp + #4
        # OopMap{[8]=Oop off=284}
11c   	int3	# ShouldNotReachHere
11c
121   B10: #	N1 <- B1  Freq: 1.01328e-06
121   	movl    RSI, #-10	# int
126   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
12b   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.Bits::getLongB @ bci:2  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=304}
130   	int3	# ShouldNotReachHere
130
135   B11: #	N1 <- B3  Freq: 1.01328e-06
135   	movl    RSI, #-10	# int
13a   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
13f   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # java.nio.Bits::getLongB @ bci:2  L[0]=_ L[1]=_
        # OopMap{off=324}
144   	int3	# ShouldNotReachHere
144

    672   62       3       java.nio.Bits::getLongB (60 bytes)   made not entrant
    673   68    b  4       java.nio.HeapByteBuffer::getLong (20 bytes)
                              @ 6   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                              @ 9   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                              @ 16   java.nio.Bits::getLong (18 bytes)   inline (hot)
                                @ 6   java.nio.Bits::getLongB (60 bytes)   inline (hot)
                                  @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 30   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 37   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 45   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 53   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                  @ 56   java.nio.Bits::makeLong (77 bytes)   inline (hot)
                                @ 14   java.nio.Bits::getLongL (60 bytes)   too big
{method}
 - this oop:          0x00007fd948782b40
 - method holder:     'java/nio/HeapByteBuffer'
 - constants:         0x00007fd9487802d8 constant pool [286] {0x00007fd9487802d8} for 'java/nio/HeapByteBuffer' cache=0x00007fd948783668
 - access:            0x81000001  public 
 - name:              'getLong'
 - signature:         '(I)J'
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      32
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd949222fa0
 - code size:         20
 - code start:        0x00007fd948782b08
 - code end (excl):   0x00007fd948782b1c
 - method data:       0x00007fd94894b158
 - checked ex length: 0
 - linenumber start:  0x00007fd948782b1c
 - localvar length:   2
 - localvar start:    0x00007fd948782b26
 - compiled code: nmethod    681   59       3       java.nio.HeapByteBuffer::getLong (20 bytes)
#
#  long/half ( java/nio/HeapByteBuffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/HeapByteBuffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N180: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B11 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	testl   RDX, RDX
02e   	jl     B11  P=0.000000 C=10751.000000
02e
034   B2: #	B11 B3 <- B1  Freq: 1
034   	movl    R11, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
038   	subl    R11, RDX	# int
03b   	cmpl    R11, #8
03f   	jl     B11  P=0.000000 C=10751.000000
03f
045   B3: #	B12 B4 <- B2  Freq: 0.999999
045   	addl    RDX, [RSI + #36 (8-bit)]	# int
048   	movzbl  R11, [RSI + #41 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.bigEndian
04d   	testl   R11, R11
050   	je     B12  P=0.000000 C=5375.000000
050
056   B4: #	B14 B5 <- B3  Freq: 0.999999
056   	movl    RCX, [RSI + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
059   	movl    R11, [RCX + #12 (8-bit)]	# range
05d   	NullCheck RCX
05d
05d   B5: #	B9 B6 <- B4  Freq: 0.999998
05d   	cmpl    RDX, R11	# unsigned
060   	jnb,u  B9  P=0.000001 C=-1.000000
060
066   B6: #	B10 B7 <- B5  Freq: 0.999997
066   	movl    R8, RDX	# spill
069   	addl    R8, #7	# int
06d   	movslq  R10, RDX	# i2l
070   	movsbl  R9, [RCX + #16 + R10]	# byte
076   	cmpl    R8, R11	# unsigned
079   	jnb,u  B10  P=0.000001 C=-1.000000
079
07f   B7: #	B8 <- B6  Freq: 0.999996
07f   	movslq  RAX, R9	# i2l
082   	movslq  RDI, RDX	# i2l
085   	movsbl  R10, [RCX + #17 + RDI]	# byte
08b   	movzbq  RDX, [RCX + #23 + RDI]	# ubyte -> long
091   	movsbl  R11, [RCX + #18 + RDI]	# byte
097   	movsbl  R9, [RCX + #22 + RDI]	# byte
09d   	movsbl  R8, [RCX + #19 + RDI]	# byte
0a3   	movsbl  RBX, [RCX + #20 + RDI]	# byte
0a8   	movsbl  RCX, [RCX + #21 + RDI]	# byte
0ad   	salq    RAX, #56
0b1   	movzbl  RCX, RCX	# int & 0xFF -> long
0b4   	movzbl  RBX, RBX	# int & 0xFF -> long
0b7   	salq    RCX, #16
0bb   	salq    RBX, #24
0bf   	movzbl  R8, R8	# int & 0xFF -> long
0c3   	movzbl  R9, R9	# int & 0xFF -> long
0c7   	salq    R8, #32
0cb   	salq    R9, #8
0cf   	movzbl  R11, R11	# int & 0xFF -> long
0d3   	movzbl  R10, R10	# int & 0xFF -> long
0d7   	salq    R11, #40
0db   	salq    R10, #48
0df   	orq     RAX, R10	# long
0e2   	orq     RAX, R11	# long
0e5   	orq     RAX, R8	# long
0e8   	orq     RAX, RBX	# long
0eb   	orq     RAX, RCX	# long
0ee   	orq     RAX, R9	# long
0f1   	orq     RAX, RDX	# long
0f4
0f4   B8: #	N180 <- B13 B7  Freq: 0.999996
0f4   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0ff   	ret
0ff
100   B9: #	N180 <- B5  Freq: 1.01328e-06
100   	movq    RBP, RSI	# spill
103   	movl    [rsp + #4], RDX	# spill
107   	movl    [rsp + #8], RCX	# spill
10b   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
113   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #4
        # java.nio.Bits::getLongB @ bci:2  L[0]=RBP L[1]=rsp + #4
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # OopMap{rbp=Oop [8]=NarrowOop off=280}
118   	int3	# ShouldNotReachHere
118
11d   B10: #	N180 <- B6  Freq: 1.01328e-06
11d   	movl    RBP, RDX	# spill
11f   	incl    RBP	# int
121   	movq    [rsp + #0], RSI	# spill
125   	movl    [rsp + #8], RDX	# spill
129   	movl    [rsp + #12], R9	# spill
12e   	movl    [rsp + #16], RCX	# spill
132   	movl    RSI, #-28	# int
137   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=RBP
        # java.nio.Bits::getLongB @ bci:9  L[0]=rsp + #0 L[1]=rsp + #8 STK[0]=rsp + #12
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # OopMap{[0]=Oop [16]=NarrowOop off=316}
13c   	int3	# ShouldNotReachHere
13c
141   B11: #	N180 <- B2 B1  Freq: 9.76837e-07
141   	movq    [rsp + #0], RSI	# spill
145   	movq    [rsp + #8], RSI	# spill
14a   	movl    RSI, #26	# int
14f   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:6  L[0]=rsp + #0 L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #0
        # OopMap{[0]=Oop [8]=Oop off=340}
154   	int3	# ShouldNotReachHere
154
159   B12: #	B15 B13 <- B3  Freq: 4.76837e-07
      	nop 	# 2 bytes pad for loops and calls
15b   	call,static  java.nio.Bits::getLongL
        # java.nio.Bits::getLong @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # OopMap{off=352}
160
160   B13: #	B8 <- B12  Freq: 4.76827e-07
        # Block is sole successor of call
160   	jmp,s   B8
160
162   B14: #	N180 <- B4  Freq: 1.01328e-06
162   	movl    RSI, #-10	# int
167   	movl    RBP, RDX	# spill
      	nop 	# 2 bytes pad for loops and calls
16b   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # java.nio.Bits::getLongB @ bci:2  L[0]=_ L[1]=_
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # OopMap{off=368}
170   	int3	# ShouldNotReachHere
170
175   B15: #	N180 <- B12  Freq: 4.76837e-12
175   	# exception oop is in rax; no code emitted
175   	movq    RSI, RAX	# spill
178   	addq    rsp, 48	# Destroy frame
	popq   rbp

17d   	jmp     rethrow_stub
17d

    686   59       3       java.nio.HeapByteBuffer::getLong (20 bytes)   made not entrant
    690   69 %  b  3       DeserBenchmark$ByteBufferRunnable::run @ 13 (74 bytes)
                              @ 4   java.nio.Buffer::limit (5 bytes)
                              @ 23   java.nio.ByteBuffer::get (0 bytes)   no static binding
                              @ 40   java.nio.ByteBuffer::getInt (0 bytes)   no static binding
                              @ 58   java.nio.ByteBuffer::getLong (0 bytes)   no static binding
    694   70    b  3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)
                              @ 4   java.nio.Buffer::limit (5 bytes)
                              @ 23   java.nio.ByteBuffer::get (0 bytes)   no static binding
                              @ 40   java.nio.ByteBuffer::getInt (0 bytes)   no static binding
                              @ 58   java.nio.ByteBuffer::getLong (0 bytes)   no static binding
    700   71 %  b  4       DeserBenchmark$ByteBufferRunnable::run @ 13 (74 bytes)
                              @ 23   java.nio.HeapByteBuffer::get (15 bytes)   inline (hot)
                               \-> TypeProfile (40960/40960 counts) = java/nio/HeapByteBuffer
                                @ 7   java.nio.Buffer::checkIndex (22 bytes)   inline (hot)
                                @ 10   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                              @ 40   java.nio.HeapByteBuffer::getInt (19 bytes)   inline (hot)
                               \-> TypeProfile (20500/20500 counts) = java/nio/HeapByteBuffer
                                @ 5   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 8   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                                @ 15   java.nio.Bits::getInt (18 bytes)   inline (hot)
                                  @ 6   java.nio.Bits::getIntB (30 bytes)   inline (hot)
                                    @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 26   java.nio.Bits::makeInt (29 bytes)   inline (hot)
                                  @ 14   java.nio.Bits::getIntL (30 bytes)   never executed
                              @ 58   java.nio.HeapByteBuffer::getLong (20 bytes)   inline (hot)
                               \-> TypeProfile (20460/20460 counts) = java/nio/HeapByteBuffer
                                @ 6   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 9   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                                @ 16   java.nio.Bits::getLong (18 bytes)   inline (hot)
                                  @ 6   java.nio.Bits::getLongB (60 bytes)   inline (hot)
                                    @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 30   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 37   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 45   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 53   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 56   java.nio.Bits::makeLong (77 bytes)   inline (hot)
                                  @ 14   java.nio.Bits::getLongL (60 bytes)   too big
{method}
 - this oop:          0x00007fd948a15438
 - method holder:     'DeserBenchmark$ByteBufferRunnable'
 - constants:         0x00007fd948a150b0 constant pool [52] {0x00007fd948a150b0} for 'DeserBenchmark$ByteBufferRunnable' cache=0x00007fd948a154c8
 - access:            0xc1000001  public 
 - name:              'run'
 - signature:         '()V'
 - max stack:         4
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8060: 0xb0000000 i2c: 0x00007fd949106ae0 c2i: 0x00007fd949106bf4 c2iUV: 0x00007fd949106bc7
 - compiled entry     0x00007fd9492293c0
 - code size:         74
 - code start:        0x00007fd948a153d8
 - code end (excl):   0x00007fd948a15422
 - method data:       0x00007fd948a15638
 - checked ex length: 0
 - linenumber start:  0x00007fd948a15422
 - localvar length:   0
 - compiled code: nmethod    716   70       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N528: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B39 B2 <- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c   	movl    RBX, [RSI + #8 (8-bit)]	# int
01f   	movq    R13, [RSI + #24 (8-bit)]	# ptr
023   	movl    RBP, [RSI + #16 (8-bit)]	# int
026   	movq    RDI, RSI	# spill
029   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
036   	testq   R13, R13	# ptr
039   	je     B39  P=0.001000 C=-1.000000
039
03f   B2: #	B40 B3 <- B1  Freq: 0.999
03f   	movl    R10, [R13 + #8 (8-bit)]	# compressed klass ptr
043   	cmpl    R10, narrowklass: precise klass DeserBenchmark$ByteBufferRunnable: 0x00007fd958143598:Constant:exact *	# compressed klass ptr
04a   	jne,u  B40  P=0.000001 C=-1.000000
04a
050   B3: #	B7 <- B2  Freq: 0.998999
050   	# checkcastPP of R13
050   	movq    RDX, R13	# spill
053   	addq    RDX, #24	# ptr
057   	movq    R8, R13	# spill
05a   	addq    R8, #16	# ptr
05e   	movq    RCX, R13	# spill
061   	addq    RCX, #12	# ptr
065   	jmp,s   B7
      	nop 	# 9 bytes pad for loops and calls

070   B4: #	B5 <- B25  top-of-loop Freq: 52498.3
070   	movzbl  R11, [R10 + #20 + RCX]	# ubyte
076   	movsbl  RAX, [R10 + #17 + RCX]	# byte
07c   	movzbl  R8, [R10 + #18 + RCX]	# ubyte
082   	movzbl  R10, [R10 + #19 + RCX]	# ubyte
088   	sall    RAX, #24
08b   	sall    R10, #8
08f   	sall    R8, #16
093   	orl     RAX, R8	# int
096   	orl     RAX, R10	# int
099   	orl     RAX, R11	# int
09c
09c   B5: #	B6 <- B36 B4  Freq: 52498.3
09c   	movq    RCX, [rsp + #32]	# spill
0a1   	movl    [RCX], RAX	# int ! Field: DeserBenchmark$ByteBufferRunnable.v32
0a3   	movl    RBX, [rsp + #0]	# spill
0a6   	addl    RBX, #5	# int
0a9   	movq    R8, [rsp + #24]	# spill
0a9
0ae   B6: #	B7 <- B21 B5  Freq: 104894
0ae   	incl    RBX	# int
0b0   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # DeserBenchmark$ByteBufferRunnable::run @ bci:70  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=RBX L[3]=_
        # OopMap{r8=Derived_oop_[8] rcx=Derived_oop_[8] [8]=Oop [16]=Derived_oop_[8] off=176}
0b6   	movq    R13, [rsp + #8]	# spill
0bb   	movl    RBP, [rsp + #4]	# spill
0bf   	movq    RDX, [rsp + #16]	# spill
0bf
0c4   B7: #	B32 B8 <- B3 B39 B6 	Loop: B7-B6 inner  Freq: 104895
0c4   	cmpl    RBX, RBP
0c6   	jge     B32  P=0.000000 C=40960.000000
0c6
0cc   B8: #	B27 B9 <- B7  Freq: 104895
0cc   	testq   R13, R13	# ptr
0cf   	je     B27  P=0.000001 C=-1.000000
0cf
0d5   B9: #	B41 B10 <- B8  Freq: 104895
0d5   	movl    R10, [RDX]	# compressed ptr ! Field: DeserBenchmark$ByteBufferRunnable.src
0d8   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
0dc   	NullCheck R10
0dc
0dc   B10: #	B30 B11 <- B9  Freq: 104895
0dc   	cmpl    R11, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd958143988:Constant:exact *	# compressed klass ptr
0e3   	jne,u  B30  P=0.000001 C=-1.000000
0e3
0e9   B11: #	B28 B12 <- B10  Freq: 104895
0e9   	decode_heap_oop_not_null RSI,R10
0ec   	# checkcastPP of RSI
0ec   	movl    R10, [RSI + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
0f0   	testl   RBX, RBX
0f2   	jl     B28  P=0.000001 C=-1.000000
0f2
0f8   B12: #	B28 B13 <- B11  Freq: 104895
0f8   	movl    R9, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
0fc   	cmpl    RBX, R9
0ff   	jge     B28  P=0.000001 C=-1.000000
0ff
105   B13: #	B42 B14 <- B12  Freq: 104895
105   	movl    R11, RBX	# spill
108   	addl    R11, [RSI + #36 (8-bit)]	# int
10c   	movl    RDI, [R10 + #12 (8-bit)]	# range
110   	NullCheck R10
110
110   B14: #	B29 B15 <- B13  Freq: 104895
110   	cmpl    R11, RDI	# unsigned
113   	jnb,u  B29  P=0.000001 C=-1.000000
113
119   B15: #	B22 B16 <- B14  Freq: 104894
119   	movq    [rsp + #32], RCX	# spill
11e   	movq    [rsp + #24], R8	# spill
123   	movq    [rsp + #16], RDX	# spill
128   	movl    [rsp + #4], RBP	# spill
12c   	movq    [rsp + #8], R13	# spill
131   	movzbl  R8, [RSI + #41 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.bigEndian
136   	subl    R9, RBX	# int
139   	movl    [rsp + #0], RBX	# spill
13c   	incl    RBX	# int
13e   	decl    R9	# int
141   	movl    RDX, R11	# spill
144   	incl    RDX	# int
146   	movslq  RCX, R11	# i2l
149   	movslq  RAX, R11	# i2l
14c   	movsbl  RAX, [R10 + #16 + RAX]	# byte
152   	testl   RAX, RAX
154   	jl     B22  P=0.500488 C=40960.000000
154
15a   B16: #	B34 B17 <- B15  Freq: 52396
15a   	testl   RBX, RBX
15c   	jl     B34  P=0.000000 C=10752.000000
15c
162   B17: #	B34 B18 <- B16  Freq: 52396
162   	cmpl    R9, #8
166   	jl     B34  P=0.000000 C=10752.000000
166
16c   B18: #	B37 B19 <- B17  Freq: 52395.9
16c   	testl   R8, R8
16f   	je     B37  P=0.000000 C=5376.000000
16f
175   B19: #	B31 B20 <- B18  Freq: 52395.9
175   	addl    R11, #8	# int
179   	cmpl    R11, RDI	# unsigned
17c   	jnb,u  B31  P=0.000001 C=-1.000000
17c
182   B20: #	B21 <- B19  Freq: 52395.9
182   	movzbq  RDI, [R10 + #24 + RCX]	# ubyte -> long
188   	movsbq  RAX, [R10 + #17 + RCX]	# byte -> long
18e   	movsbl  R8, [R10 + #18 + RCX]	# byte
194   	movsbl  R11, [R10 + #23 + RCX]	# byte
19a   	movsbl  RBX, [R10 + #22 + RCX]	# byte
1a0   	movsbl  R9, [R10 + #21 + RCX]	# byte
1a6   	movsbl  RDX, [R10 + #20 + RCX]	# byte
1ac   	movsbl  R10, [R10 + #19 + RCX]	# byte
1b2   	salq    RAX, #56
1b6   	movzbl  R10, R10	# int & 0xFF -> long
1ba   	movzbl  RCX, RDX	# int & 0xFF -> long
1bd   	salq    R10, #40
1c1   	salq    RCX, #32
1c5   	movzbl  R9, R9	# int & 0xFF -> long
1c9   	movzbl  RBX, RBX	# int & 0xFF -> long
1cc   	salq    R9, #24
1d0   	salq    RBX, #16
1d4   	movzbl  R11, R11	# int & 0xFF -> long
1d8   	movzbl  R8, R8	# int & 0xFF -> long
1dc   	salq    R11, #8
1e0   	salq    R8, #48
1e4   	orq     RAX, R8	# long
1e7   	orq     RAX, R10	# long
1ea   	orq     RAX, RCX	# long
1ed   	orq     RAX, R9	# long
1f0   	orq     RAX, RBX	# long
1f3   	orq     RAX, R11	# long
1f6   	orq     RAX, RDI	# long
1f9
1f9   B21: #	B6 <- B38 B20  Freq: 52395.9
1f9   	movq    R8, [rsp + #24]	# spill
1fe   	movq    [R8], RAX	# long ! Field: DeserBenchmark$ByteBufferRunnable.v64
201   	movl    RBX, [rsp + #0]	# spill
204   	addl    RBX, #9	# int
207   	movq    RCX, [rsp + #32]	# spill
20c   	jmp     B6
20c
211   B22: #	B33 B23 <- B15  Freq: 52498.4
211   	testl   RBX, RBX
213   	jl     B33  P=0.000000 C=10752.000000
213
219   B23: #	B33 B24 <- B22  Freq: 52498.4
219   	cmpl    R9, #4
21d   	jl     B33  P=0.000000 C=10752.000000
21d
223   B24: #	B35 B25 <- B23  Freq: 52498.4
223   	testl   R8, R8
226   	je     B35  P=0.000000 C=5376.000000
226
22c   B25: #	B4 B26 <- B24  Freq: 52498.4
22c   	addl    R11, #4	# int
230   	cmpl    R11, RDI	# unsigned
233   	jb,u  B4  P=0.999999 C=-1.000000
233
239   B26: #	N528 <- B25  Freq: 0.0531955
239   	movq    RBP, R13	# spill
23c   	movl    R11, [rsp + #4]	# spill
241   	movl    [rsp + #0], R11	# spill
245   	movl    [rsp + #4], RBX	# spill
249   	movq    [rsp + #16], RSI	# spill
24e   	movl    [rsp + #28], R10	# spill
253   	movl    [rsp + #32], RDX	# spill
257   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
25f   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # java.nio.Bits::getIntB @ bci:2  L[0]=rsp + #16 L[1]=rsp + #32
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [16]=Oop [28]=NarrowOop off=612}
264   	int3	# ShouldNotReachHere
264
269   B27: #	N528 <- B8  Freq: 0.106288
269   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
26f   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:19  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=628}
274   	int3	# ShouldNotReachHere
274
279   B28: #	N528 <- B12 B11  Freq: 0.211183
279   	movq    [rsp + #0], R13	# spill
27d   	movl    [rsp + #8], RBX	# spill
281   	movl    [rsp + #12], R10	# spill
286   	movq    [rsp + #16], RSI	# spill
28b   	movl    RSI, #26	# int
      	nop 	# 3 bytes pad for loops and calls
293   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:12  L[0]=_ L[1]=_
        # java.nio.HeapByteBuffer::get @ bci:7  L[0]=_ L[1]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=Oop off=664}
298   	int3	# ShouldNotReachHere
298
29d   B29: #	N528 <- B14  Freq: 0.106287
29d   	movl    RSI, #-28	# int
2a2   	movq    [rsp + #0], R13	# spill
2a6   	movl    [rsp + #8], RBX	# spill
2aa   	movl    [rsp + #12], R10	# spill
2af   	movl    [rsp + #16], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
2b7   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=_
        # OopMap{[0]=Oop [12]=NarrowOop off=700}
2bc   	int3	# ShouldNotReachHere
2bc
2c1   B30: #	N528 <- B10  Freq: 0.104895
2c1   	movl    RSI, #-34	# int
2c6   	movq    [rsp + #0], R13	# spill
2ca   	movl    [rsp + #12], R10	# spill
2cf   	movl    [rsp + #16], RBX	# spill
2d3   	call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # OopMap{[0]=Oop [12]=NarrowOop off=728}
2d8   	int3	# ShouldNotReachHere
2d8
2dd   B31: #	N528 <- B19  Freq: 0.0530917
2dd   	movq    RBP, R13	# spill
2e0   	movl    R11, [rsp + #4]	# spill
2e5   	movl    [rsp + #0], R11	# spill
2e9   	movl    [rsp + #4], RBX	# spill
2ed   	movq    [rsp + #16], RSI	# spill
2f2   	movl    [rsp + #28], R10	# spill
2f7   	movl    [rsp + #32], RDX	# spill
2fb   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
303   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # java.nio.Bits::getLongB @ bci:2  L[0]=rsp + #16 L[1]=rsp + #32
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [16]=Oop [28]=NarrowOop off=776}
308   	int3	# ShouldNotReachHere
308
30d   B32: #	N528 <- B7  Freq: 0.0500179
30d   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

318   	ret
318
319   B33: #	N528 <- B23 B22  Freq: 0.0512824
319   	movq    RBP, R13	# spill
31c   	movl    R10, [rsp + #4]	# spill
321   	movl    [rsp + #0], R10	# spill
325   	movl    [rsp + #4], RBX	# spill
329   	movq    [rsp + #24], RSI	# spill
32e   	movq    [rsp + #32], RSI	# spill
333   	movl    RSI, #26	# int
      	nop 	# 3 bytes pad for loops and calls
33b   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:5  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [24]=Oop [32]=Oop off=832}
340   	int3	# ShouldNotReachHere
340
345   B34: #	N528 <- B17 B16  Freq: 0.0511823
345   	movq    RBP, R13	# spill
348   	movl    R10, [rsp + #4]	# spill
34d   	movl    [rsp + #0], R10	# spill
351   	movl    [rsp + #4], RBX	# spill
355   	movq    [rsp + #24], RSI	# spill
35a   	movq    [rsp + #32], RSI	# spill
35f   	movl    RSI, #26	# int
      	nop 	# 3 bytes pad for loops and calls
367   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:6  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [24]=Oop [32]=Oop off=876}
36c   	int3	# ShouldNotReachHere
36c
371   B35: #	B43 B36 <- B24  Freq: 0.0250332
371   	movl    RBP, RBX	# spill
373   	call,static  java.nio.Bits::getIntL
        # java.nio.Bits::getInt @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=RBP L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Derived_oop_[8] [24]=Derived_oop_[8] [32]=Derived_oop_[8] off=888}
378
378   B36: #	B5 <- B35  Freq: 0.0250327
        # Block is sole successor of call
378   	jmp     B5
378
37d   B37: #	B44 B38 <- B18  Freq: 0.0249843
37d   	movl    RBP, RBX	# spill
37f   	call,static  java.nio.Bits::getLongL
        # java.nio.Bits::getLong @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=RBP L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Derived_oop_[8] [24]=Derived_oop_[8] [32]=Derived_oop_[8] off=900}
384
384   B38: #	B21 <- B37  Freq: 0.0249838
        # Block is sole successor of call
384   	jmp     B21
384
389   B39: #	B7 <- B1  Freq: 0.000999987
389   	xorl    R13, R13	# ptr
38c   	movl    RDX, NULL+24	# ptr (positive 32-bit)
391   	movl    R8, NULL+16	# ptr (positive 32-bit)
397   	movl    RCX, NULL+12	# ptr (positive 32-bit)
39c   	jmp     B7
39c
3a1   B40: #	N528 <- B2  Freq: 9.99e-07
3a1   	movl    RSI, #-99	# int
3a6   	movq    [rsp + #0], R13	# spill
3aa   	movl    [rsp + #8], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
3af   	call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:13  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=_
        # OopMap{[0]=Oop off=948}
3b4   	int3	# ShouldNotReachHere
3b4
3b9   B41: #	N528 <- B9  Freq: 0.106288
3b9   	movl    RSI, #-10	# int
3be   	movl    RBP, RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
3c3   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=968}
3c8   	int3	# ShouldNotReachHere
3c8
3cd   B42: #	N528 <- B13  Freq: 0.106288
3cd   	movl    RSI, #-10	# int
3d2   	movl    RBP, R11	# spill
      	nop 	# 2 bytes pad for loops and calls
3d7   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap{off=988}
3dc   	int3	# ShouldNotReachHere
3dc
3e1   B43: #	B45 <- B35  Freq: 2.50332e-07
3e1   	# exception oop is in rax; no code emitted
3e1   	movq    RSI, RAX	# spill
3e4   	jmp,s   B45
3e4
3e6   B44: #	B45 <- B37  Freq: 2.49843e-07
3e6   	# exception oop is in rax; no code emitted
3e6   	movq    RSI, RAX	# spill
3e6
3e9   B45: #	N528 <- B43 B44  Freq: 5.00175e-07
3e9   	addq    rsp, 64	# Destroy frame
	popq   rbp

3ee   	jmp     rethrow_stub
3ee

    722   69 %     3       DeserBenchmark$ByteBufferRunnable::run @ -2 (74 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234c0, pc=0x00007fd949225483)
     nmethod    722   69 %     3       DeserBenchmark$ByteBufferRunnable::run @ -2 (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949225483)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:85) - goto @ bci 70 
     Created vframeArray 0x00007fd9581b9338
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581b9338 mode 0
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - goto @ bci 70 sp = 0x00007fd962523458
    740   72    b  4       DeserBenchmark$ByteBufferRunnable::run (74 bytes)
                              @ 4   java.nio.Buffer::limit (5 bytes)   accessor
                              @ 23   java.nio.HeapByteBuffer::get (15 bytes)   inline (hot)
                               \-> TypeProfile (49151/49151 counts) = java/nio/HeapByteBuffer
                                @ 7   java.nio.Buffer::checkIndex (22 bytes)   inline (hot)
                                @ 10   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                              @ 40   java.nio.HeapByteBuffer::getInt (19 bytes)   inline (hot)
                               \-> TypeProfile (24625/24625 counts) = java/nio/HeapByteBuffer
                                @ 5   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 8   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                                @ 15   java.nio.Bits::getInt (18 bytes)   inline (hot)
                                  @ 6   java.nio.Bits::getIntB (30 bytes)   inline (hot)
                                    @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 26   java.nio.Bits::makeInt (29 bytes)   inline (hot)
                                  @ 14   java.nio.Bits::getIntL (30 bytes)   never executed
                              @ 58   java.nio.HeapByteBuffer::getLong (20 bytes)   inline (hot)
                               \-> TypeProfile (24526/24526 counts) = java/nio/HeapByteBuffer
                                @ 6   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 9   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                                @ 16   java.nio.Bits::getLong (18 bytes)   inline (hot)
                                  @ 6   java.nio.Bits::getLongB (60 bytes)   inline (hot)
                                    @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 30   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 37   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 45   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 53   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 56   java.nio.Bits::makeLong (77 bytes)   inline (hot)
                                  @ 14   java.nio.Bits::getLongL (60 bytes)   too big
{method}
 - this oop:          0x00007fd948a15438
 - method holder:     'DeserBenchmark$ByteBufferRunnable'
 - constants:         0x00007fd948a150b0 constant pool [52] {0x00007fd948a150b0} for 'DeserBenchmark$ByteBufferRunnable' cache=0x00007fd948a154c8
 - access:            0xc1000001  public 
 - name:              'run'
 - signature:         '()V'
 - max stack:         4
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8060: 0xb0000000 i2c: 0x00007fd949106ae0 c2i: 0x00007fd949106bf4 c2iUV: 0x00007fd949106bc7
 - compiled entry     0x00007fd9492293c0
 - code size:         74
 - code start:        0x00007fd948a153d8
 - code end (excl):   0x00007fd948a15422
 - method data:       0x00007fd948a15638
 - checked ex length: 0
 - linenumber start:  0x00007fd948a15422
 - localvar length:   0
 - compiled code: nmethod    760   70       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)
#
#  void ( DeserBenchmark$ByteBufferRunnable:NotNull * )
#
#r018 rsi:rsi   : parm 0: DeserBenchmark$ByteBufferRunnable:NotNull *
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N444: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B37 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c   	movq    R14, RSI	# spill
02f   	movl    R11, [RSI + #24 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$ByteBufferRunnable.src
033   	testl   R11, R11	# compressed ptr
036   	je     B37  P=0.000001 C=-1.000000
036
03c   B2: #	B30 B3 <- B1  Freq: 0.999999
03c   	movl    R9, #-9	# int
042   	addl    R9, [R11 + #28 (8-bit)]	# int
046   	testl   R9, R9
049   	jle     B30  P=0.000000 C=49151.000000
049
04f   B3: #	B8 <- B2  Freq: 0.999999
04f   	xorl    RBP, RBP	# int
051   	jmp,s   B8
051
053   B4: #	B5 <- B24  top-of-loop Freq: 58802.8
053   	movzbl  R11, [RDI + #20 + R13]	# ubyte
059   	movsbl  RAX, [RDI + #17 + R13]	# byte
05f   	movzbl  R8, [RDI + #18 + R13]	# ubyte
065   	movzbl  R10, [RDI + #19 + R13]	# ubyte
06b   	sall    RAX, #24
06e   	sall    R10, #8
072   	sall    R8, #16
076   	orl     RAX, R8	# int
079   	orl     RAX, R10	# int
07c   	orl     RAX, R11	# int
07f
07f   B5: #	B6 <- B34 B4  Freq: 58802.8
07f   	movl    [R14 + #12 (8-bit)], RAX	# int ! Field: DeserBenchmark$ByteBufferRunnable.v32
083   	addl    RBP, #5	# int
086
086   B6: #	B30 B7 <- B20 B5  Freq: 117369
086   	incl    RBP	# int
088   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # DeserBenchmark$ByteBufferRunnable::run @ bci:70  L[0]=R14 L[1]=R9 L[2]=RBP L[3]=_
        # OopMap{r14=Oop off=136}
08e   	cmpl    RBP, R9
091   	jge     B30  P=0.000000 C=49150.000000
091
097   B7: #	B8 <- B6  Freq: 117369
097   	movl    R11, [R14 + #24 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$ByteBufferRunnable.src
097
09b   B8: #	B38 B9 <- B3 B7 	Loop: B8-B7 inner  Freq: 117370
09b   	movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
09f   	NullCheck R11
09f
09f   B9: #	B28 B10 <- B8  Freq: 117370
09f   	cmpl    R10, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd900047858:Constant:exact *	# compressed klass ptr
0a6   	jne,u  B28  P=0.000001 C=-1.000000
0a6
0ac   B10: #	B26 B11 <- B9  Freq: 117370
0ac   	decode_heap_oop_not_null RSI,R11
0af   	# checkcastPP of RSI
0af   	movl    RDI, [RSI + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
0b2   	testl   RBP, RBP
0b4   	jl     B26  P=0.000001 C=-1.000000
0b4
0ba   B11: #	B26 B12 <- B10  Freq: 117370
0ba   	movl    R10, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
0be   	cmpl    RBP, R10
0c1   	jge     B26  P=0.000001 C=-1.000000
0c1
0c7   B12: #	B39 B13 <- B11  Freq: 117370
0c7   	movl    RAX, RBP	# spill
0c9   	addl    RAX, [RSI + #36 (8-bit)]	# int
0cc   	movl    R8, [RDI + #12 (8-bit)]	# range
0d0   	NullCheck RDI
0d0
0d0   B13: #	B27 B14 <- B12  Freq: 117370
0d0   	cmpl    RAX, R8	# unsigned
0d3   	jnb,u  B27  P=0.000001 C=-1.000000
0d3
0d9   B14: #	B21 B15 <- B13  Freq: 117369
0d9   	movzbl  R11, [RSI + #41 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.bigEndian
0de   	subl    R10, RBP	# int
0e1   	movl    RCX, RBP	# spill
0e3   	incl    RCX	# int
0e5   	decl    R10	# int
0e8   	movl    RDX, RAX	# spill
0ea   	incl    RDX	# int
0ec   	movslq  R13, RAX	# i2l
0ef   	movslq  RBX, RAX	# i2l
0f2   	movsbl  RBX, [RDI + #16 + RBX]	# byte
0f7   	testl   RBX, RBX
0f9   	jl     B21  P=0.501007 C=49151.000000
0f9
0ff   B15: #	B32 B16 <- B14  Freq: 58566.5
0ff   	testl   RCX, RCX
101   	jl     B32  P=0.000000 C=10752.000000
101
107   B16: #	B32 B17 <- B15  Freq: 58566.5
107   	cmpl    R10, #8
10b   	jl     B32  P=0.000000 C=10752.000000
10b
111   B17: #	B35 B18 <- B16  Freq: 58566.5
111   	testl   R11, R11
114   	je     B35  P=0.000000 C=5376.000000
114
11a   B18: #	B29 B19 <- B17  Freq: 58566.4
11a   	addl    RAX, #8	# int
11d   	cmpl    RAX, R8	# unsigned
120   	jnb,u  B29  P=0.000001 C=-1.000000
120
126   B19: #	B20 <- B18  Freq: 58566.4
126   	movzbq  RCX, [RDI + #24 + R13]	# ubyte -> long
12c   	movsbq  RAX, [RDI + #17 + R13]	# byte -> long
132   	movsbl  R10, [RDI + #18 + R13]	# byte
138   	movsbl  R11, [RDI + #23 + R13]	# byte
13e   	movzbq  RBX, [RDI + #22 + R13]	# ubyte -> long
144   	movzbq  RDX, [RDI + #21 + R13]	# ubyte -> long
14a   	movzbq  RSI, [RDI + #20 + R13]	# ubyte -> long
150   	movzbq  R8, [RDI + #19 + R13]	# ubyte -> long
156   	salq    RAX, #56
15a   	salq    R8, #40
15e   	salq    RSI, #32
162   	salq    RDX, #24
166   	salq    RBX, #16
16a   	movzbl  R11, R11	# int & 0xFF -> long
16e   	movzbl  R10, R10	# int & 0xFF -> long
172   	salq    R11, #8
176   	salq    R10, #48
17a   	orq     RAX, R10	# long
17d   	orq     RAX, R8	# long
180   	orq     RAX, RSI	# long
183   	orq     RAX, RDX	# long
186   	orq     RAX, RBX	# long
189   	orq     RAX, R11	# long
18c   	orq     RAX, RCX	# long
18f
18f   B20: #	B6 <- B36 B19  Freq: 58566.4
18f   	movq    [R14 + #16 (8-bit)], RAX	# long ! Field: DeserBenchmark$ByteBufferRunnable.v64
193   	addl    RBP, #9	# int
196   	jmp     B6
196
19b   B21: #	B31 B22 <- B14  Freq: 58802.9
19b   	testl   RCX, RCX
19d   	jl     B31  P=0.000000 C=10752.000000
19d
1a3   B22: #	B31 B23 <- B21  Freq: 58802.9
1a3   	cmpl    R10, #4
1a7   	jl     B31  P=0.000000 C=10752.000000
1a7
1ad   B23: #	B33 B24 <- B22  Freq: 58802.9
1ad   	testl   R11, R11
1b0   	je     B33  P=0.000000 C=5376.000000
1b0
1b6   B24: #	B4 B25 <- B23  Freq: 58802.8
1b6   	addl    RAX, #4	# int
1b9   	cmpl    RAX, R8	# unsigned
1bc   	jb,u  B4  P=0.999999 C=-1.000000
1bc
1c2   B25: #	N444 <- B24  Freq: 0.0595837
1c2   	movl    [rsp + #0], R9	# spill
1c6   	movl    [rsp + #4], RCX	# spill
1ca   	movq    [rsp + #8], R14	# spill
1cf   	movq    [rsp + #16], RSI	# spill
1d4   	movl    [rsp + #28], RDI	# spill
1d8   	movl    [rsp + #32], RDX	# spill
1dc   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
1e3   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # java.nio.Bits::getIntB @ bci:2  L[0]=rsp + #16 L[1]=rsp + #32
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Oop [28]=NarrowOop off=488}
1e8   	int3	# ShouldNotReachHere
1e8
1ed   B26: #	N444 <- B11 B10  Freq: 0.236298
1ed   	movq    [rsp + #0], R14	# spill
1f1   	movl    [rsp + #8], R9	# spill
1f6   	movl    [rsp + #12], RDI	# spill
1fa   	movq    [rsp + #16], RSI	# spill
1ff   	movl    RSI, #26	# int
      	nop 	# 3 bytes pad for loops and calls
207   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:12  L[0]=_ L[1]=_
        # java.nio.HeapByteBuffer::get @ bci:7  L[0]=_ L[1]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=Oop off=524}
20c   	int3	# ShouldNotReachHere
20c
211   B27: #	N444 <- B13  Freq: 0.118928
211   	movl    RSI, #-28	# int
216   	movq    [rsp + #0], R14	# spill
21a   	movl    [rsp + #8], R9	# spill
21f   	movl    [rsp + #12], RDI	# spill
223   	movl    [rsp + #16], RAX	# spill
227   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_
        # OopMap{[0]=Oop [12]=NarrowOop off=556}
22c   	int3	# ShouldNotReachHere
22c
231   B28: #	N444 <- B9  Freq: 0.11737
231   	movl    RSI, #-34	# int
236   	movq    [rsp + #0], R14	# spill
23a   	movl    [rsp + #8], R9	# spill
23f   	movl    [rsp + #12], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
247   	call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_ STK[0]=rsp + #12 STK[1]=RBP
        # OopMap{[0]=Oop [12]=NarrowOop off=588}
24c   	int3	# ShouldNotReachHere
24c
251   B29: #	N444 <- B18  Freq: 0.0593441
251   	movl    [rsp + #0], R9	# spill
255   	movl    [rsp + #4], RCX	# spill
259   	movq    [rsp + #8], R14	# spill
25e   	movq    [rsp + #16], RSI	# spill
263   	movl    [rsp + #28], RDI	# spill
267   	movl    [rsp + #32], RDX	# spill
26b   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
273   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # java.nio.Bits::getLongB @ bci:2  L[0]=rsp + #16 L[1]=rsp + #32
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Oop [28]=NarrowOop off=632}
278   	int3	# ShouldNotReachHere
278
27d   B30: #	N444 <- B6 B2  Freq: 0.0559665
27d   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

288   	ret
288
289   B31: #	N444 <- B22 B21  Freq: 0.0574409
289   	movl    [rsp + #0], R9	# spill
28d   	movl    [rsp + #4], RCX	# spill
291   	movq    [rsp + #8], R14	# spill
296   	movq    [rsp + #24], RSI	# spill
29b   	movq    [rsp + #32], RSI	# spill
2a0   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
2a7   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:5  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [24]=Oop [32]=Oop off=684}
2ac   	int3	# ShouldNotReachHere
2ac
2b1   B32: #	N444 <- B16 B15  Freq: 0.0572099
2b1   	movl    [rsp + #0], R9	# spill
2b5   	movl    [rsp + #4], RCX	# spill
2b9   	movq    [rsp + #8], R14	# spill
2be   	movq    [rsp + #24], RSI	# spill
2c3   	movq    [rsp + #32], RSI	# spill
2c8   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
2cf   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:6  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [24]=Oop [32]=Oop off=724}
2d4   	int3	# ShouldNotReachHere
2d4
2d9   B33: #	B40 B34 <- B23  Freq: 0.0280394
2d9   	movl    [rsp + #4], R9	# spill
2de   	movq    [rsp + #8], R14	# spill
2e3   	movl    [rsp + #0], RCX	# spill
      	nop 	# 1 bytes pad for loops and calls
2e7   	call,static  java.nio.Bits::getIntL
        # java.nio.Bits::getInt @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=rsp + #0 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop off=748}
2ec
2ec   B34: #	B5 <- B33  Freq: 0.0280388
        # Block is sole successor of call
2ec   	movq    R14, [rsp + #8]	# spill
2f1   	movl    R9, [rsp + #4]	# spill
2f6   	jmp     B5
2f6
2fb   B35: #	B41 B36 <- B17  Freq: 0.0279267
2fb   	movl    [rsp + #4], R9	# spill
300   	movq    [rsp + #8], R14	# spill
305   	movl    [rsp + #0], RCX	# spill
      	nop 	# 3 bytes pad for loops and calls
30b   	call,static  java.nio.Bits::getLongL
        # java.nio.Bits::getLong @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=rsp + #0 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop off=784}
310
310   B36: #	B20 <- B35  Freq: 0.0279261
        # Block is sole successor of call
310   	movq    R14, [rsp + #8]	# spill
315   	movl    R9, [rsp + #4]	# spill
31a   	jmp     B20
31a
31f   B37: #	N444 <- B1  Freq: 1.01328e-06
31f   	movl    RSI, #-10	# int
      	nop 	# 3 bytes pad for loops and calls
327   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=812}
32c   	int3	# ShouldNotReachHere
32c
331   B38: #	N444 <- B8  Freq: 0.118929
331   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
337   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=828}
33c   	int3	# ShouldNotReachHere
33c
341   B39: #	N444 <- B12  Freq: 0.118928
341   	movl    RSI, #-10	# int
346   	movl    RBP, RAX	# spill
      	nop 	# 3 bytes pad for loops and calls
34b   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap{off=848}
350   	int3	# ShouldNotReachHere
350
355   B40: #	B42 <- B33  Freq: 2.80394e-07
355   	# exception oop is in rax; no code emitted
355   	movq    RSI, RAX	# spill
358   	jmp,s   B42
358
35a   B41: #	B42 <- B35  Freq: 2.79267e-07
35a   	# exception oop is in rax; no code emitted
35a   	movq    RSI, RAX	# spill
35a
35d   B42: #	N444 <- B40 B41  Freq: 5.59661e-07
35d   	addq    rsp, 64	# Destroy frame
	popq   rbp

362   	jmp     rethrow_stub
362

    764   70       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234b0, pc=0x00007fd949229bf9)
     nmethod    764   70       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949229bf9)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:85) - goto @ bci 70 
     Created vframeArray 0x00007fd9581b78c8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581b78c8 mode 0
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - goto @ bci 70 sp = 0x00007fd962523448
-- ByteBuffer heap
     2979   73    b  3       sun.misc.FDBigInteger::mult (64 bytes)
   2980   74    b  3       sun.misc.FDBigInteger::<init> (30 bytes)
                              @ 1   java.lang.Object::<init> (1 bytes)
                              @ 26   sun.misc.FDBigInteger::trimLeadingZeros (57 bytes)   not inlineable
   2981   75    b  3       sun.misc.FDBigInteger::trimLeadingZeros (57 bytes)
   2982   76    b  3       sun.misc.FDBigInteger::makeImmutable (6 bytes)
   2983   77    b  3       sun.misc.FDBigInteger::mult (44 bytes)
                              @ 28   sun.misc.FDBigInteger::mult (64 bytes)   not inlineable
                              @ 40   sun.misc.FDBigInteger::<init> (30 bytes)   not inlineable
10.97 msec/loop
     2985   78    b  1       java.util.Formatter$Flags::valueOf (5 bytes)
869.35 MB/s
Uncommon trap occurred in DeserBenchmark$ByteBufferRunnable::run (@0x00007fd94922ccac) thread=140571634190080 reason=class_check action=maybe_recompile unloaded_class_index=-1
DEOPT PACKING thread 0x00007fd95800d000 Compiled frame (sp=0x00007fd962523460 unextended sp=0x00007fd962523460, fp=0x0000000000000000, real_fp=0x00007fd9625234b0, pc=0x00007fd94922ccac)
     nmethod   2985   72       4       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523460, unextended_sp=0x00007fd962523460, fp=0x0000000000000000, pc=0x00007fd94922ccac)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:86) - invokevirtual @ bci 23 
     Created vframeArray 0x00007fd9581c00f8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581c00f8 mode 2
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - invokevirtual @ bci 23 sp = 0x00007fd962523438
   2986   79    b  3       java.nio.DirectByteBuffer::ix (10 bytes)
   2986   80     n 0       sun.misc.Unsafe::getByte (native)   
   2987   81    b  3       java.nio.DirectByteBuffer::get (16 bytes)
                              @ 6   java.nio.Buffer::checkIndex (22 bytes)   intrinsic
                              @ 9   java.nio.DirectByteBuffer::ix (10 bytes)
                              @ 12   sun.misc.Unsafe::getByte (0 bytes)   intrinsic
   2988   82    b  3       java.nio.DirectByteBuffer::getInt (15 bytes)
                              @ 5   java.nio.Buffer::checkIndex (24 bytes)
                                @ 18  java/lang/IndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 8   java.nio.DirectByteBuffer::ix (10 bytes)
                              @ 11   java.nio.DirectByteBuffer::getInt (39 bytes)   callee is too large
   2989   83     n 0       sun.misc.Unsafe::getInt (native)   
   2989   84    b  3       java.nio.Bits::swap (5 bytes)
                              @ 1   java.lang.Integer::reverseBytes (26 bytes)
   2990   85     n 0       sun.misc.Unsafe::getLong (native)   
   2990   86    b  3       java.nio.DirectByteBuffer::getLong (16 bytes)
                              @ 6   java.nio.Buffer::checkIndex (24 bytes)
                                @ 18  java/lang/IndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 9   java.nio.DirectByteBuffer::ix (10 bytes)
                              @ 12   java.nio.DirectByteBuffer::getLong (39 bytes)   callee is too large
   2991   87    b  3       java.nio.Bits::swap (5 bytes)
                              @ 1   java.lang.Long::reverseBytes (46 bytes)   callee is too large
   2992   88    b  3       java.nio.DirectByteBuffer::getInt (39 bytes)
                              @ 10   sun.misc.Unsafe::getInt (0 bytes)   intrinsic
                              @ 26   java.nio.Bits::swap (5 bytes)
                                @ 1   java.lang.Integer::reverseBytes (26 bytes)
   2993   89    b  3       java.nio.DirectByteBuffer::getLong (39 bytes)
                              @ 10   sun.misc.Unsafe::getLong (0 bytes)   intrinsic
                              @ 26   java.nio.Bits::swap (5 bytes)
                                @ 1   java.lang.Long::reverseBytes (46 bytes)   callee is too large
   2994   90    b  3       java.lang.Long::reverseBytes (46 bytes)
Uncommon trap occurred in DeserBenchmark$ByteBufferRunnable::run (@0x00007fd94922bff8) thread=140571634190080 reason=class_check action=maybe_recompile unloaded_class_index=-1
DEOPT PACKING thread 0x00007fd95800d000 Compiled frame (sp=0x00007fd962523460 unextended sp=0x00007fd962523460, fp=0x0000000000989677, real_fp=0x00007fd9625234b0, pc=0x00007fd94922bff8)
     nmethod   2995   71 %     4       DeserBenchmark$ByteBufferRunnable::run @ 13 (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523460, unextended_sp=0x00007fd962523460, fp=0x0000000000989677, pc=0x00007fd94922bff8)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:86) - invokevirtual @ bci 23 
     Created vframeArray 0x00007fd9581b78c8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581b78c8 mode 2
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - invokevirtual @ bci 23 sp = 0x00007fd962523438
Uncommon trap occurred in DeserBenchmark$ByteBufferRunnable::run (@0x00007fd94922bff8) thread=140571634190080 reason=class_check action=maybe_recompile unloaded_class_index=-1
DEOPT PACKING thread 0x00007fd95800d000 Compiled frame (sp=0x00007fd962523460 unextended sp=0x00007fd962523460, fp=0x0000000000989677, real_fp=0x00007fd9625234b0, pc=0x00007fd94922bff8)
     nmethod   2995   71 %     4       DeserBenchmark$ByteBufferRunnable::run @ 13 (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523460, unextended_sp=0x00007fd962523460, fp=0x0000000000989677, pc=0x00007fd94922bff8)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:86) - invokevirtual @ bci 23 
     Created vframeArray 0x00007fd9581c00f8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581c00f8 mode 2
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - invokevirtual @ bci 23 sp = 0x00007fd962523438
   2995   91    b  4       java.lang.Long::reverseBytes (46 bytes)
{method}
 - this oop:          0x00007fd9486c0e70
 - method holder:     'java/lang/Long'
 - constants:         0x00007fd9486bd088 constant pool [414] {0x00007fd9486bd088} for 'java/lang/Long' cache=0x00007fd9487c9508
 - access:            0x81000009  public static 
 - name:              'reverseBytes'
 - signature:         '(J)J'
 - max stack:         7
 - max locals:        2
 - size of params:    2
 - method size:       12
 - intrinsic id:      41 _reverseBytes_l
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8ed0: 0xbe000000 i2c: 0x00007fd94911b1e0 c2i: 0x00007fd94911b31a c2iUV: 0x00007fd94911b2ed
 - compiled entry     0x00007fd949231160
 - code size:         46
 - code start:        0x00007fd9486c0e28
 - code end (excl):   0x00007fd9486c0e56
 - method data:       0x00007fd94895d5f0
 - checked ex length: 0
 - linenumber start:  0x00007fd9486c0e56
 - localvar length:   1
 - localvar start:    0x00007fd9486c0e62
 - compiled code: nmethod   2996   90       3       java.lang.Long::reverseBytes (46 bytes)
#
#  long/half ( long, half )
#
#r018 rsi:rsi   : parm 0: long
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
abababab   N1: #	B1 <- B1  Freq: 1
abababab
000   B1: #	N1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	subq    rsp, #24	# Create frame
	movq    [rsp + #16], rbp	# Save rbp

00c   	movq    R10, RSI	# spill
00f   	shrq    R10, #8
013   	movq    R11, #71777214294589695	# long
01d   	andq    RSI, R11	# long
020   	andq    R10, R11	# long
023   	salq    RSI, #8
027   	orq     RSI, R10	# long
02a   	movq    R10, RSI	# spill
02d   	shrq    R10, #48
031   	movq    R11, RSI	# spill
034   	shrq    R11, #16
038   	movq    RAX, RSI	# spill
03b   	salq    RAX, #48
03f   	movl    R8, #4294901760	# long (unsigned 32-bit)
045   	andq    RSI, R8	# long
048   	andq    R11, R8	# long
04b   	salq    RSI, #16
04f   	orq     RAX, RSI	# long
052   	orq     RAX, R11	# long
055   	orq     RAX, R10	# long
058   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

063   	ret
063

   2997   90       3       java.lang.Long::reverseBytes (46 bytes)   made not entrant
Uncommon trap occurred in DeserBenchmark$ByteBufferRunnable::run (@0x00007fd94922bff8) thread=140571634190080 reason=class_check action=maybe_recompile unloaded_class_index=-1
   2997   71 %     4       DeserBenchmark$ByteBufferRunnable::run @ -2 (74 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Compiled frame (sp=0x00007fd962523460 unextended sp=0x00007fd962523460, fp=0x0000000000989677, real_fp=0x00007fd9625234b0, pc=0x00007fd94922bff8)
     nmethod   2997   71 %     4       DeserBenchmark$ByteBufferRunnable::run @ -2 (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523460, unextended_sp=0x00007fd962523460, fp=0x0000000000989677, pc=0x00007fd94922bff8)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:86) - invokevirtual @ bci 23 
     Created vframeArray 0x00007fd9581b78c8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581b78c8 mode 2
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - invokevirtual @ bci 23 sp = 0x00007fd962523438
   2997   92 %  b  4       DeserBenchmark$ByteBufferRunnable::run @ 13 (74 bytes)
                              @ 23   java.nio.HeapByteBuffer::get (15 bytes)   inline (hot)
                              @ 23   java.nio.DirectByteBuffer::get (16 bytes)   inline (hot)
                               \-> TypeProfile (4096/54270 counts) = java/nio/DirectByteBuffer
                               \-> TypeProfile (50174/54270 counts) = java/nio/HeapByteBuffer
                                @ 6   java.nio.Buffer::checkIndex (22 bytes)   inline (hot)
                                @ 9   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                                @ 12   sun.misc.Unsafe::getByte (0 bytes)   (intrinsic)
                                @ 7   java.nio.Buffer::checkIndex (22 bytes)   inline (hot)
                                @ 10   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                              @ 40   java.nio.HeapByteBuffer::getInt (19 bytes)   inline (hot)
                              @ 40   java.nio.DirectByteBuffer::getInt (15 bytes)   inline (hot)
                               \-> TypeProfile (2034/27193 counts) = java/nio/DirectByteBuffer
                               \-> TypeProfile (25159/27193 counts) = java/nio/HeapByteBuffer
                                @ 5   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 8   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                                @ 11   java.nio.DirectByteBuffer::getInt (39 bytes)   inline (hot)
                                  @ 10   sun.misc.Unsafe::getInt (0 bytes)   (intrinsic)
                                  @ 26   java.nio.Bits::swap (5 bytes)   inline (hot)
                                    @ 1   java.lang.Integer::reverseBytes (26 bytes)   (intrinsic)
                                @ 5   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 8   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                                @ 15   java.nio.Bits::getInt (18 bytes)   inline (hot)
                                  @ 6   java.nio.Bits::getIntB (30 bytes)   inline (hot)
                                    @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 26   java.nio.Bits::makeInt (29 bytes)   inline (hot)
                                  @ 14   java.nio.Bits::getIntL (30 bytes)   never executed
                              @ 58   java.nio.HeapByteBuffer::getLong (20 bytes)   inline (hot)
                              @ 58   java.nio.DirectByteBuffer::getLong (16 bytes)   inline (hot)
                               \-> TypeProfile (2062/27077 counts) = java/nio/DirectByteBuffer
                               \-> TypeProfile (25015/27077 counts) = java/nio/HeapByteBuffer
                                @ 6   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 9   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                                @ 12   java.nio.DirectByteBuffer::getLong (39 bytes)   inline (hot)
                                  @ 10   sun.misc.Unsafe::getLong (0 bytes)   (intrinsic)
                                  @ 26   java.nio.Bits::swap (5 bytes)   inline (hot)
                                    @ 1   java.lang.Long::reverseBytes (46 bytes)   (intrinsic)
                                @ 6   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 9   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                                @ 16   java.nio.Bits::getLong (18 bytes)   inline (hot)
                                  @ 6   java.nio.Bits::getLongB (60 bytes)   inline (hot)
                                    @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 30   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 37   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 45   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 53   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 56   java.nio.Bits::makeLong (77 bytes)   inline (hot)
                                  @ 14   java.nio.Bits::getLongL (60 bytes)   too big
{method}
 - this oop:          0x00007fd948a15438
 - method holder:     'DeserBenchmark$ByteBufferRunnable'
 - constants:         0x00007fd948a150b0 constant pool [52] {0x00007fd948a150b0} for 'DeserBenchmark$ByteBufferRunnable' cache=0x00007fd948a154c8
 - access:            0xc1000001  public 
 - name:              'run'
 - signature:         '()V'
 - max stack:         4
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     4
 - vtable index:      5
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8060: 0xb0000000 i2c: 0x00007fd949106ae0 c2i: 0x00007fd949106bf4 c2iUV: 0x00007fd949106bc7
 - compiled entry     0x00007fd94922ca80
 - code size:         74
 - code start:        0x00007fd948a153d8
 - code end (excl):   0x00007fd948a15422
 - method data:       0x00007fd948a15638
 - checked ex length: 0
 - linenumber start:  0x00007fd948a15422
 - localvar length:   0
 - compiled code: nmethod   3023   72       4       DeserBenchmark$ByteBufferRunnable::run (74 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N903: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B69 B2 <- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c   	movl    RBX, [RSI + #8 (8-bit)]	# int
01f   	movq    RBP, [RSI + #24 (8-bit)]	# ptr
023   	movl    R11, [RSI + #16 (8-bit)]	# int
027   	movl    [rsp + #0], R11	# spill
02b   	movq    RDI, RSI	# spill
02e   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
03b   	testq   RBP, RBP	# ptr
03e   	je     B69  P=0.001000 C=-1.000000
03e
044   B2: #	B70 B3 <- B1  Freq: 0.999
044   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
048   	cmpl    R10, narrowklass: precise klass DeserBenchmark$ByteBufferRunnable: 0x00007fd900009ff8:Constant:exact *	# compressed klass ptr
04f   	jne,u  B70  P=0.000001 C=-1.000000
04f
055   B3: #	B8 <- B2  Freq: 0.998999
055   	# checkcastPP of RBP
055   	movq    R8, RBP	# spill
058   	addq    R8, #12	# ptr
05c   	movq    R9, RBP	# spill
05f   	addq    R9, #24	# ptr
063   	movq    RCX, RBP	# spill
066   	addq    RCX, #16	# ptr
06a   	jmp,s   B8
      	nop 	# 4 bytes pad for loops and calls

070   B4: #	B5 <- B34  top-of-loop Freq: 44884.3
070   	movzbl  R10, [RDI + #20 + R8]	# ubyte
076   	movzbl  R11, [RDI + #19 + R8]	# ubyte
07c   	movzbl  R9, [RDI + #18 + R8]	# ubyte
082   	sall    RAX, #24
085   	sall    R9, #16
089   	orl     RAX, R9	# int
08c   	sall    R11, #8
090   	orl     RAX, R11	# int
093   	orl     RAX, R10	# int
096
096   B5: #	B6 <- B60 B4  Freq: 44884.3
096   	movl    RBX, [rsp + #4]	# spill
09a   	movq    RBP, [rsp + #8]	# spill
09f   	movq    R8, [rsp + #16]	# spill
0a4   	movq    R9, [rsp + #24]	# spill
0a9   	movq    RCX, [rsp + #32]	# spill
0a9
0ae   B6: #	B7 <- B5 B49 B48  Freq: 48513
0ae   	movl    [R8], RAX	# int ! Field: DeserBenchmark$ByteBufferRunnable.v32
0b1   	addl    RBX, #5	# int
0b4
0b4   B7: #	B8 <- B27 B6  Freq: 96819.1
0b4   	incl    RBX	# int
0b6   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # DeserBenchmark$ByteBufferRunnable::run @ bci:70  L[0]=RBP L[1]=rsp + #0 L[2]=RBX L[3]=_
        # OopMap{r8=Derived_oop_rbp r9=Derived_oop_rbp rcx=Derived_oop_rbp rbp=Oop off=182}
0bc
0bc   B8: #	B53 B9 <- B3 B69 B7 	Loop: B8-B7 inner  Freq: 96820.1
0bc   	cmpl    RBX, [RSP + #0 (32-bit)]
0bf   	jge     B53  P=0.000000 C=54266.000000
0bf
0c5   B9: #	B50 B10 <- B8  Freq: 96820
0c5   	testq   RBP, RBP	# ptr
0c8   	je     B50  P=0.000001 C=-1.000000
0c8
0ce   B10: #	B71 B11 <- B9  Freq: 96819.9
0ce   	movl    RAX, [R9]	# compressed ptr ! Field: DeserBenchmark$ByteBufferRunnable.src
0d1   	movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
0d5   	NullCheck RAX
0d5
0d5   B11: #	B36 B12 <- B10  Freq: 96819.8
0d5   	decode_heap_oop_not_null R13,RAX
0d8   	cmpl    R11, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd90000a3e8:Constant:exact *	# compressed klass ptr
0df   	jne,u  B36  P=0.075475 C=-1.000000
0df
0e5   B12: #	B51 B13 <- B11  Freq: 89512.4
0e5   	movq    RDX, R13	# spill
0e8   	# checkcastPP of RDX
0e8   	movl    RDI, [RDX + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
0eb   	testl   RBX, RBX
0ed   	jl     B51  P=0.000001 C=-1.000000
0ed
0f3   B13: #	B51 B14 <- B12  Freq: 89512.3
0f3   	movl    R10, [RDX + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
0f7   	cmpl    RBX, R10
0fa   	jge     B51  P=0.000001 C=-1.000000
0fa
100   B14: #	B72 B15 <- B13  Freq: 89512.2
100   	movl    R10, RBX	# spill
103   	addl    R10, [RDX + #36 (8-bit)]	# int
107   	movl    RSI, [RDI + #12 (8-bit)]	# range
10a   	NullCheck RDI
10a
10a   B15: #	B52 B16 <- B14  Freq: 89512.1
10a   	cmpl    R10, RSI	# unsigned
10d   	jnb,u  B52  P=0.000001 C=-1.000000
10d
113   B16: #	B17 <- B15  Freq: 89512
113   	movslq  R10, R10	# i2l
116   	movsbl  R10, [RDI + #16 + R10]	# byte
116
11c   B17: #	B28 B18 <- B16 B39  Freq: 96819.4
11c   	movl    R14, RBX	# spill
11f   	incl    R14	# int
122   	movslq  RDI, R14	# i2l
125   	testl   R10, R10
128   	jl     B28  P=0.501069 C=54270.000000
128
12e   B18: #	B40 B19 <- B17  Freq: 48306.2
12e   	cmpl    R11, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd90000a3e8:Constant:exact *	# compressed klass ptr
135   	jne,u  B40  P=0.076153 C=-1.000000
135
13b   B19: #	B58 B20 <- B18  Freq: 44627.6
13b   	# checkcastPP of R13
13b   	testl   R14, R14
13e   	jl     B58  P=0.000000 C=14848.000000
13e
144   B20: #	B58 B21 <- B19  Freq: 44627.6
144   	movl    R11, [R13 + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
148   	subl    R11, RBX	# int
14b   	decl    R11	# int
14e   	cmpl    R11, #8
152   	jl     B58  P=0.000000 C=14848.000000
152
158   B21: #	B61 B22 <- B20  Freq: 44627.5
158   	movl    RDI, RBX	# spill
15a   	addl    RDI, [R13 + #36 (8-bit)]	# int
15e   	movzbl  R11, [R13 + #41 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.bigEndian
163   	movl    RDX, RDI	# spill
165   	incl    RDX	# int
167   	testl   R11, R11
16a   	je     B61  P=0.000000 C=5376.000000
16a
170   B22: #	B74 B23 <- B21  Freq: 44627.5
170   	movl    R10, [R13 + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
174   	movl    R11, [R10 + #12 (8-bit)]	# range
178   	NullCheck R10
178
178   B23: #	B55 B24 <- B22  Freq: 44627.5
178   	cmpl    RDX, R11	# unsigned
17b   	jnb,u  B55  P=0.000001 C=-1.000000
17b
181   B24: #	B56 B25 <- B23  Freq: 44627.4
181   	movq    [rsp + #32], RCX	# spill
186   	movq    [rsp + #24], R9	# spill
18b   	movq    [rsp + #16], R8	# spill
190   	movq    [rsp + #8], RBP	# spill
195   	movl    [rsp + #4], RBX	# spill
199   	movslq  RSI, RDI	# i2l
19c   	movsbl  R9, [R10 + #17 + RSI]	# byte
1a2   	movl    RCX, RDI	# spill
1a4   	addl    RCX, #8	# int
1a7   	cmpl    RCX, R11	# unsigned
1aa   	jnb,u  B56  P=0.000001 C=-1.000000
1aa
1b0   B25: #	B26 <- B24  Freq: 44627.4
1b0   	movzbq  RBP, [R10 + #24 + RSI]	# ubyte -> long
1b6   	movsbl  R8, [R10 + #23 + RSI]	# byte
1bc   	movsbl  RBX, [R10 + #18 + RSI]	# byte
1c2   	movsbl  RCX, [R10 + #22 + RSI]	# byte
1c8   	movsbl  RDX, [R10 + #21 + RSI]	# byte
1ce   	movsbl  RDI, [R10 + #20 + RSI]	# byte
1d4   	movsbl  R11, [R10 + #19 + RSI]	# byte
1da   	movslq  RAX, R9	# i2l
1dd   	movzbl  R10, R11	# int & 0xFF -> long
1e1   	salq    RAX, #56
1e5   	salq    R10, #40
1e9   	movzbl  R11, RDI	# int & 0xFF -> long
1ed   	movzbl  R9, RDX	# int & 0xFF -> long
1f1   	salq    R11, #32
1f5   	salq    R9, #24
1f9   	movzbl  RCX, RCX	# int & 0xFF -> long
1fc   	movzbl  RBX, RBX	# int & 0xFF -> long
1ff   	salq    RCX, #16
203   	salq    RBX, #48
207   	orq     RAX, RBX	# long
20a   	orq     RAX, R10	# long
20d   	orq     RAX, R11	# long
210   	orq     RAX, R9	# long
213   	orq     RAX, RCX	# long
216   	movzbl  R10, R8	# int & 0xFF -> long
21a   	salq    R10, #8
21e   	orq     RAX, R10	# long
221   	orq     RAX, RBP	# long
224
224   B26: #	B27 <- B62 B25  Freq: 44627.4
224   	movl    RBX, [rsp + #4]	# spill
228   	movq    RBP, [rsp + #8]	# spill
22d   	movq    R8, [rsp + #16]	# spill
232   	movq    R9, [rsp + #24]	# spill
237   	movq    RCX, [rsp + #32]	# spill
237
23c   B27: #	B7 <- B26 B44 B43  Freq: 48306.1
23c   	movq    [RCX], RAX	# long ! Field: DeserBenchmark$ByteBufferRunnable.v64
23f   	addl    RBX, #9	# int
242   	jmp     B7
242
247   B28: #	B45 B29 <- B17  Freq: 48513.2
247   	cmpl    R11, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd90000a3e8:Constant:exact *	# compressed klass ptr
24e   	jne,u  B45  P=0.074799 C=-1.000000
24e
254   B29: #	B57 B30 <- B28  Freq: 44884.5
254   	# checkcastPP of R13
254   	testl   R14, R14
257   	jl     B57  P=0.000000 C=14848.000000
257
25d   B30: #	B57 B31 <- B29  Freq: 44884.5
25d   	movl    R11, [R13 + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
261   	subl    R11, RBX	# int
264   	decl    R11	# int
267   	cmpl    R11, #4
26b   	jl     B57  P=0.000000 C=14848.000000
26b
271   B31: #	B59 B32 <- B30  Freq: 44884.4
271   	movl    R11, RBX	# spill
274   	addl    R11, [R13 + #36 (8-bit)]	# int
278   	movzbl  R10, [R13 + #41 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.bigEndian
27d   	movl    RDX, R11	# spill
280   	incl    RDX	# int
282   	testl   R10, R10
285   	je     B59  P=0.000000 C=5376.000000
285
28b   B32: #	B73 B33 <- B31  Freq: 44884.4
28b   	movl    RDI, [R13 + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
28f   	movl    R10, [RDI + #12 (8-bit)]	# range
293   	NullCheck RDI
293
293   B33: #	B54 B34 <- B32  Freq: 44884.4
293   	cmpl    RDX, R10	# unsigned
296   	jnb,u  B54  P=0.000001 C=-1.000000
296
29c   B34: #	B4 B35 <- B33  Freq: 44884.3
29c   	movq    [rsp + #32], RCX	# spill
2a1   	movq    [rsp + #24], R9	# spill
2a6   	movq    [rsp + #16], R8	# spill
2ab   	movq    [rsp + #8], RBP	# spill
2b0   	movl    [rsp + #4], RBX	# spill
2b4   	movslq  R8, R11	# i2l
2b7   	movsbl  RAX, [RDI + #17 + R8]	# byte
2bd   	movl    R9, R11	# spill
2c0   	addl    R9, #4	# int
2c4   	cmpl    R9, R10	# unsigned
2c7   	jb,u  B4  P=0.999999 C=-1.000000
2c7
2cd   B35: #	N903 <- B34  Freq: 0.0454803
2cd   	addl    R11, #2	# int
2d1   	movl    [rsp + #4], R14	# spill
2d6   	movq    [rsp + #16], R13	# spill
2db   	movl    [rsp + #24], RDX	# spill
2df   	movl    [rsp + #28], RAX	# spill
2e3   	movl    [rsp + #32], RDI	# spill
2e7   	movl    [rsp + #36], R11	# spill
2ec   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
2f3   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #36
        # java.nio.Bits::getIntB @ bci:9  L[0]=rsp + #16 L[1]=rsp + #24 STK[0]=rsp + #28
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [16]=Oop [32]=NarrowOop off=760}
2f8   	int3	# ShouldNotReachHere
2f8
2fd   B36: #	B64 B37 <- B11  Freq: 7307.43
2fd   	cmpl    R11, narrowklass: precise klass java/nio/DirectByteBuffer: 0x00007fd90000a4b8:Constant:exact *	# compressed klass ptr
304   	jne,u  B64  P=0.000001 C=-1.000000
304
30a   B37: #	B63 B38 <- B36  Freq: 7307.42
30a   	movq    R10, R13	# spill
30d   	# checkcastPP of R10
30d   	testl   RBX, RBX
30f   	jl     B63  P=0.000001 C=-1.000000
30f
315   B38: #	B63 B39 <- B37  Freq: 7307.41
315   	movl    RDI, [R10 + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
319   	cmpl    RBX, RDI
31b   	jge     B63  P=0.000001 C=-1.000000
31b
321   B39: #	B17 <- B38  Freq: 7307.41
321   	movq    R10, [R10 + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
325   	movslq  RDI, RBX	# i2l
328   	movq    R10, R10	# long->ptr
328   	movsbl  R10, [R10 + RDI]	# byte
32d   	jmp     B17
32d
332   B40: #	B65 B41 <- B18  Freq: 3678.68
332   	cmpl    R11, narrowklass: precise klass java/nio/DirectByteBuffer: 0x00007fd90000a4b8:Constant:exact *	# compressed klass ptr
339   	jne,u  B65  P=0.000001 C=-1.000000
339
33f   B41: #	B67 B42 <- B40  Freq: 3678.67
33f   	# checkcastPP of R13
33f   	testl   R14, R14
342   	jl     B67  P=0.000000 C=14848.000000
342
348   B42: #	B67 B43 <- B41  Freq: 3678.67
348   	movl    R11, [R13 + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
34c   	subl    R11, RBX	# int
34f   	decl    R11	# int
352   	cmpl    R11, #8
356   	jl     B67  P=0.000000 C=14848.000000
356
35c   B43: #	B27 B44 <- B42  Freq: 3678.67
35c   	movq    R11, [R13 + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
360   	movzbl  R10, [R13 + #42 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.nativeByteOrder
365   	movq    R11, R11	# long->ptr
365   	movq    RAX, [R11 + RDI]	# long
369   	testl   R10, R10
36c   	jne     B27  P=0.000000 C=2062.000000
36c
372   B44: #	B27 <- B43  Freq: 3678.67
372   	bswapq  RAX
375   	jmp     B27
375
37a   B45: #	B66 B46 <- B28  Freq: 3628.72
37a   	cmpl    R11, narrowklass: precise klass java/nio/DirectByteBuffer: 0x00007fd90000a4b8:Constant:exact *	# compressed klass ptr
381   	jne,u  B66  P=0.000001 C=-1.000000
381
387   B46: #	B68 B47 <- B45  Freq: 3628.72
387   	# checkcastPP of R13
387   	testl   R14, R14
38a   	jl     B68  P=0.000000 C=14848.000000
38a
390   B47: #	B68 B48 <- B46  Freq: 3628.72
390   	movl    R10, [R13 + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
394   	subl    R10, RBX	# int
397   	decl    R10	# int
39a   	cmpl    R10, #4
39e   	jl     B68  P=0.000000 C=14848.000000
39e
3a4   B48: #	B6 B49 <- B47  Freq: 3628.71
3a4   	movq    R11, [R13 + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
3a8   	movzbl  R10, [R13 + #42 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.nativeByteOrder
3ad   	movq    R11, R11	# long->ptr
3ad   	movl    RAX, [R11 + RDI]	# int
3b1   	testl   R10, R10
3b4   	jne     B6  P=0.000000 C=2034.000000
3b4
3ba   B49: #	B6 <- B48  Freq: 3628.71
3ba   	bswapl  RAX
3bc   	jmp     B6
3bc
3c1   B50: #	N903 <- B9  Freq: 0.0981057
3c1   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
3c7   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:19  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=972}
3cc   	int3	# ShouldNotReachHere
3cc
3d1   B51: #	N903 <- B13 B12  Freq: 0.180213
3d1   	movl    RSI, #26	# int
3d6   	movl    [rsp + #4], RBX	# spill
3da   	movl    [rsp + #8], RDI	# spill
3de   	movq    [rsp + #16], RDX	# spill
3e3   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:12  L[0]=_ L[1]=_
        # java.nio.HeapByteBuffer::get @ bci:7  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #16
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_
        # OopMap{rbp=Oop [8]=NarrowOop [16]=Oop off=1000}
3e8   	int3	# ShouldNotReachHere
3e8
3ed   B52: #	N903 <- B15  Freq: 0.0907008
3ed   	movl    RSI, #-28	# int
3f2   	movl    [rsp + #4], RBX	# spill
3f6   	movl    [rsp + #8], RDI	# spill
3fa   	movl    [rsp + #12], R10	# spill
3ff   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #12
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_
        # OopMap{rbp=Oop [8]=NarrowOop off=1028}
404   	int3	# ShouldNotReachHere
404
409   B53: #	N903 <- B8  Freq: 0.0461674
409   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

414   	ret
414
415   B54: #	N903 <- B33  Freq: 0.0454804
415   	movl    [rsp + #4], R14	# spill
41a   	movq    [rsp + #16], R13	# spill
41f   	movl    [rsp + #28], RDI	# spill
423   	movl    [rsp + #32], RDX	# spill
427   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
42f   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # java.nio.Bits::getIntB @ bci:2  L[0]=rsp + #16 L[1]=rsp + #32
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [16]=Oop [28]=NarrowOop off=1076}
434   	int3	# ShouldNotReachHere
434
439   B55: #	N903 <- B23  Freq: 0.0452201
439   	movl    [rsp + #4], R14	# spill
43e   	movq    [rsp + #16], R13	# spill
443   	movl    [rsp + #28], R10	# spill
448   	movl    [rsp + #32], RDX	# spill
44c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
453   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # java.nio.Bits::getLongB @ bci:2  L[0]=rsp + #16 L[1]=rsp + #32
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [16]=Oop [28]=NarrowOop off=1112}
458   	int3	# ShouldNotReachHere
458
45d   B56: #	N903 <- B24  Freq: 0.04522
45d   	addl    RDI, #2	# int
460   	movl    [rsp + #4], R14	# spill
465   	movq    [rsp + #16], R13	# spill
46a   	movl    [rsp + #24], RDX	# spill
46e   	movl    [rsp + #28], R9	# spill
473   	movl    [rsp + #32], R10	# spill
478   	movl    [rsp + #36], RDI	# spill
47c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
483   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #36
        # java.nio.Bits::getLongB @ bci:9  L[0]=rsp + #16 L[1]=rsp + #24 STK[0]=rsp + #28
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [16]=Oop [32]=NarrowOop off=1160}
488   	int3	# ShouldNotReachHere
488
48d   B57: #	N903 <- B30 B29  Freq: 0.0438448
48d   	movl    [rsp + #4], R14	# spill
492   	movq    [rsp + #24], R13	# spill
497   	movq    [rsp + #32], R13	# spill
49c   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
4a3   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:5  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [24]=Oop [32]=Oop off=1192}
4a8   	int3	# ShouldNotReachHere
4a8
4ad   B58: #	N903 <- B20 B19  Freq: 0.0435939
4ad   	movl    [rsp + #4], R14	# spill
4b2   	movq    [rsp + #24], R13	# spill
4b7   	movq    [rsp + #32], R13	# spill
4bc   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
4c3   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:6  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [24]=Oop [32]=Oop off=1224}
4c8   	int3	# ShouldNotReachHere
4c8
4cd   B59: #	B75 B60 <- B31  Freq: 0.0214026
4cd   	movq    [rsp + #32], RCX	# spill
4d2   	movq    [rsp + #24], R9	# spill
4d7   	movq    [rsp + #16], R8	# spill
4dc   	movq    [rsp + #8], RBP	# spill
4e1   	movl    [rsp + #4], RBX	# spill
4e5   	movl    RBP, R14	# spill
4e8   	movq    RSI, R13	# spill
4eb   	call,static  java.nio.Bits::getIntL
        # java.nio.Bits::getInt @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=RBP L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Derived_oop_[8] [24]=Derived_oop_[8] [32]=Derived_oop_[8] off=1264}
4f0
4f0   B60: #	B5 <- B59  Freq: 0.0214021
        # Block is sole successor of call
4f0   	jmp     B5
4f0
4f5   B61: #	B76 B62 <- B21  Freq: 0.0212801
4f5   	movq    [rsp + #32], RCX	# spill
4fa   	movq    [rsp + #24], R9	# spill
4ff   	movq    [rsp + #16], R8	# spill
504   	movq    [rsp + #8], RBP	# spill
509   	movl    [rsp + #4], RBX	# spill
50d   	movl    RBP, R14	# spill
510   	movq    RSI, R13	# spill
513   	call,static  java.nio.Bits::getLongL
        # java.nio.Bits::getLong @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=RBP L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Derived_oop_[8] [24]=Derived_oop_[8] [32]=Derived_oop_[8] off=1304}
518
518   B62: #	B26 <- B61  Freq: 0.0212796
        # Block is sole successor of call
518   	jmp     B26
518
51d   B63: #	N903 <- B38 B37  Freq: 0.0147119
51d   	movl    RSI, #26	# int
522   	movl    [rsp + #4], RBX	# spill
526   	movq    [rsp + #8], R10	# spill
52b   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:12  L[0]=_ L[1]=_
        # java.nio.DirectByteBuffer::get @ bci:6  L[0]=_ L[1]=_ STK[0]=#Ptr0x00007fd9000a50b8 STK[1]=rsp + #8
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_
        # OopMap{rbp=Oop [8]=Oop off=1328}
530   	int3	# ShouldNotReachHere
530
535   B64: #	N903 <- B36  Freq: 0.00730743
535   	movl    RSI, #-58	# int
53a   	movl    [rsp + #8], RAX	# spill
53e   	movl    [rsp + #12], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
543   	call,static  wrapper for: uncommon_trap(reason='bimorphic' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ STK[0]=rsp + #8 STK[1]=rsp + #12
        # OopMap{rbp=Oop [8]=NarrowOop off=1352}
548   	int3	# ShouldNotReachHere
548
54d   B65: #	N903 <- B40  Freq: 0.00367868
54d   	movl    RSI, #-58	# int
552   	movl    [rsp + #16], RAX	# spill
556   	movl    [rsp + #20], R14	# spill
55b   	call,static  wrapper for: uncommon_trap(reason='bimorphic' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #20 L[3]=_ STK[0]=RBP STK[1]=rsp + #16 STK[2]=rsp + #20
        # OopMap{rbp=Oop [16]=NarrowOop off=1376}
560   	int3	# ShouldNotReachHere
560
565   B66: #	N903 <- B45  Freq: 0.00362872
565   	movl    RSI, #-58	# int
56a   	movl    [rsp + #16], RAX	# spill
56e   	movl    [rsp + #20], R14	# spill
573   	call,static  wrapper for: uncommon_trap(reason='bimorphic' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #20 L[3]=_ STK[0]=RBP STK[1]=rsp + #16 STK[2]=rsp + #20
        # OopMap{rbp=Oop [16]=NarrowOop off=1400}
578   	int3	# ShouldNotReachHere
578
57d   B67: #	N903 <- B42 B41  Freq: 0.00359346
57d   	movl    [rsp + #4], R14	# spill
582   	movq    [rsp + #24], R13	# spill
587   	movl    RSI, #26	# int
      	nop 	# 3 bytes pad for loops and calls
58f   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.DirectByteBuffer::getLong @ bci:6  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [24]=Oop off=1428}
594   	int3	# ShouldNotReachHere
594
599   B68: #	N903 <- B47 B46  Freq: 0.00354467
599   	movl    [rsp + #4], R14	# spill
59e   	movq    [rsp + #24], R13	# spill
5a3   	movl    RSI, #26	# int
      	nop 	# 3 bytes pad for loops and calls
5ab   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.DirectByteBuffer::getInt @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=RBP
        # OopMap{rbp=Oop [24]=Oop off=1456}
5b0   	int3	# ShouldNotReachHere
5b0
5b5   B69: #	B8 <- B1  Freq: 0.000999987
5b5   	xorl    RBP, RBP	# ptr
5b7   	movl    R8, NULL+12	# ptr (positive 32-bit)
5bd   	movl    R9, NULL+24	# ptr (positive 32-bit)
5c3   	movl    RCX, NULL+16	# ptr (positive 32-bit)
5c8   	jmp     B8
5c8
5cd   B70: #	N903 <- B2  Freq: 9.99e-07
5cd   	movl    RSI, #-99	# int
5d2   	movl    [rsp + #4], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
5d7   	call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:13  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_
        # OopMap{rbp=Oop off=1500}
5dc   	int3	# ShouldNotReachHere
5dc
5e1   B71: #	N903 <- B10  Freq: 0.0981056
5e1   	movl    RSI, #-10	# int
5e6   	movl    RBP, RBX	# spill
      	nop 	# 3 bytes pad for loops and calls
5eb   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1520}
5f0   	int3	# ShouldNotReachHere
5f0
5f5   B72: #	N903 <- B14  Freq: 0.0907009
5f5   	movl    RSI, #-10	# int
5fa   	movl    RBP, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
5ff   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap{off=1540}
604   	int3	# ShouldNotReachHere
604
609   B73: #	N903 <- B32  Freq: 0.0454804
609   	movl    RSI, #-10	# int
60e   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
613   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # java.nio.Bits::getIntB @ bci:2  L[0]=_ L[1]=_
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1560}
618   	int3	# ShouldNotReachHere
618
61d   B74: #	N903 <- B22  Freq: 0.0452201
61d   	movl    RSI, #-10	# int
622   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
627   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # java.nio.Bits::getLongB @ bci:2  L[0]=_ L[1]=_
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1580}
62c   	int3	# ShouldNotReachHere
62c
631   B75: #	B77 <- B59  Freq: 2.14026e-07
631   	# exception oop is in rax; no code emitted
631   	movq    RSI, RAX	# spill
634   	jmp,s   B77
634
636   B76: #	B77 <- B61  Freq: 2.12801e-07
636   	# exception oop is in rax; no code emitted
636   	movq    RSI, RAX	# spill
636
639   B77: #	N903 <- B75 B76  Freq: 4.26826e-07
639   	addq    rsp, 64	# Destroy frame
	popq   rbp

63e   	jmp     rethrow_stub
63e

Uncommon trap occurred in DeserBenchmark$ByteBufferRunnable::run (@0x00007fd94922ccac) thread=140571634190080 reason=class_check action=maybe_recompile unloaded_class_index=-1
   3045   72       4       DeserBenchmark$ByteBufferRunnable::run (74 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Compiled frame (sp=0x00007fd962523460 unextended sp=0x00007fd962523460, fp=0x0000000000000000, real_fp=0x00007fd9625234b0, pc=0x00007fd94922ccac)
     nmethod   3045   72       4       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523460, unextended_sp=0x00007fd962523460, fp=0x0000000000000000, pc=0x00007fd94922ccac)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:86) - invokevirtual @ bci 23 
     Created vframeArray 0x00007fd9581c00f8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581c00f8 mode 2
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - invokevirtual @ bci 23 sp = 0x00007fd962523438
   3045   93    b  3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)
                              @ 4   java.nio.Buffer::limit (5 bytes)
                              @ 23   java.nio.ByteBuffer::get (0 bytes)   no static binding
                              @ 40   java.nio.ByteBuffer::getInt (0 bytes)   no static binding
                              @ 58   java.nio.ByteBuffer::getLong (0 bytes)   no static binding
   3060   94    b  4       java.nio.DirectByteBuffer::get (16 bytes)
                              @ 6   java.nio.Buffer::checkIndex (22 bytes)   inline (hot)
                              @ 9   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                              @ 12   sun.misc.Unsafe::getByte (0 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd94884ab18
 - method holder:     'java/nio/DirectByteBuffer'
 - constants:         0x00007fd948848b30 constant pool [545] {0x00007fd948848b30} for 'java/nio/DirectByteBuffer' cache=0x00007fd94884eed8
 - access:            0x81000001  public 
 - name:              'get'
 - signature:         '(I)B'
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      10
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd94922e1c0
 - code size:         16
 - code start:        0x00007fd94884aae8
 - code end (excl):   0x00007fd94884aaf8
 - method data:       0x00007fd94895cdb0
 - checked ex length: 0
 - linenumber start:  0x00007fd94884aaf8
 - localvar length:   2
 - localvar start:    0x00007fd94884aafe
 - compiled code: nmethod   3062   81       3       java.nio.DirectByteBuffer::get (16 bytes)
#
#  byte ( java/nio/DirectByteBuffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/DirectByteBuffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N45: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B4 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	testl   RDX, RDX
02e   	jl,s   B4  P=0.000001 C=-1.000000
02e
030   B2: #	B4 B3 <- B1  Freq: 0.999999
030   	movl    R11, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
034   	cmpl    RDX, R11
037   	jge,s   B4  P=0.000001 C=-1.000000
037
039   B3: #	N45 <- B2  Freq: 0.999998
039   	movq    R10, [RSI + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
03d   	movslq  R11, RDX	# i2l
040   	movq    R10, R10	# long->ptr
040   	movsbl  RAX, [R10 + R11]	# byte
045   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

050   	ret
050
051   B4: #	N45 <- B2 B1  Freq: 2.01328e-06
051   	movq    RBP, RSI	# spill
054   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
05b   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:12  L[0]=_ L[1]=_
        # java.nio.DirectByteBuffer::get @ bci:6  L[0]=_ L[1]=_ STK[0]=#Ptr0x00007fd91412dfa8 STK[1]=RBP
        # OopMap{rbp=Oop off=96}
060   	int3	# ShouldNotReachHere
060

   3064   81       3       java.nio.DirectByteBuffer::get (16 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234b0, pc=0x00007fd949233bb9)
     nmethod   3064   93       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949233bb9)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:85) - goto @ bci 70 
     Created vframeArray 0x00007fd9581b78c8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581b78c8 mode 0
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - goto @ bci 70 sp = 0x00007fd962523448
   3078   95    b  4       java.nio.DirectByteBuffer::getLong (39 bytes)
                              @ 10   sun.misc.Unsafe::getLong (0 bytes)   (intrinsic)
                              @ 26   java.nio.Bits::swap (5 bytes)   inline (hot)
                                @ 1   java.lang.Long::reverseBytes (46 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd94884ca30
 - method holder:     'java/nio/DirectByteBuffer'
 - constants:         0x00007fd948848b30 constant pool [545] {0x00007fd948848b30} for 'java/nio/DirectByteBuffer' cache=0x00007fd94884eed8
 - access:            0x81000002  private 
 - name:              'getLong'
 - signature:         '(J)J'
 - max stack:         4
 - max locals:        5
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      71
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8168: 0xbbe00000 i2c: 0x00007fd94910e260 c2i: 0x00007fd94910e378 c2iUV: 0x00007fd94910e34b
 - compiled entry     0x00007fd949230c60
 - code size:         39
 - code start:        0x00007fd94884c9d8
 - code end (excl):   0x00007fd94884c9ff
 - method data:       0x00007fd94895d3c0
 - checked ex length: 0
 - linenumber start:  0x00007fd94884c9ff
 - localvar length:   3
 - localvar start:    0x00007fd94884ca0a
 - compiled code: nmethod   3080   89       3       java.nio.DirectByteBuffer::getLong (39 bytes)
#
#  long/half ( java/nio/DirectByteBuffer:NotNull *, long, half )
#
#r018 rsi:rsi   : parm 0: java/nio/DirectByteBuffer:NotNull *
#r016 rdx:rdx   : parm 1: long
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N30: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	subq    rsp, #24	# Create frame
	movq    [rsp + #16], rbp	# Save rbp

02c   	movzbl  R11, [RSI + #42 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.nativeByteOrder
031   	movq    R10, RDX	# long->ptr
034   	movq    RAX, [R10]	# long
037   	testl   R11, R11
03a   	jne,s   B3  P=0.000000 C=5374.000000
03a
03c   B2: #	B3 <- B1  Freq: 1
03c   	bswapq  RAX
03c
03f   B3: #	N30 <- B2 B1  Freq: 1
03f   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

04a   	ret
04a

   3081   89       3       java.nio.DirectByteBuffer::getLong (39 bytes)   made not entrant
   3081   96    b  4       java.nio.DirectByteBuffer::getLong (16 bytes)
                              @ 6   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                              @ 9   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                              @ 12   java.nio.DirectByteBuffer::getLong (39 bytes)   inline (hot)
                                @ 10   sun.misc.Unsafe::getLong (0 bytes)   (intrinsic)
                                @ 26   java.nio.Bits::swap (5 bytes)   inline (hot)
                                  @ 1   java.lang.Long::reverseBytes (46 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd94884cba8
 - method holder:     'java/nio/DirectByteBuffer'
 - constants:         0x00007fd948848b30 constant pool [545] {0x00007fd948848b30} for 'java/nio/DirectByteBuffer' cache=0x00007fd94884eed8
 - access:            0x81000001  public 
 - name:              'getLong'
 - signature:         '(I)J'
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      32
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd94922fbc0
 - code size:         16
 - code start:        0x00007fd94884cb78
 - code end (excl):   0x00007fd94884cb88
 - method data:       0x00007fd94895d2b8
 - checked ex length: 0
 - linenumber start:  0x00007fd94884cb88
 - localvar length:   2
 - localvar start:    0x00007fd94884cb8e
 - compiled code: nmethod   3084   86       3       java.nio.DirectByteBuffer::getLong (16 bytes)
#
#  long/half ( java/nio/DirectByteBuffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/DirectByteBuffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N59: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B6 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	testl   RDX, RDX
02e   	jl,s   B6  P=0.000000 C=21488.000000
02e
030   B2: #	B6 B3 <- B1  Freq: 1
030   	movl    R11, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
034   	subl    R11, RDX	# int
037   	cmpl    R11, #8
03b   	jl,s   B6  P=0.000000 C=21488.000000
03b
03d   B3: #	B5 B4 <- B2  Freq: 0.999999
03d   	movq    R10, [RSI + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
041   	movzbl  R11, [RSI + #42 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.nativeByteOrder
046   	movslq  R8, RDX	# i2l
049   	movq    R10, R10	# long->ptr
049   	movq    RAX, [R10 + R8]	# long
04d   	testl   R11, R11
050   	jne,s   B5  P=0.000000 C=5375.000000
050
052   B4: #	B5 <- B3  Freq: 0.999999
052   	bswapq  RAX
052
055   B5: #	N59 <- B4 B3  Freq: 0.999999
055   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

060   	ret
060
061   B6: #	N59 <- B2 B1  Freq: 9.76837e-07
061   	movq    [rsp + #0], RSI	# spill
065   	movl    RSI, #26	# int
      	nop 	# 1 bytes pad for loops and calls
06b   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.DirectByteBuffer::getLong @ bci:6  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=rsp + #0
        # OopMap{[0]=Oop off=112}
070   	int3	# ShouldNotReachHere
070

   3085   86       3       java.nio.DirectByteBuffer::getLong (16 bytes)   made not entrant
   3086   97    b  4       java.nio.DirectByteBuffer::getInt (39 bytes)
                              @ 10   sun.misc.Unsafe::getInt (0 bytes)   (intrinsic)
                              @ 26   java.nio.Bits::swap (5 bytes)   inline (hot)
                                @ 1   java.lang.Integer::reverseBytes (26 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd94884c3c0
 - method holder:     'java/nio/DirectByteBuffer'
 - constants:         0x00007fd948848b30 constant pool [545] {0x00007fd948848b30} for 'java/nio/DirectByteBuffer' cache=0x00007fd94884eed8
 - access:            0x81000002  private 
 - name:              'getInt'
 - signature:         '(J)I'
 - max stack:         4
 - max locals:        4
 - size of params:    3
 - method size:       12
 - highest level:     3
 - vtable index:      69
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8168: 0xbbe00000 i2c: 0x00007fd94910e260 c2i: 0x00007fd94910e378 c2iUV: 0x00007fd94910e34b
 - compiled entry     0x00007fd9492306e0
 - code size:         39
 - code start:        0x00007fd94884c368
 - code end (excl):   0x00007fd94884c38f
 - method data:       0x00007fd94895cfe0
 - checked ex length: 0
 - linenumber start:  0x00007fd94884c38f
 - localvar length:   3
 - localvar start:    0x00007fd94884c39a
 - compiled code: nmethod   3087   88       3       java.nio.DirectByteBuffer::getInt (39 bytes)
#
#  int ( java/nio/DirectByteBuffer:NotNull *, long, half )
#
#r018 rsi:rsi   : parm 0: java/nio/DirectByteBuffer:NotNull *
#r016 rdx:rdx   : parm 1: long
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N30: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	subq    rsp, #24	# Create frame
	movq    [rsp + #16], rbp	# Save rbp

02c   	movzbl  R11, [RSI + #42 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.nativeByteOrder
031   	movq    R10, RDX	# long->ptr
034   	movl    RAX, [R10]	# int
037   	testl   R11, R11
03a   	jne,s   B3  P=0.000000 C=5374.000000
03a
03c   B2: #	B3 <- B1  Freq: 1
03c   	bswapl  RAX
03c
03e   B3: #	N30 <- B2 B1  Freq: 1
03e   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

049   	ret
049

   3088   88       3       java.nio.DirectByteBuffer::getInt (39 bytes)   made not entrant
   3088   98    b  4       java.nio.DirectByteBuffer::getInt (15 bytes)
                              @ 5   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                              @ 8   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                              @ 11   java.nio.DirectByteBuffer::getInt (39 bytes)   inline (hot)
                                @ 10   sun.misc.Unsafe::getInt (0 bytes)   (intrinsic)
                                @ 26   java.nio.Bits::swap (5 bytes)   inline (hot)
                                  @ 1   java.lang.Integer::reverseBytes (26 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd94884c538
 - method holder:     'java/nio/DirectByteBuffer'
 - constants:         0x00007fd948848b30 constant pool [545] {0x00007fd948848b30} for 'java/nio/DirectByteBuffer' cache=0x00007fd94884eed8
 - access:            0x81000001  public 
 - name:              'getInt'
 - signature:         '(I)I'
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       12
 - highest level:     3
 - vtable index:      29
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8218: 0xba000000 i2c: 0x00007fd94910e860 c2i: 0x00007fd94910e977 c2iUV: 0x00007fd94910e94a
 - compiled entry     0x00007fd94922e880
 - code size:         15
 - code start:        0x00007fd94884c508
 - code end (excl):   0x00007fd94884c517
 - method data:       0x00007fd94895ced8
 - checked ex length: 0
 - linenumber start:  0x00007fd94884c517
 - localvar length:   2
 - localvar start:    0x00007fd94884c51e
 - compiled code: nmethod   3091   82       3       java.nio.DirectByteBuffer::getInt (15 bytes)
#
#  int ( java/nio/DirectByteBuffer:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/nio/DirectByteBuffer:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N59: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B6 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	testl   RDX, RDX
02e   	jl,s   B6  P=0.000000 C=21503.000000
02e
030   B2: #	B6 B3 <- B1  Freq: 1
030   	movl    R10, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
034   	subl    R10, RDX	# int
037   	cmpl    R10, #4
03b   	jl,s   B6  P=0.000000 C=21503.000000
03b
03d   B3: #	B5 B4 <- B2  Freq: 0.999999
03d   	movq    R10, [RSI + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
041   	movzbl  R8, [RSI + #42 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.nativeByteOrder
046   	movslq  R11, RDX	# i2l
049   	movq    R10, R10	# long->ptr
049   	movl    RAX, [R10 + R11]	# int
04d   	testl   R8, R8
050   	jne,s   B5  P=0.000000 C=5375.000000
050
052   B4: #	B5 <- B3  Freq: 0.999999
052   	bswapl  RAX
052
054   B5: #	N59 <- B4 B3  Freq: 0.999999
054   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

05f   	ret
05f
060   B6: #	N59 <- B2 B1  Freq: 9.76837e-07
060   	movq    [rsp + #0], RSI	# spill
064   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
06b   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.DirectByteBuffer::getInt @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=rsp + #0
        # OopMap{[0]=Oop off=112}
070   	int3	# ShouldNotReachHere
070

   3093   82       3       java.nio.DirectByteBuffer::getInt (15 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234b0, pc=0x00007fd949233bb9)
     nmethod   3093   93       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949233bb9)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:85) - goto @ bci 70 
     Created vframeArray 0x00007fd9581c00f8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581c00f8 mode 0
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - goto @ bci 70 sp = 0x00007fd962523448
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234b0, pc=0x00007fd949233bb9)
     nmethod   3114   93       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949233bb9)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:85) - goto @ bci 70 
     Created vframeArray 0x00007fd9581b78c8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581b78c8 mode 0
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - goto @ bci 70 sp = 0x00007fd962523448
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234b0, pc=0x00007fd949233bb9)
     nmethod   3125   93       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949233bb9)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:85) - goto @ bci 70 
     Created vframeArray 0x00007fd9581c00f8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581c00f8 mode 0
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - goto @ bci 70 sp = 0x00007fd962523448
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234b0, pc=0x00007fd949233bb9)
     nmethod   3136   93       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949233bb9)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:85) - goto @ bci 70 
     Created vframeArray 0x00007fd9581b78c8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581b78c8 mode 0
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - goto @ bci 70 sp = 0x00007fd962523448
   3147   99    b  4       DeserBenchmark$ByteBufferRunnable::run (74 bytes)
                              @ 4   java.nio.Buffer::limit (5 bytes)   accessor
                              @ 23   java.nio.HeapByteBuffer::get (15 bytes)   inline (hot)
                              @ 23   java.nio.DirectByteBuffer::get (16 bytes)   inline (hot)
                               \-> TypeProfile (48123/98297 counts) = java/nio/DirectByteBuffer
                               \-> TypeProfile (50174/98297 counts) = java/nio/HeapByteBuffer
                                @ 6   java.nio.Buffer::checkIndex (22 bytes)   inline (hot)
                                @ 9   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                                @ 12   sun.misc.Unsafe::getByte (0 bytes)   (intrinsic)
                                @ 7   java.nio.Buffer::checkIndex (22 bytes)   inline (hot)
                                @ 10   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                              @ 40   java.nio.HeapByteBuffer::getInt (19 bytes)   inline (hot)
                              @ 40   java.nio.DirectByteBuffer::getInt (15 bytes)   inline (hot)
                               \-> TypeProfile (24271/49430 counts) = java/nio/DirectByteBuffer
                               \-> TypeProfile (25159/49430 counts) = java/nio/HeapByteBuffer
                                @ 5   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 8   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                                @ 11   java.nio.DirectByteBuffer::getInt (39 bytes)   inline (hot)
                                  @ 10   sun.misc.Unsafe::getInt (0 bytes)   (intrinsic)
                                  @ 26   java.nio.Bits::swap (5 bytes)   inline (hot)
                                    @ 1   java.lang.Integer::reverseBytes (26 bytes)   (intrinsic)
                                @ 5   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 8   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                                @ 15   java.nio.Bits::getInt (18 bytes)   inline (hot)
                                  @ 6   java.nio.Bits::getIntB (30 bytes)   inline (hot)
                                    @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 26   java.nio.Bits::makeInt (29 bytes)   inline (hot)
                                  @ 14   java.nio.Bits::getIntL (30 bytes)   never executed
                              @ 58   java.nio.HeapByteBuffer::getLong (20 bytes)   inline (hot)
                              @ 58   java.nio.DirectByteBuffer::getLong (16 bytes)   inline (hot)
                               \-> TypeProfile (23852/48867 counts) = java/nio/DirectByteBuffer
                               \-> TypeProfile (25015/48867 counts) = java/nio/HeapByteBuffer
                                @ 6   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 9   java.nio.DirectByteBuffer::ix (10 bytes)   inline (hot)
                                @ 12   java.nio.DirectByteBuffer::getLong (39 bytes)   inline (hot)
                                  @ 10   sun.misc.Unsafe::getLong (0 bytes)   (intrinsic)
                                  @ 26   java.nio.Bits::swap (5 bytes)   inline (hot)
                                    @ 1   java.lang.Long::reverseBytes (46 bytes)   (intrinsic)
                                @ 6   java.nio.Buffer::checkIndex (24 bytes)   inline (hot)
                                @ 9   java.nio.HeapByteBuffer::ix (7 bytes)   inline (hot)
                                @ 16   java.nio.Bits::getLong (18 bytes)   inline (hot)
                                  @ 6   java.nio.Bits::getLongB (60 bytes)   inline (hot)
                                    @ 2   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 9   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 16   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 23   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 30   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 37   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 45   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 53   java.nio.HeapByteBuffer::_get (7 bytes)   inline (hot)
                                    @ 56   java.nio.Bits::makeLong (77 bytes)   inline (hot)
                                  @ 14   java.nio.Bits::getLongL (60 bytes)   too big
{method}
 - this oop:          0x00007fd948a15438
 - method holder:     'DeserBenchmark$ByteBufferRunnable'
 - constants:         0x00007fd948a150b0 constant pool [52] {0x00007fd948a150b0} for 'DeserBenchmark$ByteBufferRunnable' cache=0x00007fd948a154c8
 - access:            0xc1000001  public 
 - name:              'run'
 - signature:         '()V'
 - max stack:         4
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     4
 - vtable index:      5
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8060: 0xb0000000 i2c: 0x00007fd949106ae0 c2i: 0x00007fd949106bf4 c2iUV: 0x00007fd949106bc7
 - compiled entry     0x00007fd949233380
 - code size:         74
 - code start:        0x00007fd948a153d8
 - code end (excl):   0x00007fd948a15422
 - method data:       0x00007fd948a15638
 - checked ex length: 0
 - linenumber start:  0x00007fd948a15422
 - localvar length:   0
 - compiled code: nmethod   3167   93       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)
#
#  void ( DeserBenchmark$ByteBufferRunnable:NotNull * )
#
#r018 rsi:rsi   : parm 0: DeserBenchmark$ByteBufferRunnable:NotNull *
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N758: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B65 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c   	movq    R14, RSI	# spill
02f   	movl    R9, [RSI + #24 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$ByteBufferRunnable.src
033   	testl   R9, R9	# compressed ptr
036   	je     B65  P=0.000001 C=-1.000000
036
03c   B2: #	B51 B3 <- B1  Freq: 0.999999
03c   	movl    RCX, #-9	# int
041   	addl    RCX, [R9 + #28 (8-bit)]	# int
045   	testl   RCX, RCX
047   	jle     B51  P=0.000000 C=98292.000000
047
04d   B3: #	B8 <- B2  Freq: 0.999999
04d   	xorl    RBP, RBP	# int
04f   	jmp,s   B8
04f
051   B4: #	B5 <- B45  top-of-loop Freq: 31812.8
051   	movzbl  R8, [R11 + #20 + RDI]	# ubyte
057   	movzbl  R9, [R11 + #19 + RDI]	# ubyte
05d   	movzbl  R10, [R11 + #18 + RDI]	# ubyte
063   	sall    RAX, #24
066   	sall    R10, #16
06a   	orl     RAX, R10	# int
06d   	sall    R9, #8
071   	orl     RAX, R9	# int
074   	orl     RAX, R8	# int
077
077   B5: #	B6 <- B61 B4 B39 B38  Freq: 62502.7
077   	movl    [R14 + #12 (8-bit)], RAX	# int ! Field: DeserBenchmark$ByteBufferRunnable.v32
07b   	addl    RBP, #5	# int
07e
07e   B6: #	B51 B7 <- B33 B5  Freq: 124294
07e   	incl    RBP	# int
080   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # DeserBenchmark$ByteBufferRunnable::run @ bci:70  L[0]=R14 L[1]=RCX L[2]=RBP L[3]=_
        # OopMap{r14=Oop off=128}
086   	cmpl    RBP, RCX
088   	jge     B51  P=0.000000 C=98296.000000
088
08e   B7: #	B8 <- B6  Freq: 124294
08e   	movl    R9, [R14 + #24 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$ByteBufferRunnable.src
08e
092   B8: #	B66 B9 <- B3 B7 	Loop: B8-B7 inner  Freq: 124295
092   	movl    RDI, [R9 + #8 (8-bit)]	# compressed klass ptr
096   	NullCheck R9
096
096   B9: #	B14 B10 <- B8  Freq: 124294
096   	decode_heap_oop_not_null RSI,R9
099   	cmpl    RDI, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd91405bc58:Constant:exact *	# compressed klass ptr
09f   	je,us  B14  P=0.510433 C=-1.000000
09f
0a1   B10: #	B50 B11 <- B9  Freq: 60850.5
0a1   	cmpl    RDI, narrowklass: precise klass java/nio/DirectByteBuffer: 0x00007fd91405bd28:Constant:exact *	# compressed klass ptr
0a7   	jne,u  B50  P=0.000001 C=-1.000000
0a7
0ad   B11: #	B49 B12 <- B10  Freq: 60850.4
0ad   	movq    R10, RSI	# spill
0b0   	# checkcastPP of R10
0b0   	testl   RBP, RBP
0b2   	jl     B49  P=0.000001 C=-1.000000
0b2
0b8   B12: #	B49 B13 <- B11  Freq: 60850.4
0b8   	movl    R11, [R10 + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
0bc   	cmpl    RBP, R11
0bf   	jge     B49  P=0.000001 C=-1.000000
0bf
0c5   B13: #	B19 <- B12  Freq: 60850.3
0c5   	movq    R10, [R10 + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
0c9   	movslq  R11, RBP	# i2l
0cc   	movq    R10, R10	# long->ptr
0cc   	movsbl  R10, [R10 + R11]	# byte
0d1   	jmp,s   B19
0d1
0d3   B14: #	B47 B15 <- B9  Freq: 63443.9
0d3   	movq    R8, RSI	# spill
0d6   	# checkcastPP of R8
0d6   	movl    R10, [R8 + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
0da   	testl   RBP, RBP
0dc   	jl     B47  P=0.000001 C=-1.000000
0dc
0e2   B15: #	B47 B16 <- B14  Freq: 63443.9
0e2   	movl    R11, [R8 + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
0e6   	cmpl    RBP, R11
0e9   	jge     B47  P=0.000001 C=-1.000000
0e9
0ef   B16: #	B67 B17 <- B15  Freq: 63443.8
0ef   	movl    R11, RBP	# spill
0f2   	addl    R11, [R8 + #36 (8-bit)]	# int
0f6   	movl    R8, [R10 + #12 (8-bit)]	# range
0fa   	NullCheck R10
0fa
0fa   B17: #	B48 B18 <- B16  Freq: 63443.7
0fa   	cmpl    R11, R8	# unsigned
0fd   	jnb,u  B48  P=0.000001 C=-1.000000
0fd
103   B18: #	B19 <- B17  Freq: 63443.7
103   	movslq  R11, R11	# i2l
106   	movsbl  R10, [R10 + #16 + R11]	# byte
106
10c   B19: #	B34 B20 <- B18 B13  Freq: 124294
10c   	movl    R8, RBP	# spill
10f   	incl    R8	# int
112   	movslq  RBX, R8	# i2l
115   	testl   R10, R10
118   	jl     B34  P=0.502864 C=98297.000000
118
11e   B20: #	B26 B21 <- B19  Freq: 61791
11e   	cmpl    RDI, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd91405bc58:Constant:exact *	# compressed klass ptr
124   	je,us  B26  P=0.511900 C=-1.000000
124
126   B21: #	B56 B22 <- B20  Freq: 30160.2
126   	cmpl    RDI, narrowklass: precise klass java/nio/DirectByteBuffer: 0x00007fd91405bd28:Constant:exact *	# compressed klass ptr
12c   	jne,u  B56  P=0.000001 C=-1.000000
12c
132   B22: #	B64 B23 <- B21  Freq: 30160.2
132   	# checkcastPP of RSI
132   	testl   R8, R8
135   	jl     B64  P=0.000000 C=21504.000000
135
13b   B23: #	B64 B24 <- B22  Freq: 30160.2
13b   	movl    R10, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
13f   	subl    R10, RBP	# int
142   	decl    R10	# int
145   	cmpl    R10, #8
149   	jl     B64  P=0.000000 C=21504.000000
149
14f   B24: #	B33 B25 <- B23  Freq: 30160.2
14f   	movq    R10, [RSI + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
153   	movzbl  R11, [RSI + #42 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.nativeByteOrder
158   	movq    R10, R10	# long->ptr
158   	movq    RAX, [R10 + RBX]	# long
15c   	testl   R11, R11
15f   	jne     B33  P=0.000000 C=5375.000000
15f
165   B25: #	B33 <- B24  Freq: 30160.2
165   	bswapq  RAX
168   	jmp     B33
168
16d   B26: #	B58 B27 <- B20  Freq: 31630.8
16d   	# checkcastPP of RSI
16d   	testl   R8, R8
170   	jl     B58  P=0.000000 C=21504.000000
170
176   B27: #	B58 B28 <- B26  Freq: 31630.8
176   	movl    R11, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
17a   	subl    R11, RBP	# int
17d   	decl    R11	# int
180   	cmpl    R11, #8
184   	jl     B58  P=0.000000 C=21504.000000
184
18a   B28: #	B62 B29 <- B27  Freq: 31630.8
18a   	movl    R10, RBP	# spill
18d   	addl    R10, [RSI + #36 (8-bit)]	# int
191   	movzbl  R11, [RSI + #41 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.bigEndian
196   	movl    RDX, R10	# spill
199   	incl    RDX	# int
19b   	testl   R11, R11
19e   	je     B62  P=0.000000 C=5376.000000
19e
1a4   B29: #	B69 B30 <- B28  Freq: 31630.8
1a4   	movl    RDI, [RSI + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
1a7   	movl    R11, [RDI + #12 (8-bit)]	# range
1ab   	NullCheck RDI
1ab
1ab   B30: #	B53 B31 <- B29  Freq: 31630.7
1ab   	cmpl    RDX, R11	# unsigned
1ae   	jnb,u  B53  P=0.000001 C=-1.000000
1ae
1b4   B31: #	B54 B32 <- B30  Freq: 31630.7
1b4   	movslq  RAX, R10	# i2l
1b7   	movsbl  RBX, [RDI + #17 + RAX]	# byte
1bc   	movl    R9, R10	# spill
1bf   	addl    R9, #8	# int
1c3   	cmpl    R9, R11	# unsigned
1c6   	jnb,u  B54  P=0.000001 C=-1.000000
1c6
1cc   B32: #	B33 <- B31  Freq: 31630.7
1cc   	movzbq  R13, [RDI + #24 + RAX]	# ubyte -> long
1d2   	movsbl  R11, [RDI + #23 + RAX]	# byte
1d8   	movsbl  R9, [RDI + #18 + RAX]	# byte
1de   	movsbl  R8, [RDI + #22 + RAX]	# byte
1e4   	movsbl  RSI, [RDI + #21 + RAX]	# byte
1e9   	movsbl  RDX, [RDI + #20 + RAX]	# byte
1ee   	movsbl  R10, [RDI + #19 + RAX]	# byte
1f4   	movslq  RAX, RBX	# i2l
1f7   	movzbl  RBX, R10	# int & 0xFF -> long
1fb   	salq    RAX, #56
1ff   	salq    RBX, #40
203   	movzbl  RDI, RDX	# int & 0xFF -> long
206   	movzbl  R10, RSI	# int & 0xFF -> long
20a   	salq    RDI, #32
20e   	salq    R10, #24
212   	movzbl  R8, R8	# int & 0xFF -> long
216   	movzbl  R9, R9	# int & 0xFF -> long
21a   	salq    R8, #16
21e   	salq    R9, #48
222   	orq     RAX, R9	# long
225   	orq     RAX, RBX	# long
228   	orq     RAX, RDI	# long
22b   	orq     RAX, R10	# long
22e   	orq     RAX, R8	# long
231   	movzbl  R10, R11	# int & 0xFF -> long
235   	salq    R10, #8
239   	orq     RAX, R10	# long
23c   	orq     RAX, R13	# long
23f
23f   B33: #	B6 <- B63 B32 B25 B24  Freq: 61790.8
23f   	movq    [R14 + #16 (8-bit)], RAX	# long ! Field: DeserBenchmark$ByteBufferRunnable.v64
243   	addl    RBP, #9	# int
246   	jmp     B6
246
24b   B34: #	B40 B35 <- B19  Freq: 62502.9
24b   	cmpl    RDI, narrowklass: precise klass java/nio/HeapByteBuffer: 0x00007fd91405bc58:Constant:exact *	# compressed klass ptr
251   	je,us  B40  P=0.508982 C=-1.000000
251
253   B35: #	B55 B36 <- B34  Freq: 30690
253   	cmpl    RDI, narrowklass: precise klass java/nio/DirectByteBuffer: 0x00007fd91405bd28:Constant:exact *	# compressed klass ptr
259   	jne,u  B55  P=0.000001 C=-1.000000
259
25f   B36: #	B59 B37 <- B35  Freq: 30690
25f   	# checkcastPP of RSI
25f   	testl   R8, R8
262   	jl     B59  P=0.000000 C=21504.000000
262
268   B37: #	B59 B38 <- B36  Freq: 30690
268   	movl    R11, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
26c   	subl    R11, RBP	# int
26f   	decl    R11	# int
272   	cmpl    R11, #4
276   	jl     B59  P=0.000000 C=21504.000000
276
27c   B38: #	B5 B39 <- B37  Freq: 30690
27c   	movq    R10, [RSI + #16 (8-bit)]	# long ! Field: java/nio/Buffer.address
280   	movzbl  R8, [RSI + #42 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.nativeByteOrder
285   	movq    R10, R10	# long->ptr
285   	movl    RAX, [R10 + RBX]	# int
289   	testl   R8, R8
28c   	jne     B5  P=0.000000 C=5375.000000
28c
292   B39: #	B5 <- B38  Freq: 30690
292   	bswapl  RAX
294   	jmp     B5
294
299   B40: #	B57 B41 <- B34  Freq: 31812.9
299   	# checkcastPP of RSI
299   	testl   R8, R8
29c   	jl     B57  P=0.000000 C=21504.000000
29c
2a2   B41: #	B57 B42 <- B40  Freq: 31812.9
2a2   	movl    R10, [RSI + #28 (8-bit)]	# int ! Field: java/nio/Buffer.limit
2a6   	subl    R10, RBP	# int
2a9   	decl    R10	# int
2ac   	cmpl    R10, #4
2b0   	jl     B57  P=0.000000 C=21504.000000
2b0
2b6   B42: #	B60 B43 <- B41  Freq: 31812.9
2b6   	movl    R10, RBP	# spill
2b9   	addl    R10, [RSI + #36 (8-bit)]	# int
2bd   	movzbl  R9, [RSI + #41 (8-bit)]	# ubyte ! Field: java/nio/ByteBuffer.bigEndian
2c2   	movl    RDX, R10	# spill
2c5   	incl    RDX	# int
2c7   	testl   R9, R9
2ca   	je     B60  P=0.000000 C=5376.000000
2ca
2d0   B43: #	B68 B44 <- B42  Freq: 31812.8
2d0   	movl    R11, [RSI + #44 (8-bit)]	# compressed ptr ! Field: java/nio/ByteBuffer.hb
2d4   	movl    R9, [R11 + #12 (8-bit)]	# range
2d8   	NullCheck R11
2d8
2d8   B44: #	B52 B45 <- B43  Freq: 31812.8
2d8   	cmpl    RDX, R9	# unsigned
2db   	jnb,u  B52  P=0.000001 C=-1.000000
2db
2e1   B45: #	B4 B46 <- B44  Freq: 31812.8
2e1   	movslq  RDI, R10	# i2l
2e4   	movsbl  RAX, [R11 + #17 + RDI]	# byte
2ea   	movl    RBX, R10	# spill
2ed   	addl    RBX, #4	# int
2f0   	cmpl    RBX, R9	# unsigned
2f3   	jb,u  B4  P=0.999999 C=-1.000000
2f3
2f9   B46: #	N758 <- B45  Freq: 0.0322352
2f9   	addl    R10, #2	# int
2fd   	movl    [rsp + #0], RCX	# spill
300   	movl    [rsp + #4], R8	# spill
305   	movq    [rsp + #8], R14	# spill
30a   	movq    [rsp + #16], RSI	# spill
30f   	movl    [rsp + #24], RDX	# spill
313   	movl    [rsp + #28], RAX	# spill
317   	movl    [rsp + #32], R11	# spill
31c   	movl    [rsp + #36], R10	# spill
321   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
327   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #36
        # java.nio.Bits::getIntB @ bci:9  L[0]=rsp + #16 L[1]=rsp + #24 STK[0]=rsp + #28
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Oop [32]=NarrowOop off=812}
32c   	int3	# ShouldNotReachHere
32c
331   B47: #	N758 <- B15 B14  Freq: 0.12773
331   	movl    RSI, #26	# int
336   	movq    [rsp + #0], R14	# spill
33a   	movl    [rsp + #8], RCX	# spill
33e   	movl    [rsp + #12], R10	# spill
343   	movq    [rsp + #16], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
34b   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:12  L[0]=_ L[1]=_
        # java.nio.HeapByteBuffer::get @ bci:7  L[0]=_ L[1]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_
        # OopMap{[0]=Oop [12]=NarrowOop [16]=Oop off=848}
350   	int3	# ShouldNotReachHere
350
355   B48: #	N758 <- B17  Freq: 0.0642862
355   	movl    RSI, #-28	# int
35a   	movq    [rsp + #0], R14	# spill
35e   	movl    [rsp + #8], RCX	# spill
362   	movl    [rsp + #12], R10	# spill
367   	movl    [rsp + #16], R11	# spill
      	nop 	# 3 bytes pad for loops and calls
36f   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_
        # OopMap{[0]=Oop [12]=NarrowOop off=884}
374   	int3	# ShouldNotReachHere
374
379   B49: #	N758 <- B12 B11  Freq: 0.122509
379   	movl    RSI, #26	# int
37e   	movq    [rsp + #0], R14	# spill
382   	movl    [rsp + #8], RCX	# spill
386   	movq    [rsp + #16], R10	# spill
38b   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:12  L[0]=_ L[1]=_
        # java.nio.DirectByteBuffer::get @ bci:6  L[0]=_ L[1]=_ STK[0]=#Ptr0x00007fd914154ae8 STK[1]=rsp + #16
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_
        # OopMap{[0]=Oop [16]=Oop off=912}
390   	int3	# ShouldNotReachHere
390
395   B50: #	N758 <- B10  Freq: 0.0608505
395   	movl    RSI, #-58	# int
39a   	movq    [rsp + #0], R14	# spill
39e   	movl    [rsp + #8], RCX	# spill
3a2   	movl    [rsp + #12], R9	# spill
3a7   	call,static  wrapper for: uncommon_trap(reason='bimorphic' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=RBP L[3]=_ STK[0]=rsp + #12 STK[1]=RBP
        # OopMap{[0]=Oop [12]=NarrowOop off=940}
3ac   	int3	# ShouldNotReachHere
3ac
3b1   B51: #	N758 <- B6 B2  Freq: 0.0592683
3b1   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

3bc   	ret
3bc
3bd   B52: #	N758 <- B44  Freq: 0.0322353
3bd   	movl    [rsp + #0], RCX	# spill
3c0   	movl    [rsp + #4], R8	# spill
3c5   	movq    [rsp + #8], R14	# spill
3ca   	movq    [rsp + #16], RSI	# spill
3cf   	movl    [rsp + #28], R11	# spill
3d4   	movl    [rsp + #32], RDX	# spill
3d8   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
3df   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # java.nio.Bits::getIntB @ bci:2  L[0]=rsp + #16 L[1]=rsp + #32
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Oop [28]=NarrowOop off=996}
3e4   	int3	# ShouldNotReachHere
3e4
3e9   B53: #	N758 <- B30  Freq: 0.0320508
3e9   	movl    [rsp + #0], RCX	# spill
3ec   	movl    [rsp + #4], R8	# spill
3f1   	movq    [rsp + #8], R14	# spill
3f6   	movq    [rsp + #16], RSI	# spill
3fb   	movl    [rsp + #28], RDI	# spill
3ff   	movl    [rsp + #32], RDX	# spill
403   	movl    RSI, #-28	# int
      	nop 	# 3 bytes pad for loops and calls
40b   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #28 STK[1]=rsp + #32
        # java.nio.Bits::getLongB @ bci:2  L[0]=rsp + #16 L[1]=rsp + #32
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Oop [28]=NarrowOop off=1040}
410   	int3	# ShouldNotReachHere
410
415   B54: #	N758 <- B31  Freq: 0.0320507
415   	addl    R10, #2	# int
419   	movl    [rsp + #0], RCX	# spill
41c   	movl    [rsp + #4], R8	# spill
421   	movq    [rsp + #8], R14	# spill
426   	movq    [rsp + #16], RSI	# spill
42b   	movl    [rsp + #24], RDX	# spill
42f   	movl    [rsp + #28], RBX	# spill
433   	movl    [rsp + #32], RDI	# spill
437   	movl    [rsp + #36], R10	# spill
43c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
443   	call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #36
        # java.nio.Bits::getLongB @ bci:9  L[0]=rsp + #16 L[1]=rsp + #24 STK[0]=rsp + #28
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [16]=Oop [32]=NarrowOop off=1096}
448   	int3	# ShouldNotReachHere
448
44d   B55: #	N758 <- B35  Freq: 0.03069
44d   	movl    RSI, #-58	# int
452   	movl    [rsp + #0], RCX	# spill
455   	movq    [rsp + #8], R14	# spill
45a   	movl    [rsp + #16], R9	# spill
45f   	movl    [rsp + #20], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
467   	call,static  wrapper for: uncommon_trap(reason='bimorphic' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #20 L[3]=_ STK[0]=rsp + #8 STK[1]=rsp + #16 STK[2]=rsp + #20
        # OopMap{[8]=Oop [16]=NarrowOop off=1132}
46c   	int3	# ShouldNotReachHere
46c
471   B56: #	N758 <- B21  Freq: 0.0301602
471   	movl    RSI, #-58	# int
476   	movl    [rsp + #0], RCX	# spill
479   	movq    [rsp + #8], R14	# spill
47e   	movl    [rsp + #16], R9	# spill
483   	movl    [rsp + #20], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
48b   	call,static  wrapper for: uncommon_trap(reason='bimorphic' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #20 L[3]=_ STK[0]=rsp + #8 STK[1]=rsp + #16 STK[2]=rsp + #20
        # OopMap{[8]=Oop [16]=NarrowOop off=1168}
490   	int3	# ShouldNotReachHere
490
495   B57: #	N758 <- B41 B40  Freq: 0.031076
495   	movl    [rsp + #0], RCX	# spill
498   	movl    [rsp + #4], R8	# spill
49d   	movq    [rsp + #8], R14	# spill
4a2   	movq    [rsp + #24], RSI	# spill
4a7   	movq    [rsp + #32], RSI	# spill
4ac   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
4b3   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:5  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [24]=Oop [32]=Oop off=1208}
4b8   	int3	# ShouldNotReachHere
4b8
4bd   B58: #	N758 <- B27 B26  Freq: 0.0308981
4bd   	movl    [rsp + #0], RCX	# spill
4c0   	movl    [rsp + #4], R8	# spill
4c5   	movq    [rsp + #8], R14	# spill
4ca   	movq    [rsp + #24], RSI	# spill
4cf   	movq    [rsp + #32], RSI	# spill
4d4   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
4db   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:6  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [24]=Oop [32]=Oop off=1248}
4e0   	int3	# ShouldNotReachHere
4e0
4e5   B59: #	N758 <- B37 B36  Freq: 0.0299791
4e5   	movl    [rsp + #0], RCX	# spill
4e8   	movl    [rsp + #4], R8	# spill
4ed   	movq    [rsp + #8], R14	# spill
4f2   	movq    [rsp + #24], RSI	# spill
4f7   	movl    RSI, #26	# int
      	nop 	# 3 bytes pad for loops and calls
4ff   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.DirectByteBuffer::getInt @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [24]=Oop off=1284}
504   	int3	# ShouldNotReachHere
504
509   B60: #	B70 B61 <- B42  Freq: 0.0151696
509   	movl    [rsp + #4], RCX	# spill
50d   	movq    [rsp + #8], R14	# spill
512   	movl    [rsp + #0], R8	# spill
      	nop 	# 1 bytes pad for loops and calls
517   	call,static  java.nio.Bits::getIntL
        # java.nio.Bits::getInt @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=rsp + #0 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop off=1308}
51c
51c   B61: #	B5 <- B60  Freq: 0.0151693
        # Block is sole successor of call
51c   	movq    R14, [rsp + #8]	# spill
521   	movl    RCX, [rsp + #4]	# spill
525   	jmp     B5
525
52a   B62: #	B71 B63 <- B28  Freq: 0.0150827
52a   	movl    [rsp + #4], RCX	# spill
52e   	movq    [rsp + #8], R14	# spill
533   	movl    [rsp + #0], R8	# spill
537   	call,static  java.nio.Bits::getLongL
        # java.nio.Bits::getLong @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=rsp + #0 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop off=1340}
53c
53c   B63: #	B33 <- B62  Freq: 0.0150824
        # Block is sole successor of call
53c   	movq    R14, [rsp + #8]	# spill
541   	movl    RCX, [rsp + #4]	# spill
545   	jmp     B33
545
54a   B64: #	N758 <- B23 B22  Freq: 0.0294616
54a   	movl    [rsp + #0], RCX	# spill
54d   	movl    [rsp + #4], R8	# spill
552   	movq    [rsp + #8], R14	# spill
557   	movq    [rsp + #24], RSI	# spill
55c   	movl    RSI, #26	# int
      	nop 	# 2 bytes pad for loops and calls
563   	call,static  wrapper for: uncommon_trap(reason='unloaded' action='reinterpret' index='26')
        # java.nio.Buffer::checkIndex @ bci:14  L[0]=_ L[1]=_ L[2]=_
        # java.nio.DirectByteBuffer::getLong @ bci:6  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=rsp + #24
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap{[8]=Oop [24]=Oop off=1384}
568   	int3	# ShouldNotReachHere
568
56d   B65: #	N758 <- B1  Freq: 1.01328e-06
56d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
573   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=1400}
578   	int3	# ShouldNotReachHere
578
57d   B66: #	N758 <- B8  Freq: 0.125945
57d   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
583   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1416}
588   	int3	# ShouldNotReachHere
588
58d   B67: #	N758 <- B16  Freq: 0.0642863
58d   	movl    RSI, #-10	# int
592   	movl    RBP, R11	# spill
      	nop 	# 2 bytes pad for loops and calls
597   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::get @ bci:13  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # DeserBenchmark$ByteBufferRunnable::run @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap{off=1436}
59c   	int3	# ShouldNotReachHere
59c
5a1   B68: #	N758 <- B43  Freq: 0.0322353
5a1   	movl    RSI, #-10	# int
5a6   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
5ab   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # java.nio.Bits::getIntB @ bci:2  L[0]=_ L[1]=_
        # java.nio.Bits::getInt @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getInt @ bci:15  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:40  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1456}
5b0   	int3	# ShouldNotReachHere
5b0
5b5   B69: #	N758 <- B29  Freq: 0.0320508
5b5   	movl    RSI, #-10	# int
5ba   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
5bf   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # java.nio.HeapByteBuffer::_get @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # java.nio.Bits::getLongB @ bci:2  L[0]=_ L[1]=_
        # java.nio.Bits::getLong @ bci:6  L[0]=_ L[1]=_ L[2]=_
        # java.nio.HeapByteBuffer::getLong @ bci:16  L[0]=_ L[1]=_
        # DeserBenchmark$ByteBufferRunnable::run @ bci:58  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_
        # OopMap{off=1476}
5c4   	int3	# ShouldNotReachHere
5c4
5c9   B70: #	B72 <- B60  Freq: 1.51696e-07
5c9   	# exception oop is in rax; no code emitted
5c9   	movq    RSI, RAX	# spill
5cc   	jmp,s   B72
5cc
5ce   B71: #	B72 <- B62  Freq: 1.50827e-07
5ce   	# exception oop is in rax; no code emitted
5ce   	movq    RSI, RAX	# spill
5ce
5d1   B72: #	N758 <- B70 B71  Freq: 3.02523e-07
5d1   	addq    rsp, 64	# Destroy frame
	popq   rbp

5d6   	jmp     rethrow_stub
5d6

   3175   93       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234b0, pc=0x00007fd949233bb9)
     nmethod   3175   93       3       DeserBenchmark$ByteBufferRunnable::run (74 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949233bb9)
DeserBenchmark$ByteBufferRunnable.run(DeserBenchmark.java:85) - goto @ bci 70 
     Created vframeArray 0x00007fd9581c00f8
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd9581c00f8 mode 0
     {method} {0x00007fd948a15438} 'run' '()V' in 'DeserBenchmark$ByteBufferRunnable' - goto @ bci 70 sp = 0x00007fd962523448
   5041  100    b  3       java.lang.String::getChars (62 bytes)
                              @ 9  java/lang/StringIndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 27  java/lang/StringIndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 43  java/lang/StringIndexOutOfBoundsException::<init> (not loaded)   not inlineable
                              @ 58   java.lang.System::arraycopy (0 bytes)   intrinsic
-- ByteBuffer direct
  9.65 msec/loop
     5045  101    b  1       java.nio.Buffer::position (5 bytes)
988.26 MB/s
   5048  102    b  3       java.util.concurrent.ConcurrentHashMap::setTabAt (19 bytes)
                              @ 15   sun.misc.Unsafe::putObjectVolatile (0 bytes)   intrinsic
   5049  103     n 0       sun.misc.Unsafe::putObjectVolatile (native)   
   5049  104     n 0       sun.misc.Unsafe::compareAndSwapObject (native)   
   5170  105     n 0       sun.misc.Unsafe::getByte (native)   
   5170  106     n 0       sun.misc.Unsafe::getInt (native)   
   5170  107     n 0       sun.misc.Unsafe::getLong (native)   
   5188  108 %  b  3       DeserBenchmark$UnsafeRunnable::run @ 10 (98 bytes)
                              @ 29   sun.misc.Unsafe::getByte (0 bytes)   intrinsic
                              @ 55   sun.misc.Unsafe::getInt (0 bytes)   intrinsic
                              @ 82   sun.misc.Unsafe::getLong (0 bytes)   intrinsic
   5192  109    b  3       DeserBenchmark$UnsafeRunnable::run (98 bytes)
                              @ 29   sun.misc.Unsafe::getByte (0 bytes)   intrinsic
                              @ 55   sun.misc.Unsafe::getInt (0 bytes)   intrinsic
                              @ 82   sun.misc.Unsafe::getLong (0 bytes)   intrinsic
   5195  110 %  b  4       DeserBenchmark$UnsafeRunnable::run @ 10 (98 bytes)
                              @ 29   sun.misc.Unsafe::getByte (0 bytes)   (intrinsic)
                              @ 55   sun.misc.Unsafe::getInt (0 bytes)   (intrinsic)
                              @ 82   sun.misc.Unsafe::getLong (0 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd948a15f88
 - method holder:     'DeserBenchmark$UnsafeRunnable'
 - constants:         0x00007fd948a15ab0 constant pool [85] {0x00007fd948a15ab0} for 'DeserBenchmark$UnsafeRunnable' cache=0x00007fd948a16130
 - access:            0xc1000001  public 
 - name:              'run'
 - signature:         '()V'
 - max stack:         8
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8060: 0xb0000000 i2c: 0x00007fd949106ae0 c2i: 0x00007fd949106bf4 c2iUV: 0x00007fd949106bc7
 - compiled entry     0x00007fd949236480
 - code size:         98
 - code start:        0x00007fd948a15f10
 - code end (excl):   0x00007fd948a15f72
 - method data:       0x00007fd948a163e8
 - checked ex length: 0
 - linenumber start:  0x00007fd948a15f72
 - localvar length:   0
 - compiled code: nmethod   5200  109       3       DeserBenchmark$UnsafeRunnable::run (98 bytes)
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N220: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B16 B2 <- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c   	movl    RBX, [RSI + #8 (8-bit)]	# int
01f   	movq    RBP, [RSI + #24 (8-bit)]	# ptr
023   	movl    R14, [RSI + #16 (8-bit)]	# int
027   	movq    RDI, RSI	# spill
02a   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
037   	testq   RBP, RBP	# ptr
03a   	je     B16  P=0.001000 C=-1.000000
03a
040   B2: #	B17 B3 <- B1  Freq: 0.999
040   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
044   	decode_klass_not_null R10,R10
048   	movq    R10, [R10 + #56 (8-bit)]	# class
04c   	movq    R11, precise klass DeserBenchmark$UnsafeRunnable: 0x00007fd900098548:Constant:exact *	# ptr
056   	cmpq    R10, R11	# ptr
059   	jne,u  B17  P=0.000001 C=-1.000000
059
05f   B3: #	B4 <- B2  Freq: 0.998999
05f   	# checkcastPP of RBP
05f
05f   B4: #	B15 B5 <- B3 B16  Freq: 0.999999
05f   	cmpl    RBX, R14
062   	jge     B15  P=0.000000 C=40960.000000
062
068   B5: #	B18 B6 <- B4  Freq: 0.999999
068   	movl    R10, [RBP + #36 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$UnsafeRunnable.base
06c   	NullCheck RBP
06c
06c   B6: #	B8 B7 <- B5  Freq: 0.999997
06c   	movl    R8, RBX	# spill
06f   	incl    R8	# int
072   	movslq  R11, RBX	# i2l
075   	addq    R11, [RBP + #24 (8-bit)]	# long
079   	
079   	movsbl  R10, [R10 + R11]	# byte
07e   	
07e   	movl    R9, [RBP + #36 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$UnsafeRunnable.base
082   	movslq  R11, R8	# i2l
085   	addq    R11, [RBP + #24 (8-bit)]	# long
089   	decode_heap_oop R8,R9
114   	addq    R8, R11	# ptr
117   	testl   R10, R10
11a   	jl,s   B8  P=0.500488 C=40960.000000
11a
11c   B7: #	B9 <- B6  Freq: 0.49951
11c   	
11c   	movq    R10, [R8]	# long
11f   	
11f   	movq    [RBP + #16 (8-bit)], R10	# long ! Field: DeserBenchmark$UnsafeRunnable.v64
123   	addl    RBX, #9	# int
126   	jmp,s   B9
126
128   B8: #	B9 <- B6  Freq: 0.500487
128   	
128   	movl    R10, [R8]	# int
12b   	
12b   	movl    [RBP + #12 (8-bit)], R10	# int ! Field: DeserBenchmark$UnsafeRunnable.v32
12f   	addl    RBX, #5	# int
132
132   B9: #	B12 <- B7 B8  Freq: 0.999997
132   	incl    RBX	# int
134   	jmp,s   B12
      	nop 	# 10 bytes pad for loops and calls

140   B10: #	B11 <- B13  top-of-loop Freq: 500487
140   	
140   	movl    R11, [R10]	# int
143   	
143   	movl    [RBP + #12 (8-bit)], R11	# int ! Field: DeserBenchmark$UnsafeRunnable.v32
147   	addl    RBX, #5	# int
14a
14a   B11: #	B12 <- B14 B10  top-of-loop Freq: 999997
14a   	incl    RBX	# int
14c   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # DeserBenchmark$UnsafeRunnable::run @ bci:94  L[0]=RBP L[1]=R14 L[2]=RBX L[3]=_
        # OopMap{rbp=Oop off=332}
152
152   B12: #	B15 B13 <- B9 B11 	Loop: B12-B11 inner  Freq: 999998
152   	cmpl    RBX, R14
155   	jge     B15  P=0.000000 C=40960.000000
155
15b   B13: #	B10 B14 <- B12  Freq: 999997
15b   	movl    R11, [RBP + #36 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$UnsafeRunnable.base
15f   	movslq  R10, RBX	# i2l
162   	addq    R10, [RBP + #24 (8-bit)]	# long
166   	
166   	movsbl  R11, [R11 + R10]	# byte
16b   	
16b   	movl    R10, [RBP + #36 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$UnsafeRunnable.base
16f   	movl    R9, RBX	# spill
172   	incl    R9	# int
175   	decode_heap_oop R10,R10
1fd   	movslq  R8, R9	# i2l
200   	addq    R8, [RBP + #24 (8-bit)]	# long
204   	addq    R10, R8	# ptr
207   	testl   R11, R11
20a   	jl     B10  P=0.500488 C=40960.000000
20a
210   B14: #	B11 <- B13  Freq: 499510
210   	
210   	movq    R10, [R10]	# long
213   	
213   	movq    [RBP + #16 (8-bit)], R10	# long ! Field: DeserBenchmark$UnsafeRunnable.v64
217   	addl    RBX, #9	# int
21a   	jmp     B11
21a
21f   B15: #	N220 <- B4 B12  Freq: 0.999998
21f   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

22a   	ret
22a
22b   B16: #	B4 <- B1  Freq: 0.000999987
22b   	xorl    RBP, RBP	# ptr
22d   	jmp     B4
22d
232   B17: #	N220 <- B2  Freq: 9.99e-07
232   	movl    RSI, #-99	# int
237   	movl    [rsp + #0], R14	# spill
23b   	movl    [rsp + #4], RBX	# spill
23f   	call,static  wrapper for: uncommon_trap(reason='constraint' action='reinterpret')
        # DeserBenchmark$UnsafeRunnable::run @ bci:10  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_
        # OopMap{rbp=Oop off=580}
244   	int3	# ShouldNotReachHere
244
249   B18: #	N220 <- B5  Freq: 1.01328e-06
249   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
24f   	call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # DeserBenchmark$UnsafeRunnable::run @ bci:19  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=596}
254   	int3	# ShouldNotReachHere
254

   5204  108 %     3       DeserBenchmark$UnsafeRunnable::run @ -2 (98 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234c0, pc=0x00007fd949236dc1)
     nmethod   5204  108 %     3       DeserBenchmark$UnsafeRunnable::run @ -2 (98 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949236dc1)
DeserBenchmark$UnsafeRunnable.run(DeserBenchmark.java:126) - goto @ bci 94 
     Created vframeArray 0x00007fd95814b108
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd95814b108 mode 0
     {method} {0x00007fd948a15f88} 'run' '()V' in 'DeserBenchmark$UnsafeRunnable' - goto @ bci 94 sp = 0x00007fd962523458
   5219  111    b  4       DeserBenchmark$UnsafeRunnable::run (98 bytes)
                              @ 29   sun.misc.Unsafe::getByte (0 bytes)   (intrinsic)
                              @ 55   sun.misc.Unsafe::getInt (0 bytes)   (intrinsic)
                              @ 82   sun.misc.Unsafe::getLong (0 bytes)   (intrinsic)
{method}
 - this oop:          0x00007fd948a15f88
 - method holder:     'DeserBenchmark$UnsafeRunnable'
 - constants:         0x00007fd948a15ab0 constant pool [85] {0x00007fd948a15ab0} for 'DeserBenchmark$UnsafeRunnable' cache=0x00007fd948a16130
 - access:            0xc1000001  public 
 - name:              'run'
 - signature:         '()V'
 - max stack:         8
 - max locals:        4
 - size of params:    1
 - method size:       12
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x00007fd94901e2e0
 - adapters:          AHE@0x00007fd9580b8060: 0xb0000000 i2c: 0x00007fd949106ae0 c2i: 0x00007fd949106bf4 c2iUV: 0x00007fd949106bc7
 - compiled entry     0x00007fd949236480
 - code size:         98
 - code start:        0x00007fd948a15f10
 - code end (excl):   0x00007fd948a15f72
 - method data:       0x00007fd948a163e8
 - checked ex length: 0
 - linenumber start:  0x00007fd948a15f72
 - localvar length:   0
 - compiled code: nmethod   5224  109       3       DeserBenchmark$UnsafeRunnable::run (98 bytes)
#
#  void ( DeserBenchmark$UnsafeRunnable:NotNull * )
#
#r018 rsi:rsi   : parm 0: DeserBenchmark$UnsafeRunnable:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N105: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B7 B2 <- BLOCK HEAD IS JUNK   Freq: 1
020   	subq    rsp, #24	# Create frame
	movq    [rsp + #16], rbp	# Save rbp

02c   	movl    R10, #-9	# int
032   	addl    R10, [RSI + #32 (8-bit)]	# int
036   	testl   R10, R10
039   	jle     B7  P=0.000000 C=49151.000000
039
03f   B2: #	B5 <- B1  Freq: 1
03f   	xorl    R8, R8	# int
042   	jmp,s   B5
042
044   B3: #	B4 <- B5  top-of-loop Freq: 500925
044   	
044   	movl    R9, [R11]	# int
047   	
047   	movl    [RSI + #12 (8-bit)], R9	# int ! Field: DeserBenchmark$UnsafeRunnable.v32
04b   	addl    R8, #5	# int
04f
04f   B4: #	B7 B5 <- B6 B3  top-of-loop Freq: 1e+06
04f   	incl    R8	# int
052   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # DeserBenchmark$UnsafeRunnable::run @ bci:94  L[0]=RSI L[1]=R10 L[2]=R8 L[3]=_
        # OopMap{rsi=Oop off=82}
058   	cmpl    R8, R10
05b   	jge     B7  P=0.000000 C=49150.000000
05b
061   B5: #	B3 B6 <- B2 B4 	Loop: B5-B4 inner  Freq: 1e+06
061   	movl    R9, [RSI + #36 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$UnsafeRunnable.base
065   	movslq  R11, R8	# i2l
068   	addq    R11, [RSI + #24 (8-bit)]	# long
06c   	
06c   	movsbl  R9, [R9 + R11]	# byte
071   	
071   	movl    R11, [RSI + #36 (8-bit)]	# compressed ptr ! Field: DeserBenchmark$UnsafeRunnable.base
075   	movl    RBX, R8	# spill
078   	incl    RBX	# int
07a   	decode_heap_oop R11,R11
102   	movslq  RCX, RBX	# i2l
105   	addq    RCX, [RSI + #24 (8-bit)]	# long
109   	addq    R11, RCX	# ptr
10c   	testl   R9, R9
10f   	jl     B3  P=0.500926 C=49151.000000
10f
115   B6: #	B4 <- B5  Freq: 499074
115   	
115   	movq    R11, [R11]	# long
118   	
118   	movq    [RSI + #16 (8-bit)], R11	# long ! Field: DeserBenchmark$UnsafeRunnable.v64
11c   	addl    R8, #9	# int
120   	jmp     B4
120
125   B7: #	N105 <- B4 B1  Freq: 1
125   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

130   	ret
130

   5226  109       3       DeserBenchmark$UnsafeRunnable::run (98 bytes)   made not entrant
DEOPT PACKING thread 0x00007fd95800d000 Deoptimized frame (sp=0x00007fd962523450 unextended sp=0x00007fd962523450, fp=0x00007fd962523508, real_fp=0x00007fd9625234b0, pc=0x00007fd949236682)
     nmethod   5226  109       3       DeserBenchmark$UnsafeRunnable::run (98 bytes)

     Virtual frames (innermost first):
        0 - frame( sp=0x00007fd962523450, unextended_sp=0x00007fd962523450, fp=0x00007fd962523508, pc=0x00007fd949236682)
DeserBenchmark$UnsafeRunnable.run(DeserBenchmark.java:126) - goto @ bci 94 
     Created vframeArray 0x00007fd95814c458
DEOPT UNPACKING thread 0x00007fd95800d000 vframeArray 0x00007fd95814c458 mode 0
     {method} {0x00007fd948a15f88} 'run' '()V' in 'DeserBenchmark$UnsafeRunnable' - goto @ bci 94 sp = 0x00007fd962523448
-- Unsafe heap
  6.82 msec/loop   6582  112    b  1       java.nio.Buffer::limit (5 bytes)

   6583  113    b  3       java.lang.CharacterData::of (120 bytes)
  1398.35 MB/s
   6586  114    b  1       java.lang.String::length (6 bytes)
   6586    5       3       java.lang.String::length (6 bytes)   made not entrant
   6587  115    b  3       java.util.concurrent.ConcurrentHashMap$Node::<init> (26 bytes)
                              @ 1   java.lang.Object::<init> (1 bytes)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fd94923cbe4, pid=8680, tid=140571634190080
#
# JRE version: OpenJDK Runtime Environment (8.0) (build 1.8.0-internal-fastdebug-elise_2014_04_09_00_03-b00)
# Java VM: OpenJDK 64-Bit Server VM (25.0-b70-fastdebug mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 111 C2 DeserBenchmark$UnsafeRunnable.run()V (98 bytes) @ 0x00007fd94923cbe4 [0x00007fd94923cba0+0x44]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# /home/elise/project/VM/OpenJDK/bench/hs_err_pid8680.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.sun.com/bugreport/crash.jsp
#
Current thread is 140571634190080
Dumping core ...
